<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青域</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2024-08-06T08:41:44.334Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>tianL.R</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>间隙树排序算法的可视化</title>
    <link href="http://yoursite.com/2024/08/06/%E9%97%B4%E9%9A%99%E6%A0%91%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2024/08/06/%E9%97%B4%E9%9A%99%E6%A0%91%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2024-08-06T07:10:43.000Z</published>
    <updated>2024-08-06T08:41:44.334Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>做文档翻译的OCR程序时，会遇到这样一个场景，因为通常OCR模型的输出都是按文本块逐行返回，当结果进入翻译模型时会丢失行与行之间的信息。为了解决这个问题，需要对OCR结果进行进一步的版面分析，将文本块合并成段落，再输入到翻译模型中去。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>间隙·树·排序算法</p><p>参考链接：<a href="https://github.com/hiroi-sora/GapTree_Sort_Algorithm" target="_blank" rel="noopener">https://github.com/hiroi-sora/GapTree_Sort_Algorithm</a></p><p><img src="/2024/08/06/间隙树排序算法的可视化/1.png" alt></p><p>算法主要对文本块按间隙进行划分，再经过树形排序，将底层OCR的输出结果从子文本块转化成段落文本块。</p><h3 id="算法重构"><a href="#算法重构" class="headerlink" title="算法重构"></a>算法重构</h3><p>为了使文本块的定位更加准确，使用原算法输出段落块（content_blocks）的上下左右四个边界点构成新段落块（new_blocks）</p><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">structure_ocr</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> line, tb <span class="keyword">in</span> enumerate(self.blocks_data):</span><br><span class="line">        tb[<span class="string">"bbox"</span>] = self.bboxes[line]</span><br><span class="line"></span><br><span class="line">    gtree = GapTree(<span class="keyword">lambda</span> tb: tb[<span class="string">"bbox"</span>])</span><br><span class="line">    sorted_text_blocks = gtree.sort(self.blocks_data)  <span class="comment"># 文本块排序</span></span><br><span class="line">    <span class="comment"># print(sorted_text_blocks)</span></span><br><span class="line">    pp = ParagraphParse(self.get_info, self.set_end)</span><br><span class="line">    <span class="comment"># 获取所有区块的文本块</span></span><br><span class="line">    nodes_text_blocks = gtree.get_nodes_text_blocks()</span><br><span class="line">    content_blocks = []</span><br><span class="line">    <span class="keyword">for</span> tbs <span class="keyword">in</span> nodes_text_blocks:</span><br><span class="line">        content = <span class="string">""</span></span><br><span class="line">        tbs = pp.run(tbs)  <span class="comment"># 预测结尾分隔符</span></span><br><span class="line">        <span class="keyword">for</span> tb <span class="keyword">in</span> tbs:  <span class="comment"># 输出文本和结尾分隔符</span></span><br><span class="line">            content += tb[<span class="string">"text"</span>] + tb[<span class="string">"end"</span>]</span><br><span class="line">        content_blocks.append(content)</span><br><span class="line"></span><br><span class="line">    node_tbs = []</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> gtree.current_nodes:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node[<span class="string">"units"</span>]:</span><br><span class="line">           <span class="keyword">continue</span>  <span class="comment"># 跳过没有块的根节点</span></span><br><span class="line">        x0 = node[<span class="string">"x_left"</span>]</span><br><span class="line">        x1 = node[<span class="string">"x_right"</span>]</span><br><span class="line">        y0 = gtree.current_rows[node[<span class="string">"r_top"</span>]][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        y1 = gtree.current_rows[node[<span class="string">"r_bottom"</span>]][<span class="number">0</span>][<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line">        node_tbs.append([[x0, y0], [x1, y0], [x1, y1], [x0, y1]])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node_tbs, content_blocks</span><br></pre></td></tr></table></figure><a id="more"></a><p>修改后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">structure_ocr</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> line, tb <span class="keyword">in</span> enumerate(self.blocks_data):</span><br><span class="line">        tb[<span class="string">"bbox"</span>] = self.bboxes[line]</span><br><span class="line"></span><br><span class="line">    gtree = GapTree(<span class="keyword">lambda</span> tb: tb[<span class="string">"bbox"</span>])</span><br><span class="line">    sorted_text_blocks = gtree.sort(self.blocks_data)  <span class="comment"># 文本块排序</span></span><br><span class="line">    <span class="comment"># print(sorted_text_blocks)</span></span><br><span class="line">    pp = ParagraphParse(self.get_info, self.set_end)</span><br><span class="line">    <span class="comment"># 获取所有区块的文本块</span></span><br><span class="line">    nodes_text_blocks = gtree.get_nodes_text_blocks()</span><br><span class="line">    content_blocks = []</span><br><span class="line">    <span class="keyword">for</span> tbs <span class="keyword">in</span> nodes_text_blocks:</span><br><span class="line">        content = <span class="string">""</span></span><br><span class="line">        tbs = pp.run(tbs)  <span class="comment"># 预测结尾分隔符</span></span><br><span class="line">        <span class="keyword">for</span> tb <span class="keyword">in</span> tbs:  <span class="comment"># 输出文本和结尾分隔符</span></span><br><span class="line">            content += tb[<span class="string">"text"</span>] + tb[<span class="string">"end"</span>]</span><br><span class="line">        content_blocks.append(content)</span><br><span class="line"></span><br><span class="line">    new_blocks = []</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> nodes_text_blocks:</span><br><span class="line">        x1_list = []</span><br><span class="line">        y1_list = []</span><br><span class="line">        x2_list = []</span><br><span class="line">        y2_list = []</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> m:</span><br><span class="line">            box_ = n.get(<span class="string">'box'</span>)</span><br><span class="line">            x1_list.append(box_[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">            y1_list.append(box_[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">            x2_list.append(box_[<span class="number">2</span>][<span class="number">0</span>])</span><br><span class="line">            y2_list.append(box_[<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line">        x1_ = min(x1_list)</span><br><span class="line">        y1_ = min(y1_list)</span><br><span class="line">        x2_ = max(x2_list)</span><br><span class="line">        y2_ = max(y2_list)</span><br><span class="line">        new_blocks.append([[x1_, y1_], [x2_, y1_], [x2_, y2_], [x1_, y2_]])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_blocks, content_blocks</span><br></pre></td></tr></table></figure><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StructureOCR</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, blocks_data)</span>:</span></span><br><span class="line">        self.blocks_data = blocks_data</span><br><span class="line">        self.bboxes = linePreprocessing(self.blocks_data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_info</span><span class="params">(tb)</span>:</span>  <span class="comment"># 返回信息</span></span><br><span class="line">        b = tb[<span class="string">"box"</span>]</span><br><span class="line">        <span class="keyword">return</span> (b[<span class="number">0</span>][<span class="number">0</span>], b[<span class="number">0</span>][<span class="number">1</span>], b[<span class="number">2</span>][<span class="number">0</span>], b[<span class="number">2</span>][<span class="number">1</span>]), tb[<span class="string">"text"</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_end</span><span class="params">(tb, end)</span>:</span>  <span class="comment"># 获取预测的块尾分隔符</span></span><br><span class="line">        tb[<span class="string">"end"</span>] = end</span><br><span class="line">        <span class="comment"># also： tb["text"] += end</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">structure_ocr</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> line, tb <span class="keyword">in</span> enumerate(self.blocks_data):</span><br><span class="line">            tb[<span class="string">"bbox"</span>] = self.bboxes[line]</span><br><span class="line"></span><br><span class="line">        gtree = GapTree(<span class="keyword">lambda</span> tb: tb[<span class="string">"bbox"</span>])</span><br><span class="line">        sorted_text_blocks = gtree.sort(self.blocks_data)  <span class="comment"># 文本块排序</span></span><br><span class="line">        <span class="comment"># print(sorted_text_blocks)</span></span><br><span class="line">        pp = ParagraphParse(self.get_info, self.set_end)</span><br><span class="line">        <span class="comment"># 获取所有区块的文本块</span></span><br><span class="line">        nodes_text_blocks = gtree.get_nodes_text_blocks()</span><br><span class="line">        content_blocks = []</span><br><span class="line">        <span class="keyword">for</span> tbs <span class="keyword">in</span> nodes_text_blocks:</span><br><span class="line">            content = <span class="string">""</span></span><br><span class="line">            tbs = pp.run(tbs)  <span class="comment"># 预测结尾分隔符</span></span><br><span class="line">            <span class="keyword">for</span> tb <span class="keyword">in</span> tbs:  <span class="comment"># 输出文本和结尾分隔符</span></span><br><span class="line">                content += tb[<span class="string">"text"</span>] + tb[<span class="string">"end"</span>]</span><br><span class="line">            content_blocks.append(content)</span><br><span class="line"></span><br><span class="line">        node_tbs = []</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> gtree.current_nodes:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node[<span class="string">"units"</span>]:</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 跳过没有块的根节点</span></span><br><span class="line">            x0 = node[<span class="string">"x_left"</span>]</span><br><span class="line">            x1 = node[<span class="string">"x_right"</span>]</span><br><span class="line">            y0 = gtree.current_rows[node[<span class="string">"r_top"</span>]][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">            y1 = gtree.current_rows[node[<span class="string">"r_bottom"</span>]][<span class="number">0</span>][<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line">            node_tbs.append([[x0, y0], [x1, y0], [x1, y1], [x0, y1]])</span><br><span class="line"></span><br><span class="line">        new_blocks = []</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> nodes_text_blocks:</span><br><span class="line">            x1_list = []</span><br><span class="line">            y1_list = []</span><br><span class="line">            x2_list = []</span><br><span class="line">            y2_list = []</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> m:</span><br><span class="line">                box_ = n.get(<span class="string">'box'</span>)</span><br><span class="line">                x1_list.append(box_[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">                y1_list.append(box_[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">                x2_list.append(box_[<span class="number">2</span>][<span class="number">0</span>])</span><br><span class="line">                y2_list.append(box_[<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line">            x1_ = min(x1_list)</span><br><span class="line">            y1_ = min(y1_list)</span><br><span class="line">            x2_ = max(x2_list)</span><br><span class="line">            y2_ = max(y2_list)</span><br><span class="line">            new_blocks.append([[x1_, y1_], [x2_, y1_], [x2_, y2_], [x1_, y2_]])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> new_blocks, content_blocks</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>使用paddleOCR，将OCR结果转成算法输入的json_data</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> base64</span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">    test_image = <span class="string">'./test/t2.png'</span></span><br><span class="line">    origin_image = cv2.imread(test_image)</span><br><span class="line">    encoded = cv2_base64(origin_image)</span><br><span class="line"></span><br><span class="line">    json_data = &#123;</span><br><span class="line">        <span class="string">"img_b64"</span>: encoded,</span><br><span class="line">        <span class="string">"lang"</span>: <span class="string">"cn"</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(<span class="string">'localhost:port/ai/ppocr/ai/ppocr'</span>, json=json_data).json()</span><br><span class="line">    ocr_result = response.get(<span class="string">'data'</span>)</span><br><span class="line">    ocr_boxes = [line[<span class="number">0</span>] <span class="keyword">for</span> line <span class="keyword">in</span> ocr_result[<span class="number">0</span>]]</span><br><span class="line">    ocr_txts = [line[<span class="number">1</span>][<span class="number">0</span>] <span class="keyword">for</span> line <span class="keyword">in</span> ocr_result[<span class="number">0</span>]]</span><br><span class="line">    ocr_scores = [line[<span class="number">1</span>][<span class="number">1</span>] <span class="keyword">for</span> line <span class="keyword">in</span> ocr_result[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    json_data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ocr_result[<span class="number">0</span>])):</span><br><span class="line">        json_data.append(&#123;</span><br><span class="line">            <span class="string">"box"</span>: [[int(i[<span class="number">0</span>]), int(i[<span class="number">1</span>])] <span class="keyword">for</span> i <span class="keyword">in</span> ocr_boxes[i]],</span><br><span class="line">            <span class="string">"score"</span>: ocr_scores[i],</span><br><span class="line">            <span class="string">"text"</span>: ocr_txts[i]</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    so = StructureOCR(json_data)</span><br><span class="line">    blocks, paragraphs = so.structure_ocr()</span><br></pre></td></tr></table></figure><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>当文本成段后，不能直接通过<code>draw.text</code>等方法将文本写作一行，而是要设置每行文本不得超过段落块的长度，并且总行数不能超出段落块总长度。需要设计算法，当每行文本超出长度限制时，自动添加换行符。</p><h3 id="段落换行算法"><a href="#段落换行算法" class="headerlink" title="段落换行算法"></a>段落换行算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisualizeOCR</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, im, boxes, texts)</span>:</span></span><br><span class="line">        self.boxes = boxes</span><br><span class="line">        self.texts = texts</span><br><span class="line">        <span class="keyword">if</span> isinstance(im, str):</span><br><span class="line">            self.im = Image.open(im)</span><br><span class="line">            self.im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">            self.im = cv2.cvtColor(im, cv2.COLOR_RGB2BGR)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">        self.im = Image.fromarray(self.im)</span><br><span class="line">        self.im = self.im.convert(<span class="string">'RGBA'</span>)</span><br><span class="line">        self.size = (int(self.im.size[<span class="number">0</span>]), int(self.im.size[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_text</span><span class="params">(self, width, sentence, font, text_scale)</span>:</span></span><br><span class="line">        <span class="comment"># 按规定宽度分组</span></span><br><span class="line">        max_line_height, total_lines = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        allText = []</span><br><span class="line">        <span class="keyword">for</span> sen <span class="keyword">in</span> sentence.split(<span class="string">'\n'</span>):</span><br><span class="line">            paragraph, line_height, line_count = self.get_paragraph(sen, width, font, text_scale)</span><br><span class="line">            max_line_height = max(line_height, max_line_height)</span><br><span class="line">            total_lines += line_count</span><br><span class="line">            allText.append((paragraph, line_count))</span><br><span class="line">        line_height = max_line_height</span><br><span class="line">        total_height = total_lines * line_height</span><br><span class="line">        <span class="keyword">return</span> allText, total_height, line_height</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paragraph</span><span class="params">(text, width, font, text_scale)</span>:</span></span><br><span class="line">        <span class="comment"># 字体像素较小时，换行效果不佳，每5个像素换行下移0.05个像素</span></span><br><span class="line">        text_size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> text_scale &lt;= <span class="number">15</span>:</span><br><span class="line">            text_size = <span class="number">0.1</span></span><br><span class="line">        <span class="keyword">elif</span> text_scale &lt;= <span class="number">10</span>:</span><br><span class="line">            text_size = <span class="number">0.15</span></span><br><span class="line">        <span class="keyword">elif</span> text_scale &lt;= <span class="number">5</span>:</span><br><span class="line">            text_size = <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line">        txt = Image.new(<span class="string">'RGBA'</span>, (<span class="number">1033</span>, <span class="number">737</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br><span class="line">        draw = ImageDraw.Draw(txt)</span><br><span class="line">        <span class="comment"># 所有文字的段落</span></span><br><span class="line">        paragraph = <span class="string">""</span></span><br><span class="line">        <span class="comment"># 宽度总和</span></span><br><span class="line">        sum_width = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 行数</span></span><br><span class="line">        line_count = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 行高</span></span><br><span class="line">        line_height = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">            _, _, w, h = draw.textbbox((<span class="number">0</span>, <span class="number">0</span>), char, font=font)</span><br><span class="line"></span><br><span class="line">            sum_width += w</span><br><span class="line">            <span class="keyword">if</span> sum_width &gt; width:  <span class="comment"># 超过预设宽度就修改段落 以及当前行数</span></span><br><span class="line">                line_count += <span class="number">1</span></span><br><span class="line">                line_count += text_size + <span class="number">0.1</span></span><br><span class="line">                sum_width = <span class="number">0</span></span><br><span class="line">                paragraph += <span class="string">'\n'</span></span><br><span class="line">            paragraph += char</span><br><span class="line">            line_height = max(h, line_height)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> paragraph.endswith(<span class="string">'\n'</span>):</span><br><span class="line">            paragraph += <span class="string">'\n'</span></span><br><span class="line">        <span class="keyword">return</span> paragraph, line_height, line_count</span><br></pre></td></tr></table></figure><p>实现换行后，还需要考虑字体的大小，将文字锁定在文本框内。在pillow库中<code>draw.text</code>方法中中文字符的大小近似于其正方矩形像素块的边长。接下来需要考虑的参数变量有三个：</p><p><strong>1.每行最多的字符x（x_num）;</strong></p><p><strong>2.总行数y（y_num）;</strong></p><p><strong>3.字体像素s（text_scale）</strong></p><p>同时考虑到并不是每行都能够写满段落块的长度，可能存在提前换行、空行、结束等情况。可以计算段落的总换行符数量（count(‘\n’)），将换行符出现的地方视作空行，并×2算作换行+留白部分产生的像素面积。那么已知常量包括：</p><p><strong>1.换行次数b（blank_scale）；</strong></p><p><strong>2.总字数l（len(text)）；</strong></p><p><strong>3.段落框长度w（width_p，值取width*0.97，减少出界概率）</strong></p><p><strong>3.段落框宽度h（height）</strong></p><h4 id="设立方程组："><a href="#设立方程组：" class="headerlink" title="设立方程组："></a>设立方程组：</h4><p><strong><font color="gold">{</font></strong></p><p><strong><font color="gold">① (y-b)*x=l</font></strong></p><p><strong><font color="gold">② x*s = w</font></strong></p><p><strong><font color="gold">③ y*s = h</font></strong></p><p><strong><font color="gold">{</font></strong></p><h4 id="转换到代码中："><a href="#转换到代码中：" class="headerlink" title="转换到代码中："></a>转换到代码中：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(y_num - blank_scale) * x_num = len(text)</span><br><span class="line">x_num * text_scale = width_p</span><br><span class="line">y_num * text_scale = height</span><br></pre></td></tr></table></figure><h4 id="简化方程组："><a href="#简化方程组：" class="headerlink" title="简化方程组："></a>简化方程组：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(y_num - blank_scale) * x_num = len(text)</span><br><span class="line">x_num * text_scale = width_p</span><br><span class="line">y_num * text_scale = height</span><br><span class="line">===&gt;</span><br><span class="line">x_num = len(text) / (y_num - blank_scale)</span><br><span class="line">x_num = width_p / text_scale</span><br><span class="line">width_p / text_scale = len(text) / ((height / text_scale) - blank_scale)</span><br><span class="line">===&gt;</span><br><span class="line">len(text) * text_scale * text_scale + blank_scale * len(text) * text_scale - width_p * height = <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="解方程"><a href="#解方程" class="headerlink" title="解方程"></a>解方程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    n = b * b - <span class="number">4</span> * a * c</span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">0</span>:</span><br><span class="line">        x1 = (-b + math.sqrt(n)) / (<span class="number">2</span> * a)</span><br><span class="line">        x2 = (-b - math.sqrt(n)) / (<span class="number">2</span> * a)</span><br><span class="line">        <span class="keyword">return</span> x1 <span class="keyword">if</span> x1 &gt; <span class="number">0</span> <span class="keyword">else</span> x2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><h4 id="获取最佳像素值"><a href="#获取最佳像素值" class="headerlink" title="获取最佳像素值"></a>获取最佳像素值</h4><p>经过实际观察，对于中文字符，将计算得到的像素大小-2后视觉效果更佳。同时可以根据图像大小、单文本行不换行等因素，选择最佳字体大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text_scale = min(</span><br><span class="line">    int(quadratic(len(text), blank_scale * len(text), -width_p * height)) - <span class="number">2</span>,</span><br><span class="line">    int(self.size[<span class="number">0</span>] / <span class="number">66</span>),</span><br><span class="line">    int(height/<span class="number">2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisualizeOCR</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, im, boxes, texts)</span>:</span></span><br><span class="line">        self.boxes = boxes</span><br><span class="line">        self.texts = texts</span><br><span class="line">        <span class="keyword">if</span> isinstance(im, str):</span><br><span class="line">            self.im = Image.open(im)</span><br><span class="line">            self.im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">            self.im = cv2.cvtColor(im, cv2.COLOR_RGB2BGR)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">        self.im = Image.fromarray(self.im)</span><br><span class="line">        self.im = self.im.convert(<span class="string">'RGBA'</span>)</span><br><span class="line">        self.size = (int(self.im.size[<span class="number">0</span>]), int(self.im.size[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_text</span><span class="params">(self, width, sentence, font, text_scale)</span>:</span></span><br><span class="line">        <span class="comment"># 按规定宽度分组</span></span><br><span class="line">        max_line_height, total_lines = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        allText = []</span><br><span class="line">        <span class="keyword">for</span> sen <span class="keyword">in</span> sentence.split(<span class="string">'\n'</span>):</span><br><span class="line">            paragraph, line_height, line_count = self.get_paragraph(sen, width, font, text_scale)</span><br><span class="line">            max_line_height = max(line_height, max_line_height)</span><br><span class="line">            total_lines += line_count</span><br><span class="line">            allText.append((paragraph, line_count))</span><br><span class="line">        line_height = max_line_height</span><br><span class="line">        total_height = total_lines * line_height</span><br><span class="line">        <span class="keyword">return</span> allText, total_height, line_height</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_paragraph</span><span class="params">(text, width, font, text_scale)</span>:</span></span><br><span class="line">        text_size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> text_scale &lt;= <span class="number">15</span>:</span><br><span class="line">            text_size = <span class="number">0.1</span></span><br><span class="line">        <span class="keyword">elif</span> text_scale &lt;= <span class="number">10</span>:</span><br><span class="line">            text_size = <span class="number">0.15</span></span><br><span class="line">        <span class="keyword">elif</span> text_scale &lt;= <span class="number">5</span>:</span><br><span class="line">            text_size = <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line">        txt = Image.new(<span class="string">'RGBA'</span>, (<span class="number">1033</span>, <span class="number">737</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br><span class="line">        draw = ImageDraw.Draw(txt)</span><br><span class="line">        <span class="comment"># 所有文字的段落</span></span><br><span class="line">        paragraph = <span class="string">""</span></span><br><span class="line">        <span class="comment"># 宽度总和</span></span><br><span class="line">        sum_width = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 行数</span></span><br><span class="line">        line_count = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 行高</span></span><br><span class="line">        line_height = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">            _, _, w, h = draw.textbbox((<span class="number">0</span>, <span class="number">0</span>), char, font=font)</span><br><span class="line"></span><br><span class="line">            sum_width += w</span><br><span class="line">            <span class="keyword">if</span> sum_width &gt; width:  <span class="comment"># 超过预设宽度就修改段落 以及当前行数</span></span><br><span class="line">                line_count += <span class="number">1</span></span><br><span class="line">                line_count += text_size + <span class="number">0.1</span></span><br><span class="line">                sum_width = <span class="number">0</span></span><br><span class="line">                paragraph += <span class="string">'\n'</span></span><br><span class="line">            paragraph += char</span><br><span class="line">            line_height = max(h, line_height)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> paragraph.endswith(<span class="string">'\n'</span>):</span><br><span class="line">            paragraph += <span class="string">'\n'</span></span><br><span class="line">        <span class="keyword">return</span> paragraph, line_height, line_count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visualize_ocr</span><span class="params">(self)</span>:</span></span><br><span class="line">        im_canvas = Image.new(<span class="string">'RGBA'</span>, self.size, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, res <span class="keyword">in</span> enumerate(self.texts):</span><br><span class="line">            <span class="keyword">if</span> self.boxes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                box = self.boxes[i]</span><br><span class="line">                x, y = box[<span class="number">0</span>][<span class="number">0</span>], box[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">                width = int(box[<span class="number">1</span>][<span class="number">0</span>] - box[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">                height = int(box[<span class="number">2</span>][<span class="number">1</span>] - box[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">                width_p = int((box[<span class="number">1</span>][<span class="number">0</span>] - box[<span class="number">0</span>][<span class="number">0</span>]) * <span class="number">0.97</span>)</span><br><span class="line">                text = res</span><br><span class="line">                <span class="keyword">if</span> text == <span class="string">""</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                blank_line_count = text.count(<span class="string">'\n'</span>)</span><br><span class="line">                blank_scale = blank_line_count * <span class="number">2</span> <span class="keyword">if</span> blank_line_count &gt; <span class="number">1</span> <span class="keyword">else</span> blank_line_count</span><br><span class="line"></span><br><span class="line">                <span class="string">"""</span></span><br><span class="line"><span class="string">                方程组，求字体最大像素</span></span><br><span class="line"><span class="string">                x_num: x轴个数</span></span><br><span class="line"><span class="string">                y_num: y轴个数</span></span><br><span class="line"><span class="string">                text_scale: 文本像素</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                (y_num - blank_scale) * x_num = len(text)</span></span><br><span class="line"><span class="string">                x_num * text_scale = width_p</span></span><br><span class="line"><span class="string">                y_num * text_scale = height</span></span><br><span class="line"><span class="string">                ===&gt;</span></span><br><span class="line"><span class="string">                x_num = len(text) / (y_num - blank_scale)</span></span><br><span class="line"><span class="string">                x_num = width_p / text_scale</span></span><br><span class="line"><span class="string">                width_p / text_scale = len(text) / ((height / text_scale) - blank_scale)</span></span><br><span class="line"><span class="string">                ===&gt;</span></span><br><span class="line"><span class="string">                len(text) * text_scale * text_scale + blank_scale * len(text) * text_scale - width_p * height = 0</span></span><br><span class="line"><span class="string">                """</span></span><br><span class="line"></span><br><span class="line">                text_scale = min(</span><br><span class="line">                    int(quadratic(len(text), blank_scale * len(text), -width_p * height)) - <span class="number">2</span>,</span><br><span class="line">                    int(self.size[<span class="number">0</span>] / <span class="number">66</span>),</span><br><span class="line">                    int(height/<span class="number">2</span>)</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                font = ImageFont.truetype(<span class="string">"SourceHanSansCN-Medium.otf"</span>, text_scale)</span><br><span class="line">                draw = ImageDraw.Draw(im_canvas)</span><br><span class="line">                paragraph, note_height, line_height = self.split_text(width_p, text, font, text_scale)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> sen, line_count <span class="keyword">in</span> paragraph:</span><br><span class="line">                    draw.text((x, y), sen, fill=(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), font=font)</span><br><span class="line">                    y += line_height * line_count</span><br><span class="line">                draw.rectangle(</span><br><span class="line">                    ((box[<span class="number">0</span>][<span class="number">0</span>], box[<span class="number">0</span>][<span class="number">1</span>]), (box[<span class="number">2</span>][<span class="number">0</span>], box[<span class="number">2</span>][<span class="number">1</span>])),</span><br><span class="line">                    fill=<span class="literal">None</span>,</span><br><span class="line">                    outline=(<span class="number">139</span>, <span class="number">0</span>, <span class="number">139</span>),</span><br><span class="line">                    width=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        im = image_join(self.im, im_canvas, <span class="string">'x'</span>)</span><br><span class="line">        im = im.convert(<span class="string">'RGB'</span>)</span><br><span class="line">        <span class="comment"># 还原连续存储数组</span></span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">        <span class="keyword">return</span> im</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    n = b * b - <span class="number">4</span> * a * c</span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">0</span>:</span><br><span class="line">        x1 = (-b + math.sqrt(n)) / (<span class="number">2</span> * a)</span><br><span class="line">        x2 = (-b - math.sqrt(n)) / (<span class="number">2</span> * a)</span><br><span class="line">        <span class="keyword">return</span> x1 <span class="keyword">if</span> x1 &gt; <span class="number">0</span> <span class="keyword">else</span> x2</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'该一元二次方程无解'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_join</span><span class="params">(img1, img2, flag=<span class="string">'y'</span>)</span>:</span></span><br><span class="line">    size1, size2 = img1.size, img2.size</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="string">'x'</span>:</span><br><span class="line">        im = Image.new(<span class="string">"RGB"</span>, (size1[<span class="number">0</span>] + size2[<span class="number">0</span>], size1[<span class="number">1</span>]))</span><br><span class="line">        loc1, loc2 = (<span class="number">0</span>, <span class="number">0</span>), (size1[<span class="number">0</span>], <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        im = Image.new(<span class="string">"RGB"</span>, (size1[<span class="number">0</span>], size2[<span class="number">1</span>] + size1[<span class="number">1</span>]))</span><br><span class="line">        loc1, loc2 = (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, size1[<span class="number">1</span>])</span><br><span class="line">    im.paste(img1, loc1)</span><br><span class="line">    im.paste(img2, loc2)</span><br><span class="line">    <span class="keyword">return</span> im</span><br></pre></td></tr></table></figure><h3 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> base64</span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">    test_image = <span class="string">'./test/t2.png'</span></span><br><span class="line">    origin_image = cv2.imread(test_image)</span><br><span class="line">    encoded = cv2_base64(origin_image)</span><br><span class="line"></span><br><span class="line">    json_data = &#123;</span><br><span class="line">        <span class="string">"img_b64"</span>: encoded,</span><br><span class="line">        <span class="string">"lang"</span>: <span class="string">"cn"</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(<span class="string">'localhost:port/ai/ppocr'</span>, json=json_data).json()</span><br><span class="line">    ocr_result = response.get(<span class="string">'data'</span>)</span><br><span class="line">    ocr_boxes = [line[<span class="number">0</span>] <span class="keyword">for</span> line <span class="keyword">in</span> ocr_result[<span class="number">0</span>]]</span><br><span class="line">    ocr_txts = [line[<span class="number">1</span>][<span class="number">0</span>] <span class="keyword">for</span> line <span class="keyword">in</span> ocr_result[<span class="number">0</span>]]</span><br><span class="line">    ocr_scores = [line[<span class="number">1</span>][<span class="number">1</span>] <span class="keyword">for</span> line <span class="keyword">in</span> ocr_result[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    json_data = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ocr_result[<span class="number">0</span>])):</span><br><span class="line">        json_data.append(&#123;</span><br><span class="line">            <span class="string">"box"</span>: [[int(i[<span class="number">0</span>]), int(i[<span class="number">1</span>])] <span class="keyword">for</span> i <span class="keyword">in</span> ocr_boxes[i]],</span><br><span class="line">            <span class="string">"score"</span>: ocr_scores[i],</span><br><span class="line">            <span class="string">"text"</span>: ocr_txts[i]</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    so = StructureOCR(json_data)</span><br><span class="line">    blocks, paragraphs = so.structure_ocr()</span><br><span class="line">    </span><br><span class="line">    vo = VisualizeOCR(origin_image, blocks, paragraphs)</span><br><span class="line">    image = vo.visualize_ocr()</span><br><span class="line">    </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    显示图像</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 适配显示器</span></span><br><span class="line">    <span class="keyword">if</span> image.shape[<span class="number">0</span>] &gt; <span class="number">1080</span>:</span><br><span class="line">        mag = int(image.shape[<span class="number">0</span>] / <span class="number">1080</span>)</span><br><span class="line">        image = cv2.resize(image, (int(image.shape[<span class="number">1</span>] / mag), int(image.shape[<span class="number">0</span>] / mag)))</span><br><span class="line">    <span class="keyword">if</span> image.shape[<span class="number">1</span>] &gt; <span class="number">1920</span>:</span><br><span class="line">        mag = image.shape[<span class="number">1</span>] / <span class="number">1920</span></span><br><span class="line">        image = cv2.resize(image, (int(image.shape[<span class="number">1</span>] / mag), int(image.shape[<span class="number">0</span>] / mag)))</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">"image"</span>, image)</span><br><span class="line">    cv2.waitKey(<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>效果演示：</p><p><img src="/2024/08/06/间隙树排序算法的可视化/2.png" alt></p><p><img src="/2024/08/06/间隙树排序算法的可视化/3.png" alt></p><p><img src="/2024/08/06/间隙树排序算法的可视化/4.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;做文档翻译的OCR程序时，会遇到这样一个场景，因为通常OCR模型的输出都是按文本块逐行返回，当结果进入翻译模型时会丢失行与行之间的信息。为了解决这个问题，需要对OCR结果进行进一步的版面分析，将文本块合并成段落，再输入到翻译模型中去。&lt;/p&gt;
&lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;p&gt;间隙·树·排序算法&lt;/p&gt;
&lt;p&gt;参考链接：&lt;a href=&quot;https://github.com/hiroi-sora/GapTree_Sort_Algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/hiroi-sora/GapTree_Sort_Algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/08/06/间隙树排序算法的可视化/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;算法主要对文本块按间隙进行划分，再经过树形排序，将底层OCR的输出结果从子文本块转化成段落文本块。&lt;/p&gt;
&lt;h3 id=&quot;算法重构&quot;&gt;&lt;a href=&quot;#算法重构&quot; class=&quot;headerlink&quot; title=&quot;算法重构&quot;&gt;&lt;/a&gt;算法重构&lt;/h3&gt;&lt;p&gt;为了使文本块的定位更加准确，使用原算法输出段落块（content_blocks）的上下左右四个边界点构成新段落块（new_blocks）&lt;/p&gt;
&lt;p&gt;源码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;structure_ocr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line, tb &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(self.blocks_data):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tb[&lt;span class=&quot;string&quot;&gt;&quot;bbox&quot;&lt;/span&gt;] = self.bboxes[line]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gtree = GapTree(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; tb: tb[&lt;span class=&quot;string&quot;&gt;&quot;bbox&quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sorted_text_blocks = gtree.sort(self.blocks_data)  &lt;span class=&quot;comment&quot;&gt;# 文本块排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# print(sorted_text_blocks)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pp = ParagraphParse(self.get_info, self.set_end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 获取所有区块的文本块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodes_text_blocks = gtree.get_nodes_text_blocks()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content_blocks = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; tbs &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nodes_text_blocks:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        content = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tbs = pp.run(tbs)  &lt;span class=&quot;comment&quot;&gt;# 预测结尾分隔符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; tb &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; tbs:  &lt;span class=&quot;comment&quot;&gt;# 输出文本和结尾分隔符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            content += tb[&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;] + tb[&lt;span class=&quot;string&quot;&gt;&quot;end&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        content_blocks.append(content)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node_tbs = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; node &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; gtree.current_nodes:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; node[&lt;span class=&quot;string&quot;&gt;&quot;units&quot;&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 跳过没有块的根节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x0 = node[&lt;span class=&quot;string&quot;&gt;&quot;x_left&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x1 = node[&lt;span class=&quot;string&quot;&gt;&quot;x_right&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        y0 = gtree.current_rows[node[&lt;span class=&quot;string&quot;&gt;&quot;r_top&quot;&lt;/span&gt;]][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        y1 = gtree.current_rows[node[&lt;span class=&quot;string&quot;&gt;&quot;r_bottom&quot;&lt;/span&gt;]][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        node_tbs.append([[x0, y0], [x1, y0], [x1, y1], [x0, y1]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; node_tbs, content_blocks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="算法" scheme="http://yoursite.com/categories/算法/"/>
    
    
    <category term="OCR" scheme="http://yoursite.com/tags/OCR/"/>
    
  </entry>
  
  <entry>
    <title>doccano</title>
    <link href="http://yoursite.com/2024/06/28/doccano/"/>
    <id>http://yoursite.com/2024/06/28/doccano/</id>
    <published>2024-06-28T02:42:26.000Z</published>
    <updated>2024-06-28T09:28:33.660Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Doccano是一种用于文本标注的开源工具，旨在简化和加速标注任务的进行。它提供了一个直观的用户界面，使标注人员能够轻松地对文本数据进行标注，并创建高质量的训练数据集用于机器学习和自然语言处理任务。</p><p><img src="/2024/06/28/doccano/1.png" alt></p><p>链接：<a href="https://github.com/doccano/doccano" target="_blank" rel="noopener">https://github.com/doccano/doccano</a></p><h2 id="一、安装部署"><a href="#一、安装部署" class="headerlink" title="一、安装部署"></a>一、安装部署</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p><font color="gold">操作系统</font>：Centos7.9</p><p><font color="gold">python</font>：3.10</p><p><font color="gold">doccano</font>：1.6.2</p><h3 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h3><p><font color="gold">注</font>：百度源没有相应安装包</p><p><code>pip install doccano==1.6.2 -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><code>doccano init</code></p><h3 id="设置超级管理员账号密码"><a href="#设置超级管理员账号密码" class="headerlink" title="设置超级管理员账号密码"></a>设置超级管理员账号密码</h3><p><code>doccano createuser --username admin --password 123456</code></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p><code>doccano webserver --port 8000</code></p><p><img src="/2024/06/28/doccano/2.png" alt></p><p><img src="/2024/06/28/doccano/3.png" alt></p><a id="more"></a><h2 id="ERNIE-UIE-关系抽取微调数据标注"><a href="#ERNIE-UIE-关系抽取微调数据标注" class="headerlink" title="ERNIE-UIE 关系抽取微调数据标注"></a>ERNIE-UIE 关系抽取微调数据标注</h2><h3 id="创建序列标注任务"><a href="#创建序列标注任务" class="headerlink" title="创建序列标注任务"></a>创建序列标注任务</h3><p><img src="/2024/06/28/doccano/4.png" alt></p><h3 id="导入增量训练数据集"><a href="#导入增量训练数据集" class="headerlink" title="导入增量训练数据集"></a>导入增量训练数据集</h3><p><img src="/2024/06/28/doccano/5.png" alt></p><p><font color="gold">注</font>：如果导入不成功，长时间转圈，需要去控制台执行<code>doccano task</code></p><h3 id="创建实体标签和关系标签"><a href="#创建实体标签和关系标签" class="headerlink" title="创建实体标签和关系标签"></a>创建实体标签和关系标签</h3><p><img src="/2024/06/28/doccano/6.png" alt></p><p><img src="/2024/06/28/doccano/7.png" alt></p><h3 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h3><p><img src="/2024/06/28/doccano/8.png" alt></p><p><img src="/2024/06/28/doccano/9.png" alt></p><h3 id="数据集导出"><a href="#数据集导出" class="headerlink" title="数据集导出"></a>数据集导出</h3><p><img src="/2024/06/28/doccano/10.png" alt></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"id"</span>: <span class="number">11</span>, <span class="attr">"text"</span>: <span class="string">"钢筋调直宜采用机械方法,也可以采用冷拉方法"</span>, <span class="attr">"relations"</span>: [&#123;<span class="attr">"id"</span>: <span class="number">1</span>, <span class="attr">"from_id"</span>: <span class="number">45</span>, <span class="attr">"to_id"</span>: <span class="number">44</span>, <span class="attr">"type"</span>: <span class="string">"材料"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">2</span>, <span class="attr">"from_id"</span>: <span class="number">46</span>, <span class="attr">"to_id"</span>: <span class="number">44</span>, <span class="attr">"type"</span>: <span class="string">"材料"</span>&#125;], <span class="attr">"entities"</span>: [&#123;<span class="attr">"id"</span>: <span class="number">44</span>, <span class="attr">"start_offset"</span>: <span class="number">0</span>, <span class="attr">"end_offset"</span>: <span class="number">4</span>, <span class="attr">"label"</span>: <span class="string">"工程"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">45</span>, <span class="attr">"start_offset"</span>: <span class="number">7</span>, <span class="attr">"end_offset"</span>: <span class="number">11</span>, <span class="attr">"label"</span>: <span class="string">"工艺"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">46</span>, <span class="attr">"start_offset"</span>: <span class="number">17</span>, <span class="attr">"end_offset"</span>: <span class="number">21</span>, <span class="attr">"label"</span>: <span class="string">"工艺"</span>&#125;]&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>: <span class="number">12</span>, <span class="attr">"text"</span>: <span class="string">"受力钢筋的接头形式应按设计要求采用,若设计无要求时,钢筋宜采用焊接接头和机械连接接头,也可采用绑扎接头。"</span>, <span class="attr">"relations"</span>: [&#123;<span class="attr">"id"</span>: <span class="number">3</span>, <span class="attr">"from_id"</span>: <span class="number">53</span>, <span class="attr">"to_id"</span>: <span class="number">22</span>, <span class="attr">"type"</span>: <span class="string">"材料"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">4</span>, <span class="attr">"from_id"</span>: <span class="number">54</span>, <span class="attr">"to_id"</span>: <span class="number">22</span>, <span class="attr">"type"</span>: <span class="string">"材料"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">5</span>, <span class="attr">"from_id"</span>: <span class="number">55</span>, <span class="attr">"to_id"</span>: <span class="number">22</span>, <span class="attr">"type"</span>: <span class="string">"材料"</span>&#125;], <span class="attr">"entities"</span>: [&#123;<span class="attr">"id"</span>: <span class="number">22</span>, <span class="attr">"start_offset"</span>: <span class="number">0</span>, <span class="attr">"end_offset"</span>: <span class="number">9</span>, <span class="attr">"label"</span>: <span class="string">"工程"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">53</span>, <span class="attr">"start_offset"</span>: <span class="number">31</span>, <span class="attr">"end_offset"</span>: <span class="number">35</span>, <span class="attr">"label"</span>: <span class="string">"工艺"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">54</span>, <span class="attr">"start_offset"</span>: <span class="number">36</span>, <span class="attr">"end_offset"</span>: <span class="number">42</span>, <span class="attr">"label"</span>: <span class="string">"工艺"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">55</span>, <span class="attr">"start_offset"</span>: <span class="number">47</span>, <span class="attr">"end_offset"</span>: <span class="number">51</span>, <span class="attr">"label"</span>: <span class="string">"工艺"</span>&#125;]&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>: <span class="number">13</span>, <span class="attr">"text"</span>: <span class="string">"多层非焊接钢筋骨架的各层钢筋之间,应保持层距准确,宜采用短钢筋支垫。"</span>, <span class="attr">"relations"</span>: [&#123;<span class="attr">"id"</span>: <span class="number">6</span>, <span class="attr">"from_id"</span>: <span class="number">60</span>, <span class="attr">"to_id"</span>: <span class="number">59</span>, <span class="attr">"type"</span>: <span class="string">"工艺"</span>&#125;], <span class="attr">"entities"</span>: [&#123;<span class="attr">"id"</span>: <span class="number">59</span>, <span class="attr">"start_offset"</span>: <span class="number">0</span>, <span class="attr">"end_offset"</span>: <span class="number">9</span>, <span class="attr">"label"</span>: <span class="string">"工程"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">60</span>, <span class="attr">"start_offset"</span>: <span class="number">28</span>, <span class="attr">"end_offset"</span>: <span class="number">33</span>, <span class="attr">"label"</span>: <span class="string">"工艺"</span>&#125;]&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>: <span class="number">14</span>, <span class="attr">"text"</span>: <span class="string">"预制桩的修筑工艺包括一体化成孔、自灌注。"</span>, <span class="attr">"relations"</span>: [&#123;<span class="attr">"id"</span>: <span class="number">7</span>, <span class="attr">"from_id"</span>: <span class="number">62</span>, <span class="attr">"to_id"</span>: <span class="number">28</span>, <span class="attr">"type"</span>: <span class="string">"工艺"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">8</span>, <span class="attr">"from_id"</span>: <span class="number">61</span>, <span class="attr">"to_id"</span>: <span class="number">28</span>, <span class="attr">"type"</span>: <span class="string">"工艺"</span>&#125;], <span class="attr">"entities"</span>: [&#123;<span class="attr">"id"</span>: <span class="number">28</span>, <span class="attr">"start_offset"</span>: <span class="number">0</span>, <span class="attr">"end_offset"</span>: <span class="number">3</span>, <span class="attr">"label"</span>: <span class="string">"工程"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">61</span>, <span class="attr">"start_offset"</span>: <span class="number">10</span>, <span class="attr">"end_offset"</span>: <span class="number">15</span>, <span class="attr">"label"</span>: <span class="string">"工艺"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">62</span>, <span class="attr">"start_offset"</span>: <span class="number">16</span>, <span class="attr">"end_offset"</span>: <span class="number">19</span>, <span class="attr">"label"</span>: <span class="string">"工艺"</span>&#125;]&#125;</span><br><span class="line">&#123;<span class="attr">"id"</span>: <span class="number">15</span>, <span class="attr">"text"</span>: <span class="string">"目前我国水运工程的模板用材已向多样化发展,除钢材和木材外,胶木板、竹胶板、塑料等已得到广泛运用,并取得了较好的技术经济效益。"</span>, <span class="attr">"relations"</span>: [&#123;<span class="attr">"id"</span>: <span class="number">9</span>, <span class="attr">"from_id"</span>: <span class="number">63</span>, <span class="attr">"to_id"</span>: <span class="number">52</span>, <span class="attr">"type"</span>: <span class="string">"材料"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">10</span>, <span class="attr">"from_id"</span>: <span class="number">64</span>, <span class="attr">"to_id"</span>: <span class="number">52</span>, <span class="attr">"type"</span>: <span class="string">"材料"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">11</span>, <span class="attr">"from_id"</span>: <span class="number">65</span>, <span class="attr">"to_id"</span>: <span class="number">52</span>, <span class="attr">"type"</span>: <span class="string">"材料"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">12</span>, <span class="attr">"from_id"</span>: <span class="number">67</span>, <span class="attr">"to_id"</span>: <span class="number">52</span>, <span class="attr">"type"</span>: <span class="string">"材料"</span>&#125;], <span class="attr">"entities"</span>: [&#123;<span class="attr">"id"</span>: <span class="number">52</span>, <span class="attr">"start_offset"</span>: <span class="number">4</span>, <span class="attr">"end_offset"</span>: <span class="number">8</span>, <span class="attr">"label"</span>: <span class="string">"工程"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">63</span>, <span class="attr">"start_offset"</span>: <span class="number">22</span>, <span class="attr">"end_offset"</span>: <span class="number">24</span>, <span class="attr">"label"</span>: <span class="string">"材料"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">64</span>, <span class="attr">"start_offset"</span>: <span class="number">25</span>, <span class="attr">"end_offset"</span>: <span class="number">27</span>, <span class="attr">"label"</span>: <span class="string">"材料"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">65</span>, <span class="attr">"start_offset"</span>: <span class="number">29</span>, <span class="attr">"end_offset"</span>: <span class="number">32</span>, <span class="attr">"label"</span>: <span class="string">"材料"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">66</span>, <span class="attr">"start_offset"</span>: <span class="number">33</span>, <span class="attr">"end_offset"</span>: <span class="number">36</span>, <span class="attr">"label"</span>: <span class="string">"材料"</span>&#125;, &#123;<span class="attr">"id"</span>: <span class="number">67</span>, <span class="attr">"start_offset"</span>: <span class="number">37</span>, <span class="attr">"end_offset"</span>: <span class="number">39</span>, <span class="attr">"label"</span>: <span class="string">"材料"</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><h3 id="数据集格式转换"><a href="#数据集格式转换" class="headerlink" title="数据集格式转换"></a>数据集格式转换</h3><p>参考<a href="https://github.com/PaddlePaddle/PaddleNLP/tree/develop/legacy/model_zoo/uie" target="_blank" rel="noopener">https://github.com/PaddlePaddle/PaddleNLP/tree/develop/legacy/model_zoo/uie</a></p><p>进入PaddleNLP-UIE路径，将json文件放置在路径下，创建data文件夹用于存储数据集，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python doccano.py \</span><br><span class="line">    --doccano_file ./data/doccano_ext.json \</span><br><span class="line">    --task_type ext \</span><br><span class="line">    --save_dir ./data \</span><br><span class="line">    --splits 0.8 0.2 0 \</span><br><span class="line">    --schema_lang ch</span><br></pre></td></tr></table></figure><p>由于测试样本较少（5条），未自动化分验证集dev，手动将测试集内容复制到验证集当中。</p><h3 id="开启训练"><a href="#开启训练" class="headerlink" title="开启训练"></a>开启训练</h3><p>在UIE路径下创建<code>checkpoint/model_best</code>用于存放模型</p><p>执行（GPU）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">export finetuned_model=./checkpoint/model_best</span><br><span class="line"></span><br><span class="line">python -u -m paddle.distributed.launch --gpus "0,1" finetune.py \</span><br><span class="line">    --device gpu \</span><br><span class="line">    --logging_steps 10 \</span><br><span class="line">    --save_steps 100 \</span><br><span class="line">    --eval_steps 100 \</span><br><span class="line">    --seed 42 \</span><br><span class="line">    --model_name_or_path uie-base \</span><br><span class="line">    --output_dir $finetuned_model \</span><br><span class="line">    --train_path data/train.txt \</span><br><span class="line">    --dev_path data/dev.txt  \</span><br><span class="line">    --max_seq_length 512  \</span><br><span class="line">    --per_device_eval_batch_size 16 \</span><br><span class="line">    --per_device_train_batch_size  16 \</span><br><span class="line">    --num_train_epochs 100 \</span><br><span class="line">    --learning_rate 1e-5 \</span><br><span class="line">    --do_train \</span><br><span class="line">    --do_eval \</span><br><span class="line">    --do_export \</span><br><span class="line">    --export_model_dir $finetuned_model \</span><br><span class="line">    --label_names "start_positions" "end_positions" \</span><br><span class="line">    --overwrite_output_dir \</span><br><span class="line">    --disable_tqdm True \</span><br><span class="line">    --metric_for_best_model eval_f1 \</span><br><span class="line">    --load_best_model_at_end  True \</span><br><span class="line">    --save_total_limit 1 \</span><br></pre></td></tr></table></figure><p>训练结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br></pre></td><td class="code"><pre><span class="line">(py39_ppner_2_7_2) [root@jdz uie]# python -u -m paddle.distributed.launch --gpus "1" finetune.py     --device gpu     --logging_steps 10     --save_steps 100     --eval_steps 100     --seed 42     --model_name_or_path uie-base     --output_dir $finetuned_model     --train_path data/train.txt     --dev_path data/dev.txt      --max_seq_length 512      --per_device_eval_batch_size 16     --per_device_train_batch_size  16     --num_train_epochs 100     --learning_rate 1e-5     --do_train     --do_eval     --do_export     --export_model_dir $finetuned_model     --label_names "start_positions" "end_positions"     --overwrite_output_dir     --disable_tqdm True     --metric_for_best_model eval_f1     --load_best_model_at_end  True     --save_total_limit 1 </span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,778 -----------  Configuration  ----------------------</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 auto_parallel_config: None</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 auto_tuner_json: None</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 devices: 1</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 elastic_level: -1</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 elastic_timeout: 30</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 enable_gpu_log: True</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 gloo_port: 6767</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 host: None</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 ips: None</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 job_id: default</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 legacy: False</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,779 log_dir: log</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 log_level: INFO</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 log_overwrite: False</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 master: None</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 max_restart: 3</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 nnodes: 1</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 nproc_per_node: None</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 rank: -1</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 run_mode: collective</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 server_num: None</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 servers: </span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 sort_ip: False</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 start_port: 6070</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 trainer_num: None</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 trainers: </span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,780 training_script: finetune.py</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,781 training_script_args: ['--device', 'gpu', '--logging_steps', '10', '--save_steps', '100', '--eval_steps', '100', '--seed', '42', '--model_name_or_path', 'uie-base', '--output_dir', './checkpoint/model_best', '--train_path', 'data/train.txt', '--dev_path', 'data/dev.txt', '--max_seq_length', '512', '--per_device_eval_batch_size', '16', '--per_device_train_batch_size', '16', '--num_train_epochs', '100', '--learning_rate', '1e-5', '--do_train', '--do_eval', '--do_export', '--export_model_dir', './checkpoint/model_best', '--label_names', 'start_positions', 'end_positions', '--overwrite_output_dir', '--disable_tqdm', 'True', '--metric_for_best_model', 'eval_f1', '--load_best_model_at_end', 'True', '--save_total_limit', '1']</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,781 with_gloo: 1</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,781 --------------------------------------------------</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,782 Job: default, mode collective, replicas 1[1:1], elastic False</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,797 Run Pod: pwbjet, replicas 1, status ready</span><br><span class="line">LAUNCH INFO 2024-06-26 18:05:23,824 Watching Pod: pwbjet, replicas 1, status running</span><br><span class="line">/root/anaconda3/envs/py39_ppner_2_7_2/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils.</span><br><span class="line">  warnings.warn("Setuptools is replacing distutils.")</span><br><span class="line">[2024-06-26 18:05:27,933] [ WARNING] - evaluation_strategy reset to IntervalStrategy.STEPS for do_eval is True. you can also set evaluation_strategy='epoch'.</span><br><span class="line">[2024-06-26 18:05:27,933] [    INFO] - The default value for the training argument `--report_to` will change in v5 (from all installed integrations to none). In v5, you will need to use `--report_to all` to get the same behavior as now. You should start updating your code and make this info disappear :-).</span><br><span class="line">[2024-06-26 18:05:27,934] [    INFO] - ============================================================</span><br><span class="line">[2024-06-26 18:05:27,934] [    INFO] -      Model Configuration Arguments      </span><br><span class="line">[2024-06-26 18:05:27,934] [    INFO] - paddle commit id              :fbf852dd832bc0e63ae31cd4aa37defd829e4c03</span><br><span class="line">[2024-06-26 18:05:27,934] [    INFO] - export_model_dir              :./checkpoint/model_best</span><br><span class="line">[2024-06-26 18:05:27,934] [    INFO] - model_name_or_path            :uie-base</span><br><span class="line">[2024-06-26 18:05:27,934] [    INFO] - multilingual                  :False</span><br><span class="line">[2024-06-26 18:05:27,934] [    INFO] - </span><br><span class="line">[2024-06-26 18:05:27,934] [    INFO] - ============================================================</span><br><span class="line">[2024-06-26 18:05:27,934] [    INFO] -       Data Configuration Arguments      </span><br><span class="line">[2024-06-26 18:05:27,934] [    INFO] - paddle commit id              :fbf852dd832bc0e63ae31cd4aa37defd829e4c03</span><br><span class="line">[2024-06-26 18:05:27,935] [    INFO] - dev_path                      :data/dev.txt</span><br><span class="line">[2024-06-26 18:05:27,935] [    INFO] - dynamic_max_length            :None</span><br><span class="line">[2024-06-26 18:05:27,935] [    INFO] - max_seq_length                :512</span><br><span class="line">[2024-06-26 18:05:27,935] [    INFO] - train_path                    :data/train.txt</span><br><span class="line">[2024-06-26 18:05:27,935] [    INFO] - </span><br><span class="line">[2024-06-26 18:05:27,935] [ WARNING] - Process rank: -1, device: gpu, world_size: 1, distributed training: False, 16-bits training: False</span><br><span class="line">[2024-06-26 18:05:27,935] [    INFO] - We are using (&lt;class 'paddlenlp.transformers.ernie.tokenizer.ErnieTokenizer'&gt;, False) to load 'uie-base'.</span><br><span class="line">[2024-06-26 18:05:27,936] [    INFO] - Already cached /root/.paddlenlp/models/uie-base/ernie_3.0_base_zh_vocab.txt</span><br><span class="line">[2024-06-26 18:05:27,968] [    INFO] - tokenizer config file saved in /root/.paddlenlp/models/uie-base/tokenizer_config.json</span><br><span class="line">[2024-06-26 18:05:27,969] [    INFO] - Special tokens file saved in /root/.paddlenlp/models/uie-base/special_tokens_map.json</span><br><span class="line">[2024-06-26 18:05:27,970] [    INFO] - Already cached /root/.paddlenlp/models/uie-base/model_state.pdparams</span><br><span class="line">[2024-06-26 18:05:27,970] [    INFO] - Loading weights file model_state.pdparams from cache at /root/.paddlenlp/models/uie-base/model_state.pdparams</span><br><span class="line">[2024-06-26 18:05:28,898] [    INFO] - Loaded weights file from disk, setting weights to model.</span><br><span class="line">W0626 18:05:29.062965 285242 gpu_resources.cc:119] Please NOTE: device: 1, GPU Compute Capability: 8.6, Driver API Version: 12.2, Runtime API Version: 12.0</span><br><span class="line">W0626 18:05:29.064332 285242 gpu_resources.cc:164] device: 1, cuDNN Version: 8.9.</span><br><span class="line">[2024-06-26 18:05:30,516] [    INFO] - All model checkpoint weights were used when initializing UIE.</span><br><span class="line"></span><br><span class="line">[2024-06-26 18:05:30,517] [    INFO] - All the weights of UIE were initialized from the model checkpoint at uie-base.</span><br><span class="line">If your task is similar to the task the model of the checkpoint was trained on, you can already use UIE for predictions without further training.</span><br><span class="line">[2024-06-26 18:05:30,562] [    INFO] - The global seed is set to 42, local seed is set to 43 and random seed is set to 42.</span><br><span class="line">[2024-06-26 18:05:30,655] [   DEBUG] - ============================================================</span><br><span class="line">[2024-06-26 18:05:30,655] [   DEBUG] -     Training Configuration Arguments    </span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - paddle commit id              : fbf852dd832bc0e63ae31cd4aa37defd829e4c03</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - paddlenlp commit id           : b39e701e21d11ff66ac3abfc81d384b6af8f8240</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - _no_sync_in_gradient_accumulation: True</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - activation_quantize_type      : None</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - adam_beta1                    : 0.9</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - adam_beta2                    : 0.999</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - adam_epsilon                  : 1e-08</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - algo_list                     : None</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - amp_custom_black_list         : None</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - amp_custom_white_list         : None</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - amp_master_grad               : False</span><br><span class="line">[2024-06-26 18:05:30,656] [   DEBUG] - batch_num_list                : None</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - batch_size_list               : None</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - bf16                          : False</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - bf16_full_eval                : False</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - bias_correction               : False</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - current_device                : gpu:1</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - data_parallel_rank            : 0</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - dataloader_drop_last          : False</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - dataloader_num_workers        : 0</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - dataset_rank                  : 0</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - dataset_world_size            : 1</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - device                        : gpu</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - disable_tqdm                  : True</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - distributed_dataloader        : False</span><br><span class="line">[2024-06-26 18:05:30,657] [   DEBUG] - do_compress                   : False</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - do_eval                       : True</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - do_export                     : True</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - do_predict                    : False</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - do_train                      : True</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - eval_accumulation_steps       : None</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - eval_batch_size               : 16</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - eval_steps                    : 100</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - evaluation_strategy           : IntervalStrategy.STEPS</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - flatten_param_grads           : False</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - force_reshard_pp              : False</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - fp16                          : False</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - fp16_full_eval                : False</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - fp16_opt_level                : O1</span><br><span class="line">[2024-06-26 18:05:30,658] [   DEBUG] - gradient_accumulation_steps   : 1</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - greater_is_better             : True</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - hybrid_parallel_topo_order    : None</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - ignore_data_skip              : False</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - ignore_load_lr_and_optim      : False</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - input_dtype                   : int64</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - input_infer_model_path        : None</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - label_names                   : ['start_positions', 'end_positions']</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - lazy_data_processing          : True</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - learning_rate                 : 1e-05</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - load_best_model_at_end        : True</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - load_sharded_model            : False</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - local_process_index           : 0</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - local_rank                    : -1</span><br><span class="line">[2024-06-26 18:05:30,659] [   DEBUG] - log_level                     : -1</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - log_level_replica             : -1</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - log_on_each_node              : True</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - logging_dir                   : ./checkpoint/model_best/runs/Jun26_18-05-27_jdz</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - logging_first_step            : False</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - logging_steps                 : 10</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - logging_strategy              : IntervalStrategy.STEPS</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - logical_process_index         : 0</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - lr_end                        : 1e-07</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - lr_scheduler_type             : SchedulerType.LINEAR</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - max_evaluate_steps            : -1</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - max_grad_norm                 : 1.0</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - max_steps                     : -1</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - metric_for_best_model         : eval_f1</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - minimum_eval_times            : None</span><br><span class="line">[2024-06-26 18:05:30,660] [   DEBUG] - moving_rate                   : 0.9</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - no_cuda                       : False</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - num_cycles                    : 0.5</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - num_train_epochs              : 100.0</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - onnx_format                   : True</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - optim                         : OptimizerNames.ADAMW</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - optimizer_name_suffix         : None</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - output_dir                    : ./checkpoint/model_best</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - overwrite_output_dir          : True</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - past_index                    : -1</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - per_device_eval_batch_size    : 16</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - per_device_train_batch_size   : 16</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - pipeline_parallel_config      : </span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - pipeline_parallel_degree      : -1</span><br><span class="line">[2024-06-26 18:05:30,661] [   DEBUG] - pipeline_parallel_rank        : 0</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - power                         : 1.0</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - prediction_loss_only          : False</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - process_index                 : 0</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - prune_embeddings              : False</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - recompute                     : False</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - remove_unused_columns         : True</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - report_to                     : ['visualdl']</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - resume_from_checkpoint        : None</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - round_type                    : round</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - run_name                      : ./checkpoint/model_best</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - save_on_each_node             : False</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - save_sharded_model            : False</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - save_steps                    : 100</span><br><span class="line">[2024-06-26 18:05:30,662] [   DEBUG] - save_strategy                 : IntervalStrategy.STEPS</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - save_total_limit              : 1</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - scale_loss                    : 32768</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - seed                          : 42</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - sep_parallel_degree           : -1</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - sharding                      : []</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - sharding_degree               : -1</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - sharding_parallel_config      : </span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - sharding_parallel_degree      : -1</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - sharding_parallel_rank        : 0</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - should_load_dataset           : True</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - should_load_sharding_stage1_model: False</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - should_log                    : True</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - should_save                   : True</span><br><span class="line">[2024-06-26 18:05:30,663] [   DEBUG] - should_save_model_state       : True</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - should_save_sharding_stage1_model: False</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - skip_memory_metrics           : True</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - skip_profile_timer            : True</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - strategy                      : dynabert+ptq</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - tensor_parallel_config        : </span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - tensor_parallel_degree        : -1</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - tensor_parallel_rank          : 0</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - to_static                     : False</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - train_batch_size              : 16</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - unified_checkpoint            : False</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - unified_checkpoint_config     : </span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - use_auto_parallel             : False</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - use_hybrid_parallel           : False</span><br><span class="line">[2024-06-26 18:05:30,664] [   DEBUG] - use_pact                      : True</span><br><span class="line">[2024-06-26 18:05:30,665] [   DEBUG] - warmup_ratio                  : 0.1</span><br><span class="line">[2024-06-26 18:05:30,665] [   DEBUG] - warmup_steps                  : 0</span><br><span class="line">[2024-06-26 18:05:30,665] [   DEBUG] - weight_decay                  : 0.0</span><br><span class="line">[2024-06-26 18:05:30,665] [   DEBUG] - weight_name_suffix            : None</span><br><span class="line">[2024-06-26 18:05:30,665] [   DEBUG] - weight_quantize_type          : channel_wise_abs_max</span><br><span class="line">[2024-06-26 18:05:30,665] [   DEBUG] - width_mult_list               : None</span><br><span class="line">[2024-06-26 18:05:30,665] [   DEBUG] - world_size                    : 1</span><br><span class="line">[2024-06-26 18:05:30,665] [   DEBUG] - </span><br><span class="line">[2024-06-26 18:05:30,666] [    INFO] - Starting training from resume_from_checkpoint : None</span><br><span class="line">/root/anaconda3/envs/py39_ppner_2_7_2/lib/python3.9/site-packages/paddle/distributed/parallel.py:410: UserWarning: The program will return to single-card operation. Please check 1, whether you use spawn or fleetrun to start the program. 2, Whether it is a multi-card program. 3, Is the current environment multi-card.</span><br><span class="line">  warnings.warn(</span><br><span class="line">[2024-06-26 18:05:30,667] [    INFO] - [timelog] checkpoint loading time: 0.00s (2024-06-26 18:05:30) </span><br><span class="line">[2024-06-26 18:05:30,667] [    INFO] - ***** Running training *****</span><br><span class="line">[2024-06-26 18:05:30,667] [    INFO] -   Num examples = 68</span><br><span class="line">[2024-06-26 18:05:30,667] [    INFO] -   Num Epochs = 100</span><br><span class="line">[2024-06-26 18:05:30,667] [    INFO] -   Instantaneous batch size per device = 16</span><br><span class="line">[2024-06-26 18:05:30,668] [    INFO] -   Total train batch size (w. parallel, distributed &amp; accumulation) = 16</span><br><span class="line">[2024-06-26 18:05:30,668] [    INFO] -   Gradient Accumulation steps = 1</span><br><span class="line">[2024-06-26 18:05:30,668] [    INFO] -   Total optimization steps = 500</span><br><span class="line">[2024-06-26 18:05:30,668] [    INFO] -   Total num train samples = 6,800</span><br><span class="line">[2024-06-26 18:05:30,670] [   DEBUG] -   Number of trainable parameters = 117,946,370 (per device)</span><br><span class="line">/root/anaconda3/envs/py39_ppner_2_7_2/lib/python3.9/site-packages/paddlenlp/transformers/tokenizer_utils_base.py:2538: FutureWarning: The `max_seq_len` argument is deprecated and will be removed in a future version, please use `max_length` instead.</span><br><span class="line">  warnings.warn(</span><br><span class="line">/root/anaconda3/envs/py39_ppner_2_7_2/lib/python3.9/site-packages/paddlenlp/transformers/tokenizer_utils_base.py:1938: FutureWarning: The `pad_to_max_length` argument is deprecated and will be removed in a future version, use `padding=True` or `padding='longest'` to pad to the longest sequence in the batch, or use `padding='max_length'` to pad to a max length. In this case, you can give a specific length with `max_length` (e.g. `max_length=45`) or leave max_length to None to pad to the maximal input size of the model (e.g. 512 for Bert).</span><br><span class="line">  warnings.warn(</span><br><span class="line">[2024-06-26 18:05:34,727] [    INFO] - loss: 0.00208795, learning_rate: 1e-05, global_step: 10, interval_runtime: 4.0565, interval_samples_per_second: 39.44293710564109, interval_steps_per_second: 2.4651835691025683, progress_or_epoch: 2.0</span><br><span class="line">[2024-06-26 18:05:37,278] [    INFO] - loss: 0.00129266, learning_rate: 1e-05, global_step: 20, interval_runtime: 2.55, interval_samples_per_second: 62.74611413497253, interval_steps_per_second: 3.921632133435783, progress_or_epoch: 4.0</span><br><span class="line">[2024-06-26 18:05:39,833] [    INFO] - loss: 0.00092623, learning_rate: 1e-05, global_step: 30, interval_runtime: 2.5559, interval_samples_per_second: 62.599374107598685, interval_steps_per_second: 3.912460881724918, progress_or_epoch: 6.0</span><br><span class="line">[2024-06-26 18:05:42,413] [    INFO] - loss: 0.00058895, learning_rate: 1e-05, global_step: 40, interval_runtime: 2.5801, interval_samples_per_second: 62.012657597381434, interval_steps_per_second: 3.8757910998363396, progress_or_epoch: 8.0</span><br><span class="line">[2024-06-26 18:05:44,946] [    INFO] - loss: 0.00047016, learning_rate: 1e-05, global_step: 50, interval_runtime: 2.5327, interval_samples_per_second: 63.17332385701746, interval_steps_per_second: 3.948332741063591, progress_or_epoch: 10.0</span><br><span class="line">[2024-06-26 18:05:47,514] [    INFO] - loss: 0.00031726, learning_rate: 1e-05, global_step: 60, interval_runtime: 2.5675, interval_samples_per_second: 62.316911606640005, interval_steps_per_second: 3.8948069754150003, progress_or_epoch: 12.0</span><br><span class="line">[2024-06-26 18:05:50,081] [    INFO] - loss: 0.00024869, learning_rate: 1e-05, global_step: 70, interval_runtime: 2.5673, interval_samples_per_second: 62.32305770213569, interval_steps_per_second: 3.8951911063834808, progress_or_epoch: 14.0</span><br><span class="line">[2024-06-26 18:05:52,658] [    INFO] - loss: 0.00041933, learning_rate: 1e-05, global_step: 80, interval_runtime: 2.5765, interval_samples_per_second: 62.10074334302723, interval_steps_per_second: 3.881296458939202, progress_or_epoch: 16.0</span><br><span class="line">[2024-06-26 18:05:55,223] [    INFO] - loss: 0.00017784, learning_rate: 1e-05, global_step: 90, interval_runtime: 2.5647, interval_samples_per_second: 62.38556549647052, interval_steps_per_second: 3.8990978435294075, progress_or_epoch: 18.0</span><br><span class="line">[2024-06-26 18:05:57,816] [    INFO] - loss: 0.00019145, learning_rate: 1e-05, global_step: 100, interval_runtime: 2.5931, interval_samples_per_second: 61.70326891265709, interval_steps_per_second: 3.856454307041068, progress_or_epoch: 20.0</span><br><span class="line">[2024-06-26 18:05:57,817] [    INFO] - ***** Running Evaluation *****</span><br><span class="line">[2024-06-26 18:05:57,817] [    INFO] -   Num examples = 4</span><br><span class="line">[2024-06-26 18:05:57,817] [    INFO] -   Total prediction steps = 1</span><br><span class="line">[2024-06-26 18:05:57,817] [    INFO] -   Pre device batch size = 16</span><br><span class="line">[2024-06-26 18:05:57,818] [    INFO] -   Total Batch size = 16</span><br><span class="line">[2024-06-26 18:05:57,889] [    INFO] - eval_loss: 0.005224619060754776, eval_precision: 0.4, eval_recall: 0.4, eval_f1: 0.4000000000000001, eval_runtime: 0.0705, eval_samples_per_second: 56.74937846074747, eval_steps_per_second: 14.187344615186868, progress_or_epoch: 20.0</span><br><span class="line">[2024-06-26 18:05:57,889] [    INFO] - Saving model checkpoint to ./checkpoint/model_best/checkpoint-100</span><br><span class="line">[2024-06-26 18:05:57,890] [    INFO] - tokenizer config file saved in ./checkpoint/model_best/checkpoint-100/tokenizer_config.json</span><br><span class="line">[2024-06-26 18:05:57,890] [    INFO] - Special tokens file saved in ./checkpoint/model_best/checkpoint-100/special_tokens_map.json</span><br><span class="line">[2024-06-26 18:05:57,902] [    INFO] - Configuration saved in ./checkpoint/model_best/checkpoint-100/config.json</span><br><span class="line">[2024-06-26 18:06:00,646] [    INFO] - Model weights saved in ./checkpoint/model_best/checkpoint-100/model_state.pdparams</span><br><span class="line">[2024-06-26 18:06:00,648] [    INFO] - Saving optimizer files.</span><br><span class="line">[2024-06-26 18:06:07,375] [    INFO] - [timelog] checkpoint saving time: 9.48s (2024-06-26 18:06:07) </span><br><span class="line">[2024-06-26 18:06:09,924] [    INFO] - loss: 0.00022237, learning_rate: 1e-05, global_step: 110, interval_runtime: 12.1083, interval_samples_per_second: 13.21409688201894, interval_steps_per_second: 0.8258810551261837, progress_or_epoch: 22.0</span><br><span class="line">[2024-06-26 18:06:12,478] [    INFO] - loss: 0.00017666, learning_rate: 1e-05, global_step: 120, interval_runtime: 2.5542, interval_samples_per_second: 62.64218200480218, interval_steps_per_second: 3.9151363753001363, progress_or_epoch: 24.0</span><br><span class="line">[2024-06-26 18:06:15,065] [    INFO] - loss: 0.00024367, learning_rate: 1e-05, global_step: 130, interval_runtime: 2.587, interval_samples_per_second: 61.84880269252828, interval_steps_per_second: 3.8655501682830176, progress_or_epoch: 26.0</span><br><span class="line">[2024-06-26 18:06:17,695] [    INFO] - loss: 0.0001915, learning_rate: 1e-05, global_step: 140, interval_runtime: 2.6297, interval_samples_per_second: 60.84334418667863, interval_steps_per_second: 3.8027090116674143, progress_or_epoch: 28.0</span><br><span class="line">[2024-06-26 18:06:20,298] [    INFO] - loss: 0.00017253, learning_rate: 1e-05, global_step: 150, interval_runtime: 2.5998, interval_samples_per_second: 61.542086843031, interval_steps_per_second: 3.8463804276894376, progress_or_epoch: 30.0</span><br><span class="line">[2024-06-26 18:06:22,895] [    INFO] - loss: 0.00014841, learning_rate: 1e-05, global_step: 160, interval_runtime: 2.6008, interval_samples_per_second: 61.51999965531349, interval_steps_per_second: 3.844999978457093, progress_or_epoch: 32.0</span><br><span class="line">[2024-06-26 18:06:25,498] [    INFO] - loss: 0.00012293, learning_rate: 1e-05, global_step: 170, interval_runtime: 2.6024, interval_samples_per_second: 61.48274409158785, interval_steps_per_second: 3.8426715057242404, progress_or_epoch: 34.0</span><br><span class="line">[2024-06-26 18:06:28,099] [    INFO] - loss: 0.00010312, learning_rate: 1e-05, global_step: 180, interval_runtime: 2.601, interval_samples_per_second: 61.514997685471634, interval_steps_per_second: 3.844687355341977, progress_or_epoch: 36.0</span><br><span class="line">[2024-06-26 18:06:30,698] [    INFO] - loss: 9.851e-05, learning_rate: 1e-05, global_step: 190, interval_runtime: 2.5992, interval_samples_per_second: 61.5571084161852, interval_steps_per_second: 3.847319276011575, progress_or_epoch: 38.0</span><br><span class="line">[2024-06-26 18:06:33,295] [    INFO] - loss: 0.00013552, learning_rate: 1e-05, global_step: 200, interval_runtime: 2.5971, interval_samples_per_second: 61.60644154857953, interval_steps_per_second: 3.8504025967862208, progress_or_epoch: 40.0</span><br><span class="line">[2024-06-26 18:06:33,295] [    INFO] - ***** Running Evaluation *****</span><br><span class="line">[2024-06-26 18:06:33,295] [    INFO] -   Num examples = 4</span><br><span class="line">[2024-06-26 18:06:33,295] [    INFO] -   Total prediction steps = 1</span><br><span class="line">[2024-06-26 18:06:33,295] [    INFO] -   Pre device batch size = 16</span><br><span class="line">[2024-06-26 18:06:33,295] [    INFO] -   Total Batch size = 16</span><br><span class="line">[2024-06-26 18:06:33,358] [    INFO] - eval_loss: 0.006688571535050869, eval_precision: 0.4, eval_recall: 0.4, eval_f1: 0.4000000000000001, eval_runtime: 0.0621, eval_samples_per_second: 64.41700614712398, eval_steps_per_second: 16.104251536780996, progress_or_epoch: 40.0</span><br><span class="line">[2024-06-26 18:06:33,359] [    INFO] - Saving model checkpoint to ./checkpoint/model_best/checkpoint-200</span><br><span class="line">[2024-06-26 18:06:33,360] [    INFO] - tokenizer config file saved in ./checkpoint/model_best/checkpoint-200/tokenizer_config.json</span><br><span class="line">[2024-06-26 18:06:33,360] [    INFO] - Special tokens file saved in ./checkpoint/model_best/checkpoint-200/special_tokens_map.json</span><br><span class="line">[2024-06-26 18:06:33,370] [    INFO] - Configuration saved in ./checkpoint/model_best/checkpoint-200/config.json</span><br><span class="line">[2024-06-26 18:06:34,574] [    INFO] - Model weights saved in ./checkpoint/model_best/checkpoint-200/model_state.pdparams</span><br><span class="line">[2024-06-26 18:06:34,574] [    INFO] - Saving optimizer files.</span><br><span class="line">[2024-06-26 18:06:39,080] [    INFO] - [timelog] checkpoint saving time: 5.72s (2024-06-26 18:06:39) </span><br><span class="line">[2024-06-26 18:06:41,672] [    INFO] - loss: 0.00011128, learning_rate: 1e-05, global_step: 210, interval_runtime: 8.3772, interval_samples_per_second: 19.099448736351285, interval_steps_per_second: 1.1937155460219553, progress_or_epoch: 42.0</span><br><span class="line">[2024-06-26 18:06:44,288] [    INFO] - loss: 0.00011245, learning_rate: 1e-05, global_step: 220, interval_runtime: 2.6149, interval_samples_per_second: 61.18868160731556, interval_steps_per_second: 3.8242926004572224, progress_or_epoch: 44.0</span><br><span class="line">[2024-06-26 18:06:46,911] [    INFO] - loss: 0.00012268, learning_rate: 1e-05, global_step: 230, interval_runtime: 2.6234, interval_samples_per_second: 60.98920142963071, interval_steps_per_second: 3.8118250893519194, progress_or_epoch: 46.0</span><br><span class="line">[2024-06-26 18:06:49,537] [    INFO] - loss: 0.00013804, learning_rate: 1e-05, global_step: 240, interval_runtime: 2.6259, interval_samples_per_second: 60.93070388366043, interval_steps_per_second: 3.8081689927287767, progress_or_epoch: 48.0</span><br><span class="line">[2024-06-26 18:06:52,117] [    INFO] - loss: 0.00020081, learning_rate: 1e-05, global_step: 250, interval_runtime: 2.5809, interval_samples_per_second: 61.99492724918558, interval_steps_per_second: 3.8746829530740987, progress_or_epoch: 50.0</span><br><span class="line">[2024-06-26 18:06:54,753] [    INFO] - loss: 0.00014258, learning_rate: 1e-05, global_step: 260, interval_runtime: 2.6358, interval_samples_per_second: 60.702937625070206, interval_steps_per_second: 3.793933601566888, progress_or_epoch: 52.0</span><br><span class="line">[2024-06-26 18:06:57,369] [    INFO] - loss: 0.00012738, learning_rate: 1e-05, global_step: 270, interval_runtime: 2.6164, interval_samples_per_second: 61.153369707036596, interval_steps_per_second: 3.8220856066897873, progress_or_epoch: 54.0</span><br><span class="line">[2024-06-26 18:07:00,006] [    INFO] - loss: 0.00010497, learning_rate: 1e-05, global_step: 280, interval_runtime: 2.6373, interval_samples_per_second: 60.669083466377856, interval_steps_per_second: 3.791817716648616, progress_or_epoch: 56.0</span><br><span class="line">[2024-06-26 18:07:02,657] [    INFO] - loss: 0.00010167, learning_rate: 1e-05, global_step: 290, interval_runtime: 2.6499, interval_samples_per_second: 60.38069724825452, interval_steps_per_second: 3.7737935780159075, progress_or_epoch: 58.0</span><br><span class="line">[2024-06-26 18:07:05,297] [    INFO] - loss: 0.000171, learning_rate: 1e-05, global_step: 300, interval_runtime: 2.6399, interval_samples_per_second: 60.60732256501828, interval_steps_per_second: 3.7879576603136424, progress_or_epoch: 60.0</span><br><span class="line">[2024-06-26 18:07:05,298] [    INFO] - ***** Running Evaluation *****</span><br><span class="line">[2024-06-26 18:07:05,298] [    INFO] -   Num examples = 4</span><br><span class="line">[2024-06-26 18:07:05,298] [    INFO] -   Total prediction steps = 1</span><br><span class="line">[2024-06-26 18:07:05,298] [    INFO] -   Pre device batch size = 16</span><br><span class="line">[2024-06-26 18:07:05,298] [    INFO] -   Total Batch size = 16</span><br><span class="line">[2024-06-26 18:07:05,357] [    INFO] - eval_loss: 0.007026550825685263, eval_precision: 0.4, eval_recall: 0.4, eval_f1: 0.4000000000000001, eval_runtime: 0.0582, eval_samples_per_second: 68.67042956838507, eval_steps_per_second: 17.16760739209627, progress_or_epoch: 60.0</span><br><span class="line">[2024-06-26 18:07:05,358] [    INFO] - Saving model checkpoint to ./checkpoint/model_best/checkpoint-300</span><br><span class="line">[2024-06-26 18:07:05,358] [    INFO] - tokenizer config file saved in ./checkpoint/model_best/checkpoint-300/tokenizer_config.json</span><br><span class="line">[2024-06-26 18:07:05,358] [    INFO] - Special tokens file saved in ./checkpoint/model_best/checkpoint-300/special_tokens_map.json</span><br><span class="line">[2024-06-26 18:07:05,364] [    INFO] - Configuration saved in ./checkpoint/model_best/checkpoint-300/config.json</span><br><span class="line">[2024-06-26 18:07:07,995] [    INFO] - Model weights saved in ./checkpoint/model_best/checkpoint-300/model_state.pdparams</span><br><span class="line">[2024-06-26 18:07:07,996] [    INFO] - Saving optimizer files.</span><br><span class="line">[2024-06-26 18:07:11,005] [    INFO] - [timelog] checkpoint saving time: 5.64s (2024-06-26 18:07:11) </span><br><span class="line">[2024-06-26 18:07:13,640] [    INFO] - loss: 9.265e-05, learning_rate: 1e-05, global_step: 310, interval_runtime: 8.3438, interval_samples_per_second: 19.17600366118997, interval_steps_per_second: 1.1985002288243731, progress_or_epoch: 62.0</span><br><span class="line">[2024-06-26 18:07:16,285] [    INFO] - loss: 0.00012613, learning_rate: 1e-05, global_step: 320, interval_runtime: 2.6441, interval_samples_per_second: 60.512013700058034, interval_steps_per_second: 3.782000856253627, progress_or_epoch: 64.0</span><br><span class="line">[2024-06-26 18:07:18,887] [    INFO] - loss: 7.656e-05, learning_rate: 1e-05, global_step: 330, interval_runtime: 2.603, interval_samples_per_second: 61.4676855948393, interval_steps_per_second: 3.8417303496774564, progress_or_epoch: 66.0</span><br><span class="line">[2024-06-26 18:07:21,539] [    INFO] - loss: 9.599e-05, learning_rate: 1e-05, global_step: 340, interval_runtime: 2.6517, interval_samples_per_second: 60.33811856609532, interval_steps_per_second: 3.7711324103809574, progress_or_epoch: 68.0</span><br><span class="line">[2024-06-26 18:07:24,185] [    INFO] - loss: 9.96e-05, learning_rate: 1e-05, global_step: 350, interval_runtime: 2.6462, interval_samples_per_second: 60.463986738962795, interval_steps_per_second: 3.7789991711851747, progress_or_epoch: 70.0</span><br><span class="line">[2024-06-26 18:07:26,830] [    INFO] - loss: 9.502e-05, learning_rate: 1e-05, global_step: 360, interval_runtime: 2.6438, interval_samples_per_second: 60.51813635974227, interval_steps_per_second: 3.782383522483892, progress_or_epoch: 72.0</span><br><span class="line">[2024-06-26 18:07:29,486] [    INFO] - loss: 8.396e-05, learning_rate: 1e-05, global_step: 370, interval_runtime: 2.6568, interval_samples_per_second: 60.22368303445632, interval_steps_per_second: 3.76398018965352, progress_or_epoch: 74.0</span><br><span class="line">[2024-06-26 18:07:32,128] [    INFO] - loss: 0.000107, learning_rate: 1e-05, global_step: 380, interval_runtime: 2.6414, interval_samples_per_second: 60.57406701856363, interval_steps_per_second: 3.785879188660227, progress_or_epoch: 76.0</span><br><span class="line">[2024-06-26 18:07:34,774] [    INFO] - loss: 0.00015859, learning_rate: 1e-05, global_step: 390, interval_runtime: 2.646, interval_samples_per_second: 60.46891186644317, interval_steps_per_second: 3.7793069916526982, progress_or_epoch: 78.0</span><br><span class="line">[2024-06-26 18:07:37,422] [    INFO] - loss: 8.44e-05, learning_rate: 1e-05, global_step: 400, interval_runtime: 2.6486, interval_samples_per_second: 60.40979254722639, interval_steps_per_second: 3.7756120342016493, progress_or_epoch: 80.0</span><br><span class="line">[2024-06-26 18:07:37,423] [    INFO] - ***** Running Evaluation *****</span><br><span class="line">[2024-06-26 18:07:37,423] [    INFO] -   Num examples = 4</span><br><span class="line">[2024-06-26 18:07:37,423] [    INFO] -   Total prediction steps = 1</span><br><span class="line">[2024-06-26 18:07:37,423] [    INFO] -   Pre device batch size = 16</span><br><span class="line">[2024-06-26 18:07:37,423] [    INFO] -   Total Batch size = 16</span><br><span class="line">[2024-06-26 18:07:37,482] [    INFO] - eval_loss: 0.00755023630335927, eval_precision: 0.4, eval_recall: 0.4, eval_f1: 0.4000000000000001, eval_runtime: 0.0578, eval_samples_per_second: 69.19010227647641, eval_steps_per_second: 17.297525569119102, progress_or_epoch: 80.0</span><br><span class="line">[2024-06-26 18:07:37,482] [    INFO] - Saving model checkpoint to ./checkpoint/model_best/checkpoint-400</span><br><span class="line">[2024-06-26 18:07:37,483] [    INFO] - tokenizer config file saved in ./checkpoint/model_best/checkpoint-400/tokenizer_config.json</span><br><span class="line">[2024-06-26 18:07:37,483] [    INFO] - Special tokens file saved in ./checkpoint/model_best/checkpoint-400/special_tokens_map.json</span><br><span class="line">[2024-06-26 18:07:37,489] [    INFO] - Configuration saved in ./checkpoint/model_best/checkpoint-400/config.json</span><br><span class="line">[2024-06-26 18:07:38,671] [    INFO] - Model weights saved in ./checkpoint/model_best/checkpoint-400/model_state.pdparams</span><br><span class="line">[2024-06-26 18:07:38,671] [    INFO] - Saving optimizer files.</span><br><span class="line">[2024-06-26 18:07:41,730] [    INFO] - [timelog] checkpoint saving time: 4.24s (2024-06-26 18:07:41) </span><br><span class="line">[2024-06-26 18:07:44,394] [    INFO] - loss: 8.615e-05, learning_rate: 1e-05, global_step: 410, interval_runtime: 6.9719, interval_samples_per_second: 22.949178353528108, interval_steps_per_second: 1.4343236470955067, progress_or_epoch: 82.0</span><br><span class="line">[2024-06-26 18:07:47,030] [    INFO] - loss: 8.146e-05, learning_rate: 1e-05, global_step: 420, interval_runtime: 2.6363, interval_samples_per_second: 60.691782269542095, interval_steps_per_second: 3.793236391846381, progress_or_epoch: 84.0</span><br><span class="line">[2024-06-26 18:07:49,660] [    INFO] - loss: 0.0001024, learning_rate: 1e-05, global_step: 430, interval_runtime: 2.6297, interval_samples_per_second: 60.84334970295866, interval_steps_per_second: 3.8027093564349164, progress_or_epoch: 86.0</span><br><span class="line">[2024-06-26 18:07:52,296] [    INFO] - loss: 0.00011797, learning_rate: 1e-05, global_step: 440, interval_runtime: 2.6357, interval_samples_per_second: 60.70518895680559, interval_steps_per_second: 3.7940743098003495, progress_or_epoch: 88.0</span><br><span class="line">[2024-06-26 18:07:54,939] [    INFO] - loss: 0.00014716, learning_rate: 1e-05, global_step: 450, interval_runtime: 2.6435, interval_samples_per_second: 60.52505176192572, interval_steps_per_second: 3.7828157351203573, progress_or_epoch: 90.0</span><br><span class="line">[2024-06-26 18:07:57,583] [    INFO] - loss: 7.592e-05, learning_rate: 1e-05, global_step: 460, interval_runtime: 2.6437, interval_samples_per_second: 60.520177521644605, interval_steps_per_second: 3.782511095102788, progress_or_epoch: 92.0</span><br><span class="line">[2024-06-26 18:08:00,303] [    INFO] - loss: 8.616e-05, learning_rate: 1e-05, global_step: 470, interval_runtime: 2.7201, interval_samples_per_second: 58.82132721602211, interval_steps_per_second: 3.676332951001382, progress_or_epoch: 94.0</span><br><span class="line">[2024-06-26 18:08:02,968] [    INFO] - loss: 7.984e-05, learning_rate: 1e-05, global_step: 480, interval_runtime: 2.6645, interval_samples_per_second: 60.048504909189305, interval_steps_per_second: 3.7530315568243315, progress_or_epoch: 96.0</span><br><span class="line">[2024-06-26 18:08:05,618] [    INFO] - loss: 7.743e-05, learning_rate: 1e-05, global_step: 490, interval_runtime: 2.6507, interval_samples_per_second: 60.3610372488141, interval_steps_per_second: 3.7725648280508812, progress_or_epoch: 98.0</span><br><span class="line">[2024-06-26 18:08:08,285] [    INFO] - loss: 7.793e-05, learning_rate: 1e-05, global_step: 500, interval_runtime: 2.6661, interval_samples_per_second: 60.01194714924565, interval_steps_per_second: 3.750746696827853, progress_or_epoch: 100.0</span><br><span class="line">[2024-06-26 18:08:08,285] [    INFO] - ***** Running Evaluation *****</span><br><span class="line">[2024-06-26 18:08:08,285] [    INFO] -   Num examples = 4</span><br><span class="line">[2024-06-26 18:08:08,286] [    INFO] -   Total prediction steps = 1</span><br><span class="line">[2024-06-26 18:08:08,286] [    INFO] -   Pre device batch size = 16</span><br><span class="line">[2024-06-26 18:08:08,286] [    INFO] -   Total Batch size = 16</span><br><span class="line">[2024-06-26 18:08:08,344] [    INFO] - eval_loss: 0.007735834456980228, eval_precision: 0.4, eval_recall: 0.4, eval_f1: 0.4000000000000001, eval_runtime: 0.0574, eval_samples_per_second: 69.71943866123114, eval_steps_per_second: 17.429859665307784, progress_or_epoch: 100.0</span><br><span class="line">[2024-06-26 18:08:08,344] [    INFO] - Saving model checkpoint to ./checkpoint/model_best/checkpoint-500</span><br><span class="line">[2024-06-26 18:08:08,345] [    INFO] - tokenizer config file saved in ./checkpoint/model_best/checkpoint-500/tokenizer_config.json</span><br><span class="line">[2024-06-26 18:08:08,345] [    INFO] - Special tokens file saved in ./checkpoint/model_best/checkpoint-500/special_tokens_map.json</span><br><span class="line">[2024-06-26 18:08:08,351] [    INFO] - Configuration saved in ./checkpoint/model_best/checkpoint-500/config.json</span><br><span class="line">[2024-06-26 18:08:09,518] [    INFO] - Model weights saved in ./checkpoint/model_best/checkpoint-500/model_state.pdparams</span><br><span class="line">[2024-06-26 18:08:09,518] [    INFO] - Saving optimizer files.</span><br><span class="line">[2024-06-26 18:08:11,773] [    INFO] - [timelog] checkpoint saving time: 3.42s (2024-06-26 18:08:11) </span><br><span class="line">[2024-06-26 18:08:11,774] [    INFO] - </span><br><span class="line">Training completed. </span><br><span class="line"></span><br><span class="line">[2024-06-26 18:08:11,774] [    INFO] - Loading best model from ./checkpoint/model_best/checkpoint-100 (score: 0.4000000000000001).</span><br><span class="line">[2024-06-26 18:08:12,116] [    INFO] - set state-dict :([], [])</span><br><span class="line">[2024-06-26 18:08:12,118] [    INFO] - train_runtime: 161.4472, train_samples_per_second: 42.1190341985795, train_steps_per_second: 3.0969878087190805, train_loss: 0.00023241847997996956, progress_or_epoch: 100.0</span><br><span class="line">[2024-06-26 18:08:12,134] [    INFO] - Saving model checkpoint to ./checkpoint/model_best</span><br><span class="line">[2024-06-26 18:08:12,135] [    INFO] - tokenizer config file saved in ./checkpoint/model_best/tokenizer_config.json</span><br><span class="line">[2024-06-26 18:08:12,135] [    INFO] - Special tokens file saved in ./checkpoint/model_best/special_tokens_map.json</span><br><span class="line">[2024-06-26 18:08:12,142] [    INFO] - Configuration saved in ./checkpoint/model_best/config.json</span><br><span class="line">[2024-06-26 18:08:13,814] [    INFO] - Model weights saved in ./checkpoint/model_best/model_state.pdparams</span><br><span class="line">[2024-06-26 18:08:13,815] [    INFO] - ***** train metrics *****</span><br><span class="line">[2024-06-26 18:08:13,815] [    INFO] -   progress_or_epoch        =      100.0</span><br><span class="line">[2024-06-26 18:08:13,815] [    INFO] -   train_loss               =     0.0002</span><br><span class="line">[2024-06-26 18:08:13,815] [    INFO] -   train_runtime            = 0:02:41.44</span><br><span class="line">[2024-06-26 18:08:13,815] [    INFO] -   train_samples_per_second =     42.119</span><br><span class="line">[2024-06-26 18:08:13,815] [    INFO] -   train_steps_per_second   =      3.097</span><br><span class="line">[2024-06-26 18:08:13,820] [    INFO] - ***** Running Evaluation *****</span><br><span class="line">[2024-06-26 18:08:13,820] [    INFO] -   Num examples = 4</span><br><span class="line">[2024-06-26 18:08:13,820] [    INFO] -   Total prediction steps = 1</span><br><span class="line">[2024-06-26 18:08:13,820] [    INFO] -   Pre device batch size = 16</span><br><span class="line">[2024-06-26 18:08:13,820] [    INFO] -   Total Batch size = 16</span><br><span class="line">[2024-06-26 18:08:13,888] [    INFO] - eval_loss: 0.005224619060754776, eval_precision: 0.4, eval_recall: 0.4, eval_f1: 0.4000000000000001, eval_runtime: 0.0687, eval_samples_per_second: 58.19804494272889, eval_steps_per_second: 14.549511235682223, progress_or_epoch: 100.0</span><br><span class="line">[2024-06-26 18:08:13,889] [    INFO] - ***** eval metrics *****</span><br><span class="line">[2024-06-26 18:08:13,889] [    INFO] -   eval_f1                 =        0.4</span><br><span class="line">[2024-06-26 18:08:13,889] [    INFO] -   eval_loss               =     0.0052</span><br><span class="line">[2024-06-26 18:08:13,889] [    INFO] -   eval_precision          =        0.4</span><br><span class="line">[2024-06-26 18:08:13,889] [    INFO] -   eval_recall             =        0.4</span><br><span class="line">[2024-06-26 18:08:13,889] [    INFO] -   eval_runtime            = 0:00:00.06</span><br><span class="line">[2024-06-26 18:08:13,890] [    INFO] -   eval_samples_per_second =     58.198</span><br><span class="line">[2024-06-26 18:08:13,890] [    INFO] -   eval_steps_per_second   =    14.5495</span><br><span class="line">[2024-06-26 18:08:13,890] [    INFO] -   progress_or_epoch       =      100.0</span><br><span class="line">/root/anaconda3/envs/py39_ppner_2_7_2/lib/python3.9/site-packages/paddle/jit/dy2static/program_translator.py:712: UserWarning: full_graph=False don't support input_spec arguments. It will not produce any effect.</span><br><span class="line">You can set full_graph=True, then you can assign input spec.</span><br><span class="line"></span><br><span class="line">  warnings.warn(</span><br><span class="line">[2024-06-26 18:08:13,895] [    INFO] - Exporting inference model to ./checkpoint/model_best/model</span><br><span class="line">I0626 18:08:15.824677 285242 program_interpreter.cc:212] New Executor is Running.</span><br><span class="line">[2024-06-26 18:08:18,295] [    INFO] - Inference model exported.</span><br><span class="line">[2024-06-26 18:08:18,297] [    INFO] - tokenizer config file saved in ./checkpoint/model_best/tokenizer_config.json</span><br><span class="line">[2024-06-26 18:08:18,297] [    INFO] - Special tokens file saved in ./checkpoint/model_best/special_tokens_map.json</span><br><span class="line">LAUNCH INFO 2024-06-26 18:08:20,044 Pod completed</span><br><span class="line">LAUNCH INFO 2024-06-26 18:08:20,045 Exit code 0</span><br></pre></td></tr></table></figure><p>模型文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(py39_ppner_2_7_2) [root@jdz uie]# ll checkpoint/model_best/</span><br><span class="line">total 919580</span><br><span class="line">-rw-r--r-- 1 root root       207 Jun 26 18:08 all_results.json</span><br><span class="line">drwxr-xr-x 2 root root       251 Jun 26 18:06 checkpoint-100</span><br><span class="line">drwxr-xr-x 2 root root       251 Jun 26 18:06 checkpoint-200</span><br><span class="line">drwxr-xr-x 2 root root       251 Jun 26 18:07 checkpoint-300</span><br><span class="line">drwxr-xr-x 2 root root       251 Jun 26 18:07 checkpoint-400</span><br><span class="line">drwxr-xr-x 2 root root       251 Jun 26 18:08 checkpoint-500</span><br><span class="line">-rw-r--r-- 1 root root       559 Jun 26 18:08 config.json</span><br><span class="line">-rw-r--r-- 1 root root 469428391 Jun 26 18:08 model.pdiparams</span><br><span class="line">-rw-r--r-- 1 root root     17581 Jun 26 18:08 model.pdiparams.info</span><br><span class="line">-rw-r--r-- 1 root root    153135 Jun 26 18:08 model.pdmodel</span><br><span class="line">-rw-r--r-- 1 root root 471806543 Jun 26 18:12 model_state.pdparams</span><br><span class="line">drwxr-xr-x 7 root root       136 Jun 26 18:05 runs</span><br><span class="line">-rw-r--r-- 1 root root       112 Jun 26 18:08 special_tokens_map.json</span><br><span class="line">drwxr-xr-x 2 root root        90 Jun 26 18:12 static</span><br><span class="line">-rw-r--r-- 1 root root       197 Jun 26 18:08 tokenizer_config.json</span><br><span class="line">-rw-r--r-- 1 root root     16736 Jun 26 18:08 trainer_state.json</span><br><span class="line">-rw-r--r-- 1 root root      2598 Jun 26 18:08 training_args.bin</span><br><span class="line">-rw-r--r-- 1 root root       207 Jun 26 18:08 train_results.json</span><br><span class="line">-rw-r--r-- 1 root root    186807 Jun 26 18:08 vocab.txt</span><br><span class="line">(py39_ppner_2_7_2) [root@jdz uie]#</span><br></pre></td></tr></table></figure><p>调用api测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line">schema = [&#123;<span class="string">'工程'</span>: [<span class="string">'工艺'</span>]&#125;]</span><br><span class="line"></span><br><span class="line">ie = Taskflow(<span class="string">'information_extraction'</span>, schema=schema, task_path=<span class="string">'./checkpoint/model_best'</span>)</span><br><span class="line"></span><br><span class="line">ie.set_schema(schema) <span class="comment"># Reset schema</span></span><br><span class="line">pprint(ie(<span class="string">"""受力钢筋的接头形式应按设计要求采用,若设计无要求时,钢筋宜采用焊接接头和机械连接接头,也可采用绑扎接头。"""</span>))</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&#123;'工程': [&#123;'end': 9,</span><br><span class="line">          'probability': 0.9548929987860788,</span><br><span class="line">          'relations': &#123;'工艺': [&#123;'end': 42,</span><br><span class="line">                                'probability': 0.2548182944884658,</span><br><span class="line">                                'start': 36,</span><br><span class="line">                                'text': '机械连接接头'&#125;]&#125;,</span><br><span class="line">          'start': 0,</span><br><span class="line">          'text': '受力钢筋的接头形式'&#125;]&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Doccano是一种用于文本标注的开源工具，旨在简化和加速标注任务的进行。它提供了一个直观的用户界面，使标注人员能够轻松地对文本数据进行标注，并创建高质量的训练数据集用于机器学习和自然语言处理任务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/06/28/doccano/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://github.com/doccano/doccano&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/doccano/doccano&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、安装部署&quot;&gt;&lt;a href=&quot;#一、安装部署&quot; class=&quot;headerlink&quot; title=&quot;一、安装部署&quot;&gt;&lt;/a&gt;一、安装部署&lt;/h2&gt;&lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;操作系统&lt;/font&gt;：Centos7.9&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;python&lt;/font&gt;：3.10&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;doccano&lt;/font&gt;：1.6.2&lt;/p&gt;
&lt;h3 id=&quot;pip安装&quot;&gt;&lt;a href=&quot;#pip安装&quot; class=&quot;headerlink&quot; title=&quot;pip安装&quot;&gt;&lt;/a&gt;pip安装&lt;/h3&gt;&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;注&lt;/font&gt;：百度源没有相应安装包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install doccano==1.6.2 -i https://pypi.tuna.tsinghua.edu.cn/simple&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;p&gt;&lt;code&gt;doccano init&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;设置超级管理员账号密码&quot;&gt;&lt;a href=&quot;#设置超级管理员账号密码&quot; class=&quot;headerlink&quot; title=&quot;设置超级管理员账号密码&quot;&gt;&lt;/a&gt;设置超级管理员账号密码&lt;/h3&gt;&lt;p&gt;&lt;code&gt;doccano createuser --username admin --password 123456&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;启动服务&quot;&gt;&lt;a href=&quot;#启动服务&quot; class=&quot;headerlink&quot; title=&quot;启动服务&quot;&gt;&lt;/a&gt;启动服务&lt;/h3&gt;&lt;p&gt;&lt;code&gt;doccano webserver --port 8000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/06/28/doccano/2.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/06/28/doccano/3.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="http://yoursite.com/categories/深度学习/"/>
    
    
    <category term="doccano" scheme="http://yoursite.com/tags/doccano/"/>
    
    <category term="paddle" scheme="http://yoursite.com/tags/paddle/"/>
    
    <category term="ERNIE-UIE" scheme="http://yoursite.com/tags/ERNIE-UIE/"/>
    
  </entry>
  
  <entry>
    <title>yolov8-seg：皮带机偏移实时检测</title>
    <link href="http://yoursite.com/2024/05/11/yolov8-seg%EF%BC%9A%E7%9A%AE%E5%B8%A6%E6%9C%BA%E5%81%8F%E7%A7%BB%E5%AE%9E%E6%97%B6%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2024/05/11/yolov8-seg%EF%BC%9A%E7%9A%AE%E5%B8%A6%E6%9C%BA%E5%81%8F%E7%A7%BB%E5%AE%9E%E6%97%B6%E6%A3%80%E6%B5%8B/</id>
    <published>2024-05-11T01:58:37.000Z</published>
    <updated>2024-06-28T08:16:23.152Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="环境-amp-安装"><a href="#环境-amp-安装" class="headerlink" title="环境&amp;安装"></a>环境&amp;安装</h2><p>同上文yolov8：火灾检测</p><p>模型使用<code>yolov8n-seg</code></p><h2 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h2><h3 id="标注工具：labelme"><a href="#标注工具：labelme" class="headerlink" title="标注工具：labelme"></a>标注工具：labelme</h3><p>对分割目标进行多边矩形标注</p><p><img src="/2024/05/11/yolov8-seg：皮带机偏移实时检测/1.png" alt></p><p><img src="/2024/05/11/yolov8-seg：皮带机偏移实时检测/2.png" alt></p><a id="more"></a><h3 id="数据格式转换"><a href="#数据格式转换" class="headerlink" title="数据格式转换"></a>数据格式转换</h3><p>将labelme多边矩形数据格式转为yolo-seg数据格式，通用转换代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_labelme_to_yolo</span><span class="params">(json_file, output_txt_file, label_to_class_id)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(json_file, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        data = json.load(file)</span><br><span class="line"></span><br><span class="line">    image_width = data[<span class="string">'imageWidth'</span>]</span><br><span class="line">    image_height = data[<span class="string">'imageHeight'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(output_txt_file, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> shape <span class="keyword">in</span> data[<span class="string">'shapes'</span>]:</span><br><span class="line">            points = shape[<span class="string">'points'</span>]</span><br><span class="line">            class_id = label_to_class_id.get(shape[<span class="string">'label'</span>], <span class="number">-1</span>)</span><br><span class="line">            normalized_points = []</span><br><span class="line">            <span class="keyword">for</span> x, y <span class="keyword">in</span> points:</span><br><span class="line">                nx = round(x / image_width, <span class="number">6</span>)</span><br><span class="line">                ny = round(y / image_height, <span class="number">6</span>)</span><br><span class="line">                normalized_points.append(<span class="string">f"<span class="subst">&#123;nx&#125;</span> <span class="subst">&#123;ny&#125;</span>"</span>)</span><br><span class="line">            file.write(<span class="string">f"<span class="subst">&#123;class_id&#125;</span> "</span> + <span class="string">" "</span>.join(normalized_points) + <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_convert</span><span class="params">(json_folder, output_folder, label_to_class_id)</span>:</span></span><br><span class="line">    <span class="comment"># 确保输出文件夹存在</span></span><br><span class="line">    os.makedirs(output_folder, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历文件夹中的所有JSON文件</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(json_folder):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">'.json'</span>):</span><br><span class="line">            json_file = os.path.join(json_folder, filename)</span><br><span class="line">            output_txt_file = os.path.join(output_folder, filename.replace(<span class="string">'.json'</span>, <span class="string">'.txt'</span>))</span><br><span class="line">            convert_labelme_to_yolo(json_file, output_txt_file, label_to_class_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_label_file</span><span class="params">(label_dict, output)</span>:</span></span><br><span class="line">    sorted_labels = [label <span class="keyword">for</span> label, _ <span class="keyword">in</span> sorted(label_dict.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(output, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> sorted_labels:</span><br><span class="line">            file.write(<span class="string">f"<span class="subst">&#123;label&#125;</span>\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 使用示例</span></span><br><span class="line">    label_map = &#123;</span><br><span class="line">        <span class="string">'belt'</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    json_path = <span class="string">r'D:\pycharmproject_2\yolo\ultralytics\datasets\belt_seg\json'</span></span><br><span class="line">    output_path = <span class="string">r'D:\pycharmproject_2\yolo\ultralytics\datasets\belt_seg\images'</span></span><br><span class="line"></span><br><span class="line">    batch_convert(json_path, output_path, label_map)</span><br><span class="line">    <span class="comment"># 生成labelme.txt文件，按照label_dict的值从小到大排列，一个类别1行</span></span><br><span class="line">    create_label_file(label_map, <span class="string">r'D:\pycharmproject_2\yolo\ultralytics\datasets\belt_seg\yolo-label.txt'</span>)</span><br></pre></td></tr></table></figure><p>完成后稍作整理，将数据集按5:1:1比例划分成train/test/val</p><h3 id="创建训练yaml文件"><a href="#创建训练yaml文件" class="headerlink" title="创建训练yaml文件"></a>创建训练yaml文件</h3><p>参考<code>yolov8n-seg.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">/exp/work/video/ultralytics/datasets/belt_seg/data/train/images</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">/exp/work/video/ultralytics/datasets/belt_seg/data/val/images</span></span><br><span class="line"><span class="attr">test:</span> <span class="string">/exp/work/video/ultralytics/datasets/belt_seg/data/test/images</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">names:</span> <span class="string">[belt]</span></span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载预训练模型</span></span><br><span class="line">model = YOLO(<span class="string">'yolov8n-seg.pt'</span>)  <span class="comment"># load a pretrained model (recommended for training)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用双卡训练</span></span><br><span class="line">model.train(</span><br><span class="line">    data=<span class="string">'datasets/belt_seg/belt_seg.yaml'</span>,</span><br><span class="line">    epochs=<span class="number">300</span>,</span><br><span class="line">    device=[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    save_dir=<span class="string">'runs/segment/belt'</span>)</span><br><span class="line"><span class="comment"># 启用模型验证</span></span><br><span class="line">model.val()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">(py39_yolov8) [root@jdz ultralytics]# python yolov8_train.py </span><br><span class="line">Ultralytics YOLOv8.2.41 🚀 Python-3.9.18 torch-2.1.2+cu121 CUDA:0 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">                                                           CUDA:1 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">engine/trainer: task=segment, mode=train, model=yolov8n-seg.pt, data=datasets/belt_seg/belt_seg.yaml, epochs=300, time=None, patience=100, batch=16, imgsz=640, save=True, save_period=-1, cache=False, device=[0, 1], workers=8, project=None, name=train6, exist_ok=False, pretrained=True, optimizer=auto, verbose=True, seed=0, deterministic=True, single_cls=False, rect=False, cos_lr=False, close_mosaic=10, resume=False, amp=True, fraction=1.0, profile=False, freeze=None, multi_scale=False, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, save_hybrid=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, vid_stride=1, stream_buffer=False, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, embed=None, show=False, save_frames=False, save_txt=False, save_conf=False, save_crop=False, show_labels=True, show_conf=True, show_boxes=True, line_width=None, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=False, opset=None, workspace=4, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.1, box=7.5, cls=0.5, dfl=1.5, pose=12.0, kobj=1.0, label_smoothing=0.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, bgr=0.0, mosaic=1.0, mixup=0.0, copy_paste=0.0, auto_augment=randaugment, erasing=0.4, crop_fraction=1.0, cfg=None, tracker=botsort.yaml, save_dir=runs/segment/train6</span><br><span class="line">Overriding model.yaml nc=80 with nc=1</span><br><span class="line"></span><br><span class="line">                   from  n    params  module                                       arguments                     </span><br><span class="line">  0                  -1  1       464  ultralytics.nn.modules.conv.Conv             [3, 16, 3, 2]                 </span><br><span class="line">  1                  -1  1      4672  ultralytics.nn.modules.conv.Conv             [16, 32, 3, 2]                </span><br><span class="line">  2                  -1  1      7360  ultralytics.nn.modules.block.C2f             [32, 32, 1, True]             </span><br><span class="line">  3                  -1  1     18560  ultralytics.nn.modules.conv.Conv             [32, 64, 3, 2]                </span><br><span class="line">  4                  -1  2     49664  ultralytics.nn.modules.block.C2f             [64, 64, 2, True]             </span><br><span class="line">  5                  -1  1     73984  ultralytics.nn.modules.conv.Conv             [64, 128, 3, 2]               </span><br><span class="line">  6                  -1  2    197632  ultralytics.nn.modules.block.C2f             [128, 128, 2, True]           </span><br><span class="line">  7                  -1  1    295424  ultralytics.nn.modules.conv.Conv             [128, 256, 3, 2]              </span><br><span class="line">  8                  -1  1    460288  ultralytics.nn.modules.block.C2f             [256, 256, 1, True]           </span><br><span class="line">  9                  -1  1    164608  ultralytics.nn.modules.block.SPPF            [256, 256, 5]                 </span><br><span class="line"> 10                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          </span><br><span class="line"> 11             [-1, 6]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 12                  -1  1    148224  ultralytics.nn.modules.block.C2f             [384, 128, 1]                 </span><br><span class="line"> 13                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          </span><br><span class="line"> 14             [-1, 4]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 15                  -1  1     37248  ultralytics.nn.modules.block.C2f             [192, 64, 1]                  </span><br><span class="line"> 16                  -1  1     36992  ultralytics.nn.modules.conv.Conv             [64, 64, 3, 2]                </span><br><span class="line"> 17            [-1, 12]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 18                  -1  1    123648  ultralytics.nn.modules.block.C2f             [192, 128, 1]                 </span><br><span class="line"> 19                  -1  1    147712  ultralytics.nn.modules.conv.Conv             [128, 128, 3, 2]              </span><br><span class="line"> 20             [-1, 9]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 21                  -1  1    493056  ultralytics.nn.modules.block.C2f             [384, 256, 1]                 </span><br><span class="line"> 22        [15, 18, 21]  1   1004275  ultralytics.nn.modules.head.Segment          [1, 32, 64, [64, 128, 256]]   </span><br><span class="line">YOLOv8n-seg summary: 261 layers, 3263811 parameters, 3263795 gradients, 12.1 GFLOPs</span><br><span class="line"></span><br><span class="line">Transferred 381/417 items from pretrained weights</span><br><span class="line">DDP: debug command /root/anaconda3/envs/py39_yolov8/bin/python -m torch.distributed.run --nproc_per_node 2 --master_port 48598 /root/.config/Ultralytics/DDP/_temp_p1zi2y0s140608071072736.py</span><br><span class="line">Ultralytics YOLOv8.2.41 🚀 Python-3.9.18 torch-2.1.2+cu121 CUDA:0 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">                                                           CUDA:1 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">Overriding model.yaml nc=80 with nc=1</span><br><span class="line">Transferred 381/417 items from pretrained weights</span><br><span class="line">Freezing layer 'model.22.dfl.conv.weight'</span><br><span class="line">AMP: running Automatic Mixed Precision (AMP) checks with YOLOv8n...</span><br><span class="line">AMP: checks passed ✅</span><br><span class="line">train: Scanning /exp/work/video/ultralytics/datasets/belt_seg/data/train/labels... 100 images, 0 backgrounds, 0 corrupt: 100%|██████████| 100/100 [00:00&lt;00:00, 681.30it/s]</span><br><span class="line">train: WARNING ⚠️ /exp/work/video/ultralytics/datasets/belt_seg/data/train/images/04221812151.jpg: corrupt JPEG restored and saved</span><br><span class="line">train: WARNING ⚠️ /exp/work/video/ultralytics/datasets/belt_seg/data/train/images/1549055475952230.jpg: corrupt JPEG restored and saved</span><br><span class="line">train: New cache created: /exp/work/video/ultralytics/datasets/belt_seg/data/train/labels.cache</span><br><span class="line">val: Scanning /exp/work/video/ultralytics/datasets/belt_seg/data/val/labels... 20 images, 0 backgrounds, 0 corrupt: 100%|██████████| 20/20 [00:00&lt;00:00, 557.79it/s]</span><br><span class="line">val: New cache created: /exp/work/video/ultralytics/datasets/belt_seg/data/val/labels.cache</span><br><span class="line">Plotting labels to runs/segment/train6/labels.jpg... </span><br><span class="line">optimizer: 'optimizer=auto' found, ignoring 'lr0=0.01' and 'momentum=0.937' and determining best 'optimizer', 'lr0' and 'momentum' automatically... </span><br><span class="line">optimizer: AdamW(lr=0.000714, momentum=0.9) with parameter groups 66 weight(decay=0.0), 77 weight(decay=0.0005), 76 bias(decay=0.0)</span><br><span class="line">Image sizes 640 train, 640 val</span><br><span class="line">Using 16 dataloader workers</span><br><span class="line">Logging results to runs/segment/train6</span><br><span class="line">Starting training for 300 epochs...</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   seg_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">      1/300      1.57G     0.9085      3.003      2.743      1.368          6        640: 100%|██████████| 7/7 [00:05&lt;00:00,  1.35it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  2.54it/s]</span><br><span class="line">                   all         20         21     0.0035          1      0.179      0.087     0.0035          1      0.113     0.0414</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   seg_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">      2/300       1.6G     0.7924      2.131      2.561      1.221          6        640: 100%|██████████| 7/7 [00:01&lt;00:00,  4.83it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  8.52it/s]</span><br><span class="line">                   all         20         21     0.0035          1      0.753      0.548     0.0035          1      0.753      0.499</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   seg_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">      3/300      1.63G     0.5945      1.036      1.887       1.12          3        640: 100%|██████████| 7/7 [00:01&lt;00:00,  4.93it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  8.46it/s]</span><br><span class="line">                   all         20         21     0.0035          1      0.886      0.581     0.0035          1      0.886      0.616</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   seg_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">      4/300      1.62G     0.5529     0.7711      1.401      1.065          7        640: 100%|██████████| 7/7 [00:01&lt;00:00,  5.25it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  7.88it/s]</span><br><span class="line">                   all         20         21      0.606      0.952      0.819      0.582      0.606      0.952      0.819      0.641</span><br><span class="line">...</span><br><span class="line">      Epoch    GPU_mem   box_loss   seg_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    295/300      1.61G     0.1653     0.1045     0.2493     0.8894          3        640: 100%|██████████| 7/7 [00:01&lt;00:00,  5.45it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  9.24it/s]</span><br><span class="line">                   all         20         21      0.982          1      0.995      0.926      0.982          1      0.995      0.912</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   seg_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    296/300      1.63G     0.2021     0.1132     0.2765      0.895          2        640: 100%|██████████| 7/7 [00:01&lt;00:00,  5.70it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  9.00it/s]</span><br><span class="line">                   all         20         21      0.974          1      0.995      0.933      0.974          1      0.995      0.917</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   seg_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    297/300      1.63G     0.1777     0.1075     0.2616     0.8351          2        640: 100%|██████████| 7/7 [00:01&lt;00:00,  5.51it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  7.61it/s]</span><br><span class="line">                   all         20         21      0.969          1      0.995      0.927      0.969          1      0.995      0.915</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   seg_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    298/300      1.63G     0.1736     0.1195     0.2461     0.8778          2        640: 100%|██████████| 7/7 [00:01&lt;00:00,  5.64it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  8.73it/s]</span><br><span class="line">                   all         20         21      0.968          1      0.995      0.935      0.968          1      0.995      0.916</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   seg_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    299/300      1.61G     0.2036     0.6821     0.2815     0.8217          2        640: 100%|██████████| 7/7 [00:01&lt;00:00,  5.33it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  8.39it/s]</span><br><span class="line">                   all         20         21      0.962          1      0.995      0.933      0.962          1      0.995      0.905</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   seg_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    300/300      1.63G      0.155     0.1236     0.2409     0.8592          2        640: 100%|██████████| 7/7 [00:01&lt;00:00,  5.38it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  8.70it/s]</span><br><span class="line">                   all         20         21      0.977          1      0.995      0.927      0.977          1      0.995      0.917</span><br><span class="line"></span><br><span class="line">300 epochs completed in 0.181 hours.</span><br><span class="line">Optimizer stripped from runs/segment/train6/weights/last.pt, 6.8MB</span><br><span class="line">Optimizer stripped from runs/segment/train6/weights/best.pt, 6.8MB</span><br><span class="line"></span><br><span class="line">Validating runs/segment/train6/weights/best.pt...</span><br><span class="line">Ultralytics YOLOv8.2.41 🚀 Python-3.9.18 torch-2.1.2+cu121 CUDA:0 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">                                                           CUDA:1 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">YOLOv8n-seg summary (fused): 195 layers, 3258259 parameters, 0 gradients, 12.0 GFLOPs</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:00&lt;00:00,  9.32it/s]</span><br><span class="line">                   all         20         21      0.995          1      0.995      0.948      0.995          1      0.995      0.944</span><br><span class="line">Speed: 0.2ms preprocess, 1.5ms inference, 0.0ms loss, 0.9ms postprocess per image</span><br><span class="line">Results saved to runs/segment/train6</span><br><span class="line">Ultralytics YOLOv8.2.41 🚀 Python-3.9.18 torch-2.1.2+cu121 CUDA:0 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">                                                           CUDA:1 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">YOLOv8n-seg summary (fused): 195 layers, 3258259 parameters, 0 gradients, 12.0 GFLOPs</span><br><span class="line">val: Scanning /exp/work/video/ultralytics/datasets/belt_seg/data/val/labels.cache... 20 images, 0 backgrounds, 0 corrupt: 100%|██████████| 20/20 [00:00&lt;?, ?it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95)     Mask(P          R      mAP50  mAP50-95): 100%|██████████| 2/2 [00:01&lt;00:00,  1.42it/s]</span><br><span class="line">                   all         20         21      0.995          1      0.995      0.948      0.995          1      0.995      0.944</span><br><span class="line">Speed: 0.3ms preprocess, 24.2ms inference, 0.0ms loss, 32.2ms postprocess per image</span><br><span class="line">Results saved to runs/segment/train62</span><br></pre></td></tr></table></figure><h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><h3 id="导包、模型加载-amp-GPU加载"><a href="#导包、模型加载-amp-GPU加载" class="headerlink" title="导包、模型加载&amp;GPU加载"></a>导包、模型加载&amp;GPU加载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line">model2 = YOLO(<span class="string">'runs/segment/train6/weights/best.pt'</span>)</span><br><span class="line">t = time.time()</span><br><span class="line">results = model2.predict(<span class="string">'video/belt.mp4'</span>, stream=<span class="literal">False</span>, save=<span class="literal">False</span>, device=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> results:</span><br><span class="line">    print(res)</span><br><span class="line">print(time.time() - t)</span><br></pre></td></tr></table></figure><h2 id="多媒体推拉流"><a href="#多媒体推拉流" class="headerlink" title="多媒体推拉流"></a>多媒体推拉流</h2><p>主函数（多进程）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">from</span> visualize.segment <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamingSegmentServer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stream_src, stream_dst, cordon)</span>:</span></span><br><span class="line">        self.pipe = <span class="literal">None</span></span><br><span class="line">        self.model = <span class="literal">None</span></span><br><span class="line">        self.capture = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        self.fps = <span class="number">0</span></span><br><span class="line">        self.width = <span class="number">0</span></span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line">        self.frame_id = <span class="number">0</span></span><br><span class="line">        self.solve_id = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.cordon = cordon</span><br><span class="line">        self.stream_src = stream_src</span><br><span class="line">        self.stream_dst = stream_dst</span><br><span class="line"></span><br><span class="line">        self.center = self.calculate_geometric_center()</span><br><span class="line">        self.avg_width = (self.cordon[<span class="number">3</span>][<span class="number">0</span>]-self.cordon[<span class="number">0</span>][<span class="number">0</span>] + self.cordon[<span class="number">2</span>][<span class="number">0</span>]-self.cordon[<span class="number">1</span>][<span class="number">0</span>]) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate_geometric_center</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(self.cordon) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        sum_x = sum([point[<span class="number">0</span>] <span class="keyword">for</span> point <span class="keyword">in</span> self.cordon])</span><br><span class="line">        sum_y = sum([point[<span class="number">1</span>] <span class="keyword">for</span> point <span class="keyword">in</span> self.cordon])</span><br><span class="line">        center_x = sum_x / len(self.cordon)</span><br><span class="line">        center_y = sum_y / len(self.cordon)</span><br><span class="line">        <span class="keyword">return</span> center_x, center_y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        framequeue = multiprocessing.Queue(<span class="number">10</span>)</span><br><span class="line">        solvequeue = multiprocessing.Queue(<span class="number">10</span>)</span><br><span class="line">        solvequeue.put(<span class="number">1</span>)</span><br><span class="line">        self.capture = cv2.VideoCapture(self.stream_src)</span><br><span class="line">        self.fps = int(self.capture.get(cv2.CAP_PROP_FPS))</span><br><span class="line">        self.width = int(self.capture.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">        self.height = int(self.capture.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line"></span><br><span class="line">        command = [<span class="string">'ffmpeg'</span>,</span><br><span class="line">                   <span class="string">'-y'</span>,</span><br><span class="line">                   <span class="string">'-f'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">                   <span class="string">'-vcodec'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">                   <span class="string">'-pix_fmt'</span>, <span class="string">'bgr24'</span>,</span><br><span class="line">                   <span class="string">'-s'</span>, <span class="string">"&#123;&#125;x&#123;&#125;"</span>.format(self.width, self.height),</span><br><span class="line">                   <span class="string">'-r'</span>, str(self.fps),</span><br><span class="line">                   <span class="string">'-i'</span>, <span class="string">'-'</span>,</span><br><span class="line">                   <span class="string">'-c:v'</span>, <span class="string">'libx264'</span>,</span><br><span class="line">                   <span class="string">'-pix_fmt'</span>, <span class="string">'yuv420p'</span>,</span><br><span class="line">                   <span class="string">'-preset'</span>, <span class="string">'ultrafast'</span>,</span><br><span class="line">                   <span class="string">'-f'</span>, <span class="string">'rtsp'</span>,</span><br><span class="line">                   self.stream_dst]</span><br><span class="line">        pipe = sp.Popen(command, stdin=sp.PIPE)</span><br><span class="line"></span><br><span class="line">        capture_thread = threading.Thread(target=self.capture_video, args=(framequeue,))</span><br><span class="line">        capture_thread.start()</span><br><span class="line"></span><br><span class="line">        solve_id = multiprocessing.Value(<span class="string">'i'</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(worker.get(<span class="string">'worker_threads'</span>)):</span><br><span class="line">            process_thread = multiprocessing.Process(target=self.process_video, args=(pipe, framequeue, solve_id))</span><br><span class="line">            process_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">capture_video</span><span class="params">(self, framequeue)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> framequeue.full():</span><br><span class="line">                time.sleep(<span class="number">0.05</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret, frame = self.capture.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                image_bgr = frame</span><br><span class="line">                self.frame_id += <span class="number">1</span></span><br><span class="line">                framequeue.put((image_bgr, self.frame_id))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_video</span><span class="params">(self, pipe, framequeue, solve_id)</span>:</span></span><br><span class="line">        model = YOLO(<span class="string">'runs/segment/train6/weights/best.pt'</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> framequeue.empty():</span><br><span class="line">                frame_bgr, frame_id = framequeue.get()</span><br><span class="line">                results = model.predict(</span><br><span class="line">                    frame_bgr,</span><br><span class="line">                    stream=<span class="literal">False</span>,</span><br><span class="line">                    save=<span class="literal">False</span>,</span><br><span class="line">                    device=[<span class="number">0</span>],</span><br><span class="line">                    verbose=<span class="literal">False</span></span><br><span class="line">                )</span><br><span class="line">                names = results[<span class="number">0</span>].names</span><br><span class="line">                clses = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> results[<span class="number">0</span>].boxes.cls.tolist()]</span><br><span class="line">                masks = [i.tolist() <span class="keyword">for</span> i <span class="keyword">in</span> results[<span class="number">0</span>].masks.xy]</span><br><span class="line">                name_set = [names.get(i) <span class="keyword">for</span> i <span class="keyword">in</span> clses]</span><br><span class="line"></span><br><span class="line">                frame_bgr = visualize_seg(</span><br><span class="line">                    frame_bgr,</span><br><span class="line">                    masks,</span><br><span class="line">                    name_set,</span><br><span class="line">                    self.cordon,</span><br><span class="line">                    self.center,</span><br><span class="line">                    self.avg_width)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    time.sleep(<span class="number">0.0001</span>)</span><br><span class="line">                    <span class="keyword">if</span> solve_id.value == frame_id:</span><br><span class="line">                        pipe.stdin.write(frame_bgr.tobytes())</span><br><span class="line">                        solve_id.value += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    rtsp_url = <span class="string">'rtsp://192.168.9.164:8554/video'</span></span><br><span class="line">    rtsp_stream = <span class="string">'rtsp://192.168.9.164:8554/live'</span></span><br><span class="line">    outline = [[<span class="number">268</span>, <span class="number">4</span>], [<span class="number">145</span>, <span class="number">311</span>],..., [<span class="number">482</span>, <span class="number">311</span>], [<span class="number">358</span>, <span class="number">4</span>]] <span class="comment"># 自定义安全区域</span></span><br><span class="line">    sss = StreamingSegmentServer(rtsp_url, rtsp_stream, outline)</span><br><span class="line">    sss.run()</span><br></pre></td></tr></table></figure><p>可视化 &amp; 偏移算法（计算分割掩码与安全区域中心点x轴偏移量）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFile, ImageFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> PR</span><br><span class="line"></span><br><span class="line">font_file = os.path.join(PR, <span class="string">'visualize/SourceHanSansCN-Medium.otf'</span>)</span><br><span class="line">ImageFile.LOAD_TRUNCATED_IMAGES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_geometric_center</span><span class="params">(points)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(points) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    sum_x = sum([point[<span class="number">0</span>] <span class="keyword">for</span> point <span class="keyword">in</span> points])</span><br><span class="line">    sum_y = sum([point[<span class="number">1</span>] <span class="keyword">for</span> point <span class="keyword">in</span> points])</span><br><span class="line">    center_x = sum_x / len(points)</span><br><span class="line">    center_y = sum_y / len(points)</span><br><span class="line">    <span class="keyword">return</span> center_x, center_y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_seg</span><span class="params">(im, masks, names, cordon, center, avg_width)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(im, str):</span><br><span class="line">        im = Image.open(im)</span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">        im = cv2.cvtColor(im, cv2.COLOR_RGB2BGR)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line"></span><br><span class="line">    im = Image.fromarray(im)</span><br><span class="line">    im = im.convert(<span class="string">'RGBA'</span>)</span><br><span class="line">    size = im.size</span><br><span class="line"></span><br><span class="line">    layer = Image.new(<span class="string">'RGBA'</span>, size)</span><br><span class="line">    draw = ImageDraw.Draw(im)</span><br><span class="line">    draw2 = ImageDraw.Draw(layer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, name <span class="keyword">in</span> enumerate(names):</span><br><span class="line">        mask = masks[i]</span><br><span class="line">        mask = [tuple(j) <span class="keyword">for</span> j <span class="keyword">in</span> mask]</span><br><span class="line">        text = name</span><br><span class="line">        center_rt = calculate_geometric_center(mask)</span><br><span class="line">        <span class="comment"># offset = math.sqrt(pow(center_rt[0] - center[0], 2) + pow(center_rt[1] - center[1], 2)) / avg_width 计算距离偏移</span></span><br><span class="line">        offset = (center_rt[<span class="number">0</span>] - center[<span class="number">0</span>]) / avg_width</span><br><span class="line"></span><br><span class="line">        draw2.polygon(mask,</span><br><span class="line">                      fill=(<span class="number">128</span>, <span class="number">0</span>, <span class="number">128</span>, <span class="number">160</span>),</span><br><span class="line">                      outline=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">        im.paste(layer, mask=layer)</span><br><span class="line">        draw.text(</span><br><span class="line">            (mask[<span class="number">0</span>][<span class="number">0</span>], mask[<span class="number">0</span>][<span class="number">1</span>]),</span><br><span class="line">            text,</span><br><span class="line">            font=ImageFont.truetype(font_file, size=<span class="number">13</span>),</span><br><span class="line">            fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>))</span><br><span class="line">        draw.text(</span><br><span class="line">            (mask[<span class="number">0</span>][<span class="number">0</span>], mask[<span class="number">0</span>][<span class="number">1</span>]+<span class="number">20</span>),</span><br><span class="line">            <span class="string">'offset: '</span> + str(offset),</span><br><span class="line">            font=ImageFont.truetype(font_file, size=<span class="number">13</span>),</span><br><span class="line">            fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">    draw.polygon([tuple(i) <span class="keyword">for</span> i <span class="keyword">in</span> cordon],</span><br><span class="line">                 fill=<span class="literal">None</span>,</span><br><span class="line">                 outline=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">    im = im.convert(<span class="string">'RGB'</span>)</span><br><span class="line">    im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">    <span class="keyword">return</span> im</span><br></pre></td></tr></table></figure><p>配置项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">PR = os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line">worker = &#123;</span><br><span class="line">    <span class="string">'worker_threads'</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="string">'worker_queue_len'</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/11/yolov8-seg：皮带机偏移实时检测/3.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;环境-amp-安装&quot;&gt;&lt;a href=&quot;#环境-amp-安装&quot; class=&quot;headerlink&quot; title=&quot;环境&amp;amp;安装&quot;&gt;&lt;/a&gt;环境&amp;amp;安装&lt;/h2&gt;&lt;p&gt;同上文yolov8：火灾检测&lt;/p&gt;
&lt;p&gt;模型使用&lt;code&gt;yolov8n-seg&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据标注&quot;&gt;&lt;a href=&quot;#数据标注&quot; class=&quot;headerlink&quot; title=&quot;数据标注&quot;&gt;&lt;/a&gt;数据标注&lt;/h2&gt;&lt;h3 id=&quot;标注工具：labelme&quot;&gt;&lt;a href=&quot;#标注工具：labelme&quot; class=&quot;headerlink&quot; title=&quot;标注工具：labelme&quot;&gt;&lt;/a&gt;标注工具：labelme&lt;/h3&gt;&lt;p&gt;对分割目标进行多边矩形标注&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/05/11/yolov8-seg：皮带机偏移实时检测/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/05/11/yolov8-seg：皮带机偏移实时检测/2.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="实例分割" scheme="http://yoursite.com/categories/实例分割/"/>
    
    
    <category term="yolov8" scheme="http://yoursite.com/tags/yolov8/"/>
    
    <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Bert+GRU地址归一算法</title>
    <link href="http://yoursite.com/2024/04/05/Bert-GRU%E5%9C%B0%E5%9D%80%E5%BD%92%E4%B8%80%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2024/04/05/Bert-GRU%E5%9C%B0%E5%9D%80%E5%BD%92%E4%B8%80%E7%AE%97%E6%B3%95/</id>
    <published>2024-04-05T08:23:15.000Z</published>
    <updated>2024-06-28T08:40:03.114Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="一、-算法简介"><a href="#一、-算法简介" class="headerlink" title="一、 算法简介"></a>一、 算法简介</h2><p>本地址归一算法（已经下简称算法）旨在对输入文本中出现的地址信息或一般地址信息做地址结构化抽取，并输出该地址映射到数据库中的标准化地址。</p><h2 id="二、算法模块"><a href="#二、算法模块" class="headerlink" title="二、算法模块"></a>二、算法模块</h2><p>算法由以下不同模块共同组成，各模块在算法的各个生命周期起到重要作用：</p><h3 id="1、建立原始地址库"><a href="#1、建立原始地址库" class="headerlink" title="1、建立原始地址库"></a>1、建立原始地址库</h3><p>使用postgres数据库（以下简pg）创建存储全国各级原始地址的原始地址库。通过网络爬虫不断采集和更新地址数据（主要来源为高德地图），并存储到原始地址库，地址库包括地址的名称信息、poi信息、类别信息、经纬度信息等原始内容，为后续工作的开展做数据支撑。</p><h3 id="2、文本地址抽取"><a href="#2、文本地址抽取" class="headerlink" title="2、文本地址抽取"></a>2、文本地址抽取</h3><p>使用UIE(Universal Information Extraction)框架，结合ERNIE3.0模型，使模型具备从无结构或半结构的文本中抽取地址信息的能力。</p><h3 id="3、地址分级算法"><a href="#3、地址分级算法" class="headerlink" title="3、地址分级算法"></a>3、地址分级算法</h3><h4 id="i-分级标准"><a href="#i-分级标准" class="headerlink" title="i)分级标准"></a>i)分级标准</h4><p>首先需要确定一套地址的分级标准细节，本算法采用的分级标准基于阿里《文地址要素解析标注规范》，并做一定程度范围的修改，将地址分为18个不同级别：</p><p>① Prov：省级行政区划，省、自治区、直辖市</p><p>② City：地级行政区划，地级市、地区、自治州等</p><p>③ District：县级行政区划，市辖区、县级市、县等</p><p>④ Devzone：广义的上的开发区，包含一般性产业 园区、度假区</p><p>⑤ Town：乡级行政区划，镇、街道、乡等</p><p>⑥ Community：包含社区、行政村（生产大队、村委会），自然村</p><p>⑦ Village Group：限定 xx 组、xx 队、xx 社</p><p>⑧ Road：有正式名称的道路，包括隧道、高架、街、弄、巷等。 步行街、商业街</p><p>⑨ Roadno：路牌号</p><p>⑩ Poi：目标兴趣点</p><p>⑪ Subpoi：目标兴趣点的子兴趣点</p><p>⑫ Houseno：楼栋号，农村地址的门牌号(包括类似南楼、北楼一类的描述)</p><p>⑬ Cellno：单元号，包括甲乙丙丁等</p><p>⑭ Floorno：楼层号</p><p>⑮ Roomno：房间号</p><p>⑯ Assist：定位词，包括方位、解释性名词</p><p>⑰ Intersection：路桥交叉口、交汇处、十字路口等</p><p>⑱ Distance：距离</p><h4 id="ii-算法细节"><a href="#ii-算法细节" class="headerlink" title="ii)算法细节"></a>ii)算法细节</h4><p>从爬虫获取的原始地址库构建地址结构化数据集，并对数据集划分为训练集和验证集进行数据标注。标注方式采用B-I-E-O-S五位序列标注法，该标注法将尽可能的保留被标注地址的分级信息。</p><p>构建地址分级模型。使用基于多头注意力机制Transformers架构的BERT大模型作为预训练模型，并将模型结合CRF、GRU算法。CRF：全称为条件随机场（Conditional Random Fields），结合了最大熵模型和隐马尔可夫模型的特点，是一种无向图模型。它在序列标注任务如分词、词性标注和命名实体识别等方面取得了很好的效果；GRU：全称为门控循环单元（Gated Recurrent Unit），是一种常用于序列数据建模的神经网络模型，能够很好解决BERT循环神经网络中的长期依赖问题，捕获序列中的长期特征，避免训练过程中的梯度消失和梯度爆炸，使完成的模型结构具有更优秀的泛化能力、更好地拟合真实地址数据。</p><p><img src="/2024/04/05/Bert-GRU地址归一算法/A.png" alt></p><a id="more"></a><h3 id="4、建立标准地址库"><a href="#4、建立标准地址库" class="headerlink" title="4、建立标准地址库"></a>4、建立标准地址库</h3><p>使用pg数据库建立标准地址库，地址库将包括地址的原始id、名称信息、poi信息、类别信息、经纬度信息以及18级分级信息。</p><p>通过上一步骤训练好地址分级模型，并封装进数据计算中心，使用GPU并发计算原始地址库的数据，并将结果输出保存进标准地址库。</p><h3 id="5、地址排序算法"><a href="#5、地址排序算法" class="headerlink" title="5、地址排序算法"></a>5、地址排序算法</h3><p>主要是基于希尔排序算法思想将模块二抽取到的地址信息进行排列组合，去除噪声、过滤冗余结构，最后拟合得到数据库中最接近当前地址信息的查询条件。</p><p><img src="/2024/04/05/Bert-GRU地址归一算法/3.png" alt></p><h3 id="6、建立地址分级匹配系统（检索）"><a href="#6、建立地址分级匹配系统（检索）" class="headerlink" title="6、建立地址分级匹配系统（检索）"></a>6、建立地址分级匹配系统（检索）</h3><p>通过pg数据库的高效检索功能，实现对地址数据的实时结构化查询和数据推送，实现算法完整功能。</p><h2 id="三、接口服务"><a href="#三、接口服务" class="headerlink" title="三、接口服务"></a>三、接口服务</h2><p>算法目前可提供5类接口：</p><p>1、文本地址自动归一接口：提取文本中的所有地址，并标准化；</p><p>2、地址检索接口：自动拆分、检索相关地址；</p><p>3、地址提取接口：仅提取文本中所有地址，不做标准化处理；</p><p>4、地点检索接口：检索相关地点的标准地址；</p><p>5、地址分级接口：对输入地址进行层级划分。</p><h2 id="四、模型更新-amp-数据运维"><a href="#四、模型更新-amp-数据运维" class="headerlink" title="四、模型更新 &amp; 数据运维"></a>四、模型更新 &amp; 数据运维</h2><p>当前版本模型的更新包括分级模型的更新（再训练）和排序算法的更新。数据的维护主要从三个方面进行：</p><p>1、爬虫脚本的定期维护，更新原始地址pg数据库；</p><p>2、维持标准地址库的数据计算中心与爬虫同步运转；</p><p>3、对标准地址库中的错误信息做提取，添加进训练集。</p><h2 id="五、机器配置"><a href="#五、机器配置" class="headerlink" title="五、机器配置"></a>五、机器配置</h2><p>算法和模型的各个模块使用python语言编写，在linux服务器上进行训练和测试，并使用基于NVIDIA CUDA生态的Torch框架进行科学计算。</p><p>目前满足模型各功能正常快速运转占用的显存理论上不低于5GB，显卡显存不低于8GB。</p><h2 id="六、问题"><a href="#六、问题" class="headerlink" title="六、问题"></a>六、问题</h2><p>目前模型版本可能存在的问题：</p><p>1、B-I-E-O-S序列标注法数据标注过程复杂，且对数据集的精度要求较高；</p><p>2、部分复杂结构地址样本暂不充足；</p><p>3、爬虫模块需要账号支撑正常运行，爬虫目前递归算法（DFS），可能存在遗漏情况；</p><p>4、全国地址更新较为频繁，需要从爬虫和数据计算中心两个层面分别解决数据更新的问题；</p><p>5、目前使用pg模糊检索不支持字段索引，随数据量指数上升可能存在性能瓶颈，暂未验证。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、-算法简介&quot;&gt;&lt;a href=&quot;#一、-算法简介&quot; class=&quot;headerlink&quot; title=&quot;一、 算法简介&quot;&gt;&lt;/a&gt;一、 算法简介&lt;/h2&gt;&lt;p&gt;本地址归一算法（已经下简称算法）旨在对输入文本中出现的地址信息或一般地址信息做地址结构化抽取，并输出该地址映射到数据库中的标准化地址。&lt;/p&gt;
&lt;h2 id=&quot;二、算法模块&quot;&gt;&lt;a href=&quot;#二、算法模块&quot; class=&quot;headerlink&quot; title=&quot;二、算法模块&quot;&gt;&lt;/a&gt;二、算法模块&lt;/h2&gt;&lt;p&gt;算法由以下不同模块共同组成，各模块在算法的各个生命周期起到重要作用：&lt;/p&gt;
&lt;h3 id=&quot;1、建立原始地址库&quot;&gt;&lt;a href=&quot;#1、建立原始地址库&quot; class=&quot;headerlink&quot; title=&quot;1、建立原始地址库&quot;&gt;&lt;/a&gt;1、建立原始地址库&lt;/h3&gt;&lt;p&gt;使用postgres数据库（以下简pg）创建存储全国各级原始地址的原始地址库。通过网络爬虫不断采集和更新地址数据（主要来源为高德地图），并存储到原始地址库，地址库包括地址的名称信息、poi信息、类别信息、经纬度信息等原始内容，为后续工作的开展做数据支撑。&lt;/p&gt;
&lt;h3 id=&quot;2、文本地址抽取&quot;&gt;&lt;a href=&quot;#2、文本地址抽取&quot; class=&quot;headerlink&quot; title=&quot;2、文本地址抽取&quot;&gt;&lt;/a&gt;2、文本地址抽取&lt;/h3&gt;&lt;p&gt;使用UIE(Universal Information Extraction)框架，结合ERNIE3.0模型，使模型具备从无结构或半结构的文本中抽取地址信息的能力。&lt;/p&gt;
&lt;h3 id=&quot;3、地址分级算法&quot;&gt;&lt;a href=&quot;#3、地址分级算法&quot; class=&quot;headerlink&quot; title=&quot;3、地址分级算法&quot;&gt;&lt;/a&gt;3、地址分级算法&lt;/h3&gt;&lt;h4 id=&quot;i-分级标准&quot;&gt;&lt;a href=&quot;#i-分级标准&quot; class=&quot;headerlink&quot; title=&quot;i)分级标准&quot;&gt;&lt;/a&gt;i)分级标准&lt;/h4&gt;&lt;p&gt;首先需要确定一套地址的分级标准细节，本算法采用的分级标准基于阿里《文地址要素解析标注规范》，并做一定程度范围的修改，将地址分为18个不同级别：&lt;/p&gt;
&lt;p&gt;① Prov：省级行政区划，省、自治区、直辖市&lt;/p&gt;
&lt;p&gt;② City：地级行政区划，地级市、地区、自治州等&lt;/p&gt;
&lt;p&gt;③ District：县级行政区划，市辖区、县级市、县等&lt;/p&gt;
&lt;p&gt;④ Devzone：广义的上的开发区，包含一般性产业 园区、度假区&lt;/p&gt;
&lt;p&gt;⑤ Town：乡级行政区划，镇、街道、乡等&lt;/p&gt;
&lt;p&gt;⑥ Community：包含社区、行政村（生产大队、村委会），自然村&lt;/p&gt;
&lt;p&gt;⑦ Village Group：限定 xx 组、xx 队、xx 社&lt;/p&gt;
&lt;p&gt;⑧ Road：有正式名称的道路，包括隧道、高架、街、弄、巷等。 步行街、商业街&lt;/p&gt;
&lt;p&gt;⑨ Roadno：路牌号&lt;/p&gt;
&lt;p&gt;⑩ Poi：目标兴趣点&lt;/p&gt;
&lt;p&gt;⑪ Subpoi：目标兴趣点的子兴趣点&lt;/p&gt;
&lt;p&gt;⑫ Houseno：楼栋号，农村地址的门牌号(包括类似南楼、北楼一类的描述)&lt;/p&gt;
&lt;p&gt;⑬ Cellno：单元号，包括甲乙丙丁等&lt;/p&gt;
&lt;p&gt;⑭ Floorno：楼层号&lt;/p&gt;
&lt;p&gt;⑮ Roomno：房间号&lt;/p&gt;
&lt;p&gt;⑯ Assist：定位词，包括方位、解释性名词&lt;/p&gt;
&lt;p&gt;⑰ Intersection：路桥交叉口、交汇处、十字路口等&lt;/p&gt;
&lt;p&gt;⑱ Distance：距离&lt;/p&gt;
&lt;h4 id=&quot;ii-算法细节&quot;&gt;&lt;a href=&quot;#ii-算法细节&quot; class=&quot;headerlink&quot; title=&quot;ii)算法细节&quot;&gt;&lt;/a&gt;ii)算法细节&lt;/h4&gt;&lt;p&gt;从爬虫获取的原始地址库构建地址结构化数据集，并对数据集划分为训练集和验证集进行数据标注。标注方式采用B-I-E-O-S五位序列标注法，该标注法将尽可能的保留被标注地址的分级信息。&lt;/p&gt;
&lt;p&gt;构建地址分级模型。使用基于多头注意力机制Transformers架构的BERT大模型作为预训练模型，并将模型结合CRF、GRU算法。CRF：全称为条件随机场（Conditional Random Fields），结合了最大熵模型和隐马尔可夫模型的特点，是一种无向图模型。它在序列标注任务如分词、词性标注和命名实体识别等方面取得了很好的效果；GRU：全称为门控循环单元（Gated Recurrent Unit），是一种常用于序列数据建模的神经网络模型，能够很好解决BERT循环神经网络中的长期依赖问题，捕获序列中的长期特征，避免训练过程中的梯度消失和梯度爆炸，使完成的模型结构具有更优秀的泛化能力、更好地拟合真实地址数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/04/05/Bert-GRU地址归一算法/A.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="地址归一" scheme="http://yoursite.com/categories/地址归一/"/>
    
    
    <category term="BERT" scheme="http://yoursite.com/tags/BERT/"/>
    
    <category term="GRU" scheme="http://yoursite.com/tags/GRU/"/>
    
  </entry>
  
  <entry>
    <title>RTSP推拉流服务搭建</title>
    <link href="http://yoursite.com/2024/03/07/RTSP%E6%8E%A8%E6%8B%89%E6%B5%81%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2024/03/07/RTSP%E6%8E%A8%E6%8B%89%E6%B5%81%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</id>
    <published>2024-03-07T02:02:13.000Z</published>
    <updated>2024-07-08T07:14:12.066Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="一、基础服务搭建（windows）"><a href="#一、基础服务搭建（windows）" class="headerlink" title="一、基础服务搭建（windows）"></a>一、基础服务搭建（windows）</h2><h3 id="1-下载RTSP服务器"><a href="#1-下载RTSP服务器" class="headerlink" title="1.下载RTSP服务器"></a>1.下载RTSP服务器</h3><p>下载链接：<a href="https://github.com/aler9/rtsp-simple-server/releases" target="_blank" rel="noopener">https://github.com/aler9/rtsp-simple-server/releases</a></p><p><img src="/2024/03/07/RTSP推拉流服务搭建/1.png" alt></p><h3 id="2-下载FFmpeg工具"><a href="#2-下载FFmpeg工具" class="headerlink" title="2.下载FFmpeg工具"></a>2.下载FFmpeg工具</h3><p>下载链接：<a href="https://github.com/BtbN/FFmpeg-Builds/releases" target="_blank" rel="noopener">https://github.com/BtbN/FFmpeg-Builds/releases</a></p><p><img src="/2024/03/07/RTSP推拉流服务搭建/2.png" alt></p><h3 id="3-启动服务器"><a href="#3-启动服务器" class="headerlink" title="3.启动服务器"></a>3.启动服务器</h3><p>进入RTSP服务器路径，控制台执行<code>.\mediamtx.exe</code></p><p><img src="/2024/03/07/RTSP推拉流服务搭建/3.png" alt></p><a id="more"></a><h3 id="4-启动推流服务"><a href="#4-启动推流服务" class="headerlink" title="4.启动推流服务"></a>4.启动推流服务</h3><p>进入FFmpeg服务器路径，控制台执行<code>ffmpeg -re -stream_loop -1 -i belt.mp4 -c copy -f rtsp rtsp://127.0.0.1:8554/video</code>，循环播放视频文件并进行推流</p><p><img src="/2024/03/07/RTSP推拉流服务搭建/4.png" alt></p><h3 id="5-播放流媒体"><a href="#5-播放流媒体" class="headerlink" title="5.播放流媒体"></a>5.播放流媒体</h3><p>启动VLC播放器</p><p><img src="/2024/03/07/RTSP推拉流服务搭建/5.png" alt></p><p><img src="/2024/03/07/RTSP推拉流服务搭建/6.png" alt></p><h2 id="二、opencv-python-实现RTSP推拉流"><a href="#二、opencv-python-实现RTSP推拉流" class="headerlink" title="二、opencv+python 实现RTSP推拉流"></a>二、opencv+python 实现RTSP推拉流</h2><h3 id="1-拉流"><a href="#1-拉流" class="headerlink" title="1.拉流"></a>1.拉流</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">capturevideo</span><span class="params">(capture, framequeue)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> framequeue.full():</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret, frame = capture.read()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            image_bgr = frame</span><br><span class="line">            framequeue.put(image_bgr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_rtsp</span><span class="params">(rtsp_src)</span>:</span></span><br><span class="line">    capture = cv2.VideoCapture(rtsp_src)</span><br><span class="line">    framequeue = queue.Queue(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    thread = threading.Thread(</span><br><span class="line">        target=capturevideo, args=(capture, framequeue))</span><br><span class="line">    thread.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    width = int(capture.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">    height = int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">    fps = int(capture.get(cv2.CAP_PROP_FPS))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> framequeue.empty():</span><br><span class="line">            frame_bgr = framequeue.get()</span><br><span class="line">            cv2.imshow(<span class="string">"image"</span>, frame_bgr)  <span class="comment"># 显示图像</span></span><br><span class="line">            cv2.waitKey(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    rtsp_url = <span class="string">'rtsp://192.168.9.164:8554/video'</span></span><br><span class="line">    execute_rtsp(rtsp_url)</span><br></pre></td></tr></table></figure><h3 id="2-拉流-推流"><a href="#2-拉流-推流" class="headerlink" title="2.拉流+推流"></a>2.拉流+推流</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">capturevideo</span><span class="params">(capture, framequeue)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> framequeue.full():</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret, frame = capture.read()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            image_bgr = frame</span><br><span class="line">            framequeue.put(image_bgr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_rtsp</span><span class="params">(rtsp_src, rtsp_dst)</span>:</span></span><br><span class="line">    capture = cv2.VideoCapture(rtsp_src)</span><br><span class="line">    framequeue = queue.Queue(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    thread = threading.Thread(</span><br><span class="line">        target=capturevideo, args=(capture, framequeue))</span><br><span class="line">    thread.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    width = int(capture.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">    height = int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">    fps = int(capture.get(cv2.CAP_PROP_FPS))</span><br><span class="line">    command = [<span class="string">'ffmpeg'</span>,</span><br><span class="line">               <span class="string">'-y'</span>,</span><br><span class="line">               <span class="string">'-f'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">               <span class="string">'-vcodec'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">               <span class="string">'-pix_fmt'</span>, <span class="string">'bgr24'</span>,</span><br><span class="line">               <span class="string">'-s'</span>, <span class="string">"&#123;&#125;x&#123;&#125;"</span>.format(width, height),</span><br><span class="line">               <span class="string">'-r'</span>, str(fps),</span><br><span class="line">               <span class="string">'-i'</span>, <span class="string">'-'</span>,</span><br><span class="line">               <span class="string">'-c:v'</span>, <span class="string">'libx264'</span>,</span><br><span class="line">               <span class="string">'-pix_fmt'</span>, <span class="string">'yuv420p'</span>,</span><br><span class="line">               <span class="string">'-preset'</span>, <span class="string">'ultrafast'</span>,</span><br><span class="line">               <span class="string">'-f'</span>, <span class="string">'rtsp'</span>,</span><br><span class="line">               rtsp_dst]</span><br><span class="line">    pipe = sp.Popen(command, stdin=sp.PIPE)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> framequeue.empty():</span><br><span class="line">            frame_bgr = framequeue.get()</span><br><span class="line">            pipe.stdin.write(frame_bgr.tostring())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    rtsp_url = <span class="string">'rtsp://192.168.9.164:8554/video'</span></span><br><span class="line">    rtsp_stream = <span class="string">'rtsp://192.168.9.164:8554/live'</span></span><br><span class="line">    execute_rtsp(rtsp_url, rtsp_stream)</span><br></pre></td></tr></table></figure><p><img src="/2024/03/07/RTSP推拉流服务搭建/7.png" alt></p><p>可以看到，视频码流已推送到8554/live地址下</p><h2 id="三、视频处理，推流"><a href="#三、视频处理，推流" class="headerlink" title="三、视频处理，推流"></a>三、视频处理，推流</h2><h3 id="1-多线程处理视频帧"><a href="#1-多线程处理视频帧" class="headerlink" title="1.多线程处理视频帧"></a>1.多线程处理视频帧</h3><p>主函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">from</span> visualize.detection <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">capturevideo</span><span class="params">(capture, framequeue)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> frame_id</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> framequeue.full():</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret, frame = capture.read()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            image_bgr = frame</span><br><span class="line">            frame_id += <span class="number">1</span></span><br><span class="line">            framequeue.put((image_bgr, frame_id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_rtsp</span><span class="params">(rtsp_src, rtsp_dst)</span>:</span></span><br><span class="line">    capture = cv2.VideoCapture(rtsp_src)</span><br><span class="line">    framequeue = queue.Queue(<span class="number">10</span>)</span><br><span class="line">    outputqueue = queue.Queue(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    thread = threading.Thread(</span><br><span class="line">        target=capturevideo, args=(capture, framequeue))</span><br><span class="line">    thread.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    width = int(capture.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">    height = int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">    fps = int(capture.get(cv2.CAP_PROP_FPS))</span><br><span class="line">    command = [<span class="string">'ffmpeg'</span>,</span><br><span class="line">               <span class="string">'-y'</span>,</span><br><span class="line">               <span class="string">'-f'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">               <span class="string">'-vcodec'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">               <span class="string">'-pix_fmt'</span>, <span class="string">'bgr24'</span>,</span><br><span class="line">               <span class="string">'-s'</span>, <span class="string">"&#123;&#125;x&#123;&#125;"</span>.format(width, height),</span><br><span class="line">               <span class="string">'-r'</span>, str(fps),</span><br><span class="line">               <span class="string">'-i'</span>, <span class="string">'-'</span>,</span><br><span class="line">               <span class="string">'-c:v'</span>, <span class="string">'libx264'</span>,</span><br><span class="line">               <span class="string">'-pix_fmt'</span>, <span class="string">'yuv420p'</span>,</span><br><span class="line">               <span class="string">'-preset'</span>, <span class="string">'ultrafast'</span>,</span><br><span class="line">               <span class="string">'-f'</span>, <span class="string">'rtsp'</span>,</span><br><span class="line">               rtsp_dst]</span><br><span class="line">    pipe = sp.Popen(command, stdin=sp.PIPE)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=process, args=(framequeue, outputqueue, pipe))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(framequeue, outputqueue, pipe)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> queue_id</span><br><span class="line">    model = YOLO(<span class="string">'runs/detect/helmet_model/weights/best.pt'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> framequeue.empty():</span><br><span class="line">            frame_bgr, frame_uid = framequeue.get()</span><br><span class="line">            results = model.predict(</span><br><span class="line">                frame_bgr,</span><br><span class="line">                stream=<span class="literal">False</span>,</span><br><span class="line">                save=<span class="literal">False</span>,</span><br><span class="line">                classes=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">                device=[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">                verbose=<span class="literal">False</span>,</span><br><span class="line">            )</span><br><span class="line">            names = results[<span class="number">0</span>].names</span><br><span class="line">            clses = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> results[<span class="number">0</span>].boxes.cls.tolist()]</span><br><span class="line">            boxes = results[<span class="number">0</span>].boxes.xyxy.tolist()</span><br><span class="line">            name_set = [names.get(i) <span class="keyword">for</span> i <span class="keyword">in</span> clses]</span><br><span class="line"></span><br><span class="line">            frame_bgr = visualize_det(frame_bgr, boxes, name_set)</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                time.sleep(<span class="number">0.0001</span>)</span><br><span class="line">                <span class="keyword">if</span> queue_id+<span class="number">1</span> == frame_uid:</span><br><span class="line">                    outputqueue.put(frame_bgr)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            frame = outputqueue.get()</span><br><span class="line">            pipe.stdin.write(frame.tostring())</span><br><span class="line">            queue_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    frame_id = <span class="number">0</span></span><br><span class="line">    queue_id = <span class="number">0</span></span><br><span class="line">    rtsp_url = <span class="string">'rtsp://192.168.9.164:8554/video'</span></span><br><span class="line">    rtsp_stream = <span class="string">'rtsp://192.168.9.164:8554/live'</span></span><br><span class="line">    execute_rtsp(rtsp_url, rtsp_stream)</span><br></pre></td></tr></table></figure><p>可视化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFile, ImageFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> PR</span><br><span class="line"></span><br><span class="line">font_file = os.path.join(PR, <span class="string">'visualize/SourceHanSansCN-Medium.otf'</span>)</span><br><span class="line">ImageFile.LOAD_TRUNCATED_IMAGES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_det</span><span class="params">(im, boxes, names)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(im, str):</span><br><span class="line">        im = Image.open(im)</span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">        im = cv2.cvtColor(im, cv2.COLOR_RGB2BGR)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line"></span><br><span class="line">    im = Image.fromarray(im)</span><br><span class="line">    im = im.convert(<span class="string">'RGBA'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, name <span class="keyword">in</span> enumerate(names):</span><br><span class="line">        box = boxes[i]</span><br><span class="line">        box = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> box]</span><br><span class="line">        text = name</span><br><span class="line"></span><br><span class="line">        draw = ImageDraw.Draw(im)</span><br><span class="line">        draw.text(</span><br><span class="line">            (box[<span class="number">0</span>], box[<span class="number">1</span>]),</span><br><span class="line">            text,</span><br><span class="line">            font=ImageFont.truetype(font_file, size=<span class="number">20</span>),</span><br><span class="line">            fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>))</span><br><span class="line">        draw.rectangle(</span><br><span class="line">            ((box[<span class="number">0</span>], box[<span class="number">1</span>]), (box[<span class="number">2</span>], box[<span class="number">3</span>])),</span><br><span class="line">            fill=<span class="literal">None</span>,</span><br><span class="line">            outline=(<span class="number">139</span>, <span class="number">0</span>, <span class="number">139</span>),</span><br><span class="line">            width=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    im = im.convert(<span class="string">'RGB'</span>)</span><br><span class="line">    im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">    <span class="keyword">return</span> im</span><br></pre></td></tr></table></figure><h3 id="2-多线程封装"><a href="#2-多线程封装" class="headerlink" title="2.多线程封装"></a>2.多线程封装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">from</span> visualize.detection <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamingDetectionServer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stream_src, stream_dst)</span>:</span></span><br><span class="line">        self.pipe = <span class="literal">None</span></span><br><span class="line">        self.model = <span class="literal">None</span></span><br><span class="line">        self.capture = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        self.fps = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.width = <span class="number">0</span></span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line">        self.frame_id = <span class="number">0</span></span><br><span class="line">        self.solve_id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.stream_src = stream_src</span><br><span class="line">        self.stream_dst = stream_dst</span><br><span class="line"></span><br><span class="line">        self.framequeue = queue.PriorityQueue(<span class="number">10</span>)</span><br><span class="line">        self.outputqueue = queue.PriorityQueue()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.capture = cv2.VideoCapture(self.stream_src)</span><br><span class="line">        self.fps = int(self.capture.get(cv2.CAP_PROP_FPS))</span><br><span class="line">        self.width = int(self.capture.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">        self.height = int(self.capture.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line"></span><br><span class="line">        command = [<span class="string">'ffmpeg'</span>,</span><br><span class="line">                   <span class="comment"># '-y',</span></span><br><span class="line">                   <span class="string">'-re'</span>,</span><br><span class="line">                   <span class="string">'-f'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">                   <span class="string">'-vcodec'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">                   <span class="string">'-pix_fmt'</span>, <span class="string">'bgr24'</span>,</span><br><span class="line">                   <span class="string">'-s'</span>, <span class="string">"&#123;&#125;x&#123;&#125;"</span>.format(self.width, self.height),</span><br><span class="line">                   <span class="string">'-r'</span>, str(self.fps),</span><br><span class="line">                   <span class="string">'-i'</span>, <span class="string">'-'</span>,</span><br><span class="line">                   <span class="string">'-c:v'</span>, <span class="string">'libx264'</span>,</span><br><span class="line">                   <span class="string">'-pix_fmt'</span>, <span class="string">'yuv420p'</span>,</span><br><span class="line">                   <span class="string">'-preset'</span>, <span class="string">'ultrafast'</span>,</span><br><span class="line">                   <span class="string">'-f'</span>, <span class="string">'rtsp'</span>,</span><br><span class="line">                   self.stream_dst]</span><br><span class="line">        pipe = sp.Popen(command, stdin=sp.PIPE)</span><br><span class="line"></span><br><span class="line">        capture_thread = threading.Thread(target=self.capture_video)</span><br><span class="line">        capture_thread.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            process_thread = threading.Thread(target=self.process_video)</span><br><span class="line">            process_thread.start()</span><br><span class="line"></span><br><span class="line">        output_thread = threading.Thread(target=self.output_video, args=(pipe,))</span><br><span class="line">        output_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">capture_video</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.framequeue.full():</span><br><span class="line">                time.sleep(<span class="number">0.01</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret, frame = self.capture.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                image_bgr = frame</span><br><span class="line">                self.frame_id += <span class="number">1</span></span><br><span class="line">                self.framequeue.put((self.frame_id, image_bgr))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output_video</span><span class="params">(self, pipe)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.outputqueue.empty():</span><br><span class="line">                frame_id, frame_bgr = self.outputqueue.get()</span><br><span class="line">                pipe.stdin.write(frame_bgr.tobytes())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                time.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_video</span><span class="params">(self)</span>:</span></span><br><span class="line">        model = YOLO(<span class="string">'runs/detect/helmet_model/weights/best.pt'</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.framequeue.empty():</span><br><span class="line">                <span class="keyword">with</span> lock:</span><br><span class="line">                    frame_id, frame_bgr = self.framequeue.get()</span><br><span class="line">                results = model.track(</span><br><span class="line">                    frame_bgr,</span><br><span class="line">                    stream=<span class="literal">False</span>,</span><br><span class="line">                    save=<span class="literal">False</span>,</span><br><span class="line">                    classes=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">                    device=<span class="string">"0"</span>,</span><br><span class="line">                    verbose=<span class="literal">False</span>,</span><br><span class="line">                    tracker=<span class="string">"bytetrack.yaml"</span></span><br><span class="line">                )</span><br><span class="line">                names = results[<span class="number">0</span>].names</span><br><span class="line">                clses = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> results[<span class="number">0</span>].boxes.cls.tolist()]</span><br><span class="line">                boxes = results[<span class="number">0</span>].boxes.xyxy.tolist()</span><br><span class="line">                name_set = [names.get(i) <span class="keyword">for</span> i <span class="keyword">in</span> clses]</span><br><span class="line">                frame_bgr = visualize_det_cv2(frame_bgr, boxes, name_set)</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    time.sleep(<span class="number">0.001</span>)</span><br><span class="line">                    <span class="keyword">if</span> self.solve_id == frame_id:</span><br><span class="line">                        self.outputqueue.put((frame_id, frame_bgr))</span><br><span class="line">                        self.solve_id += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    rtsp_url = input(<span class="string">'码流链接：'</span>)</span><br><span class="line">    rtsp_stream = <span class="string">'rtsp://192.168.9.164:8554/live2'</span></span><br><span class="line">    sds = StreamingDetectionServer(rtsp_url, rtsp_stream)</span><br><span class="line">    sds.run()</span><br></pre></td></tr></table></figure><h3 id="3-多进程处理视频帧（优化到极致，进一步提升算法处理速度，后续将单独开板块做出说明）"><a href="#3-多进程处理视频帧（优化到极致，进一步提升算法处理速度，后续将单独开板块做出说明）" class="headerlink" title="3.多进程处理视频帧（优化到极致，进一步提升算法处理速度，后续将单独开板块做出说明）"></a>3.多进程处理视频帧（优化到极致，进一步提升算法处理速度，后续将单独开板块做出说明）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">from</span> visualize.detection <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line">lock = multiprocessing.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Manager.register(<span class="string">'get_priorityQueue'</span>, PriorityQueue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamingDetectionServer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stream_src, stream_dst)</span>:</span></span><br><span class="line">        self.pipe = <span class="literal">None</span></span><br><span class="line">        self.model = <span class="literal">None</span></span><br><span class="line">        self.capture = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        self.fps = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.width = <span class="number">0</span></span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line">        self.frame_id = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.stream_src = stream_src</span><br><span class="line">        self.stream_dst = stream_dst</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        q = queue.PriorityQueue() <span class="comment"># 用于将多进程队列中的数据同步到线程主线程中的优先级队列，实现按帧出队列</span></span><br><span class="line">        m = Manager()</span><br><span class="line">        m.start()</span><br><span class="line">        <span class="comment"># framequeue = multiprocessing.Queue(10)</span></span><br><span class="line">        framequeue = torch.multiprocessing.Queue(<span class="number">10</span>)</span><br><span class="line">        outputqueue = multiprocessing.Queue()</span><br><span class="line">        <span class="comment"># outputqueue = m.get_priorityQueue() # 继承多线程优先级队列的多进程队列，处理时间过长，放弃</span></span><br><span class="line">        self.capture = cv2.VideoCapture(self.stream_src)</span><br><span class="line">        self.fps = int(self.capture.get(cv2.CAP_PROP_FPS))</span><br><span class="line">        self.width = int(self.capture.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">        self.height = int(self.capture.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line"></span><br><span class="line">        command = [<span class="string">'ffmpeg'</span>,</span><br><span class="line">                   <span class="comment"># '-y',</span></span><br><span class="line">                   <span class="string">'-re'</span>,</span><br><span class="line">                   <span class="string">'-f'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">                   <span class="string">'-vcodec'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">                   <span class="string">'-pix_fmt'</span>, <span class="string">'bgr24'</span>,</span><br><span class="line">                   <span class="string">'-s'</span>, <span class="string">"&#123;&#125;x&#123;&#125;"</span>.format(self.width, self.height),</span><br><span class="line">                   <span class="string">'-r'</span>, str(self.fps),</span><br><span class="line">                   <span class="string">'-i'</span>, <span class="string">'-'</span>,</span><br><span class="line">                   <span class="string">'-c:v'</span>, <span class="string">'libx264'</span>,</span><br><span class="line">                   <span class="string">'-pix_fmt'</span>, <span class="string">'yuv420p'</span>,</span><br><span class="line">                   <span class="string">'-preset'</span>, <span class="string">'ultrafast'</span>,</span><br><span class="line">                   <span class="string">'-f'</span>, <span class="string">'rtsp'</span>,</span><br><span class="line">                   self.stream_dst]</span><br><span class="line">        pipe = sp.Popen(command, stdin=sp.PIPE)</span><br><span class="line"></span><br><span class="line">        solve_id = multiprocessing.Value(<span class="string">'i'</span>, <span class="number">1</span>)  <span class="comment"># 使用进程全局变量记录处理视频帧的顺序</span></span><br><span class="line"></span><br><span class="line">        capture_thread = threading.Thread(target=self.capture_video, args=(framequeue,))</span><br><span class="line">        capture_thread.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            process_thread = multiprocessing.Process(target=self.process_video, args=(framequeue, outputqueue, solve_id))</span><br><span class="line">            process_thread.start()</span><br><span class="line"></span><br><span class="line">        queue_thread = threading.Thread(target=self.make_queue, args=(outputqueue, q))</span><br><span class="line">        queue_thread.start()</span><br><span class="line"></span><br><span class="line">        output_thread = threading.Thread(target=self.output_video, args=(pipe, q))</span><br><span class="line">        output_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取码流</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">capture_video</span><span class="params">(self, framequeue)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> framequeue.full():</span><br><span class="line">                time.sleep(<span class="number">0.01</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ret, frame = self.capture.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                image_bgr = frame</span><br><span class="line">                image_bgr = torch.from_numpy(image_bgr)</span><br><span class="line">                image_bgr.share_memory_()</span><br><span class="line">                self.frame_id += <span class="number">1</span></span><br><span class="line">                framequeue.put((self.frame_id, image_bgr))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多进程队列数据同步至优先级队列</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_queue</span><span class="params">(outputqueue, q)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> outputqueue.empty():</span><br><span class="line">                frame_id, frame_bgr = outputqueue.get()</span><br><span class="line">                q.put((frame_id, frame_bgr))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                time.sleep(<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从优先级队列推流</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output_video</span><span class="params">(pipe, q)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> q.qsize() &gt;= <span class="number">10</span>:</span><br><span class="line">                frame_id, frame_bgr = q.get()</span><br><span class="line">                pipe.stdin.write(frame_bgr.tobytes())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                time.sleep(<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多进程</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_video</span><span class="params">(framequeue, outputqueue, solve_id)</span>:</span></span><br><span class="line">        model = YOLO(<span class="string">'runs/detect/helmet_model/weights/best.pt'</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> framequeue.empty():</span><br><span class="line">                <span class="keyword">with</span> lock:</span><br><span class="line">                    frame_id, frame_bgr = framequeue.get()</span><br><span class="line">                frame_bgr = frame_bgr.numpy()</span><br><span class="line">                results = model.track(</span><br><span class="line">                    frame_bgr,</span><br><span class="line">                    stream=<span class="literal">False</span>,</span><br><span class="line">                    save=<span class="literal">False</span>,</span><br><span class="line">                    classes=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">                    device=<span class="string">"0"</span>,</span><br><span class="line">                    batch=<span class="number">16</span>,</span><br><span class="line">                    verbose=<span class="literal">False</span>,</span><br><span class="line">                    tracker=<span class="string">"bytetrack.yaml"</span></span><br><span class="line">                )</span><br><span class="line">                names = results[<span class="number">0</span>].names</span><br><span class="line">                clses = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> results[<span class="number">0</span>].boxes.cls.tolist()]</span><br><span class="line">                boxes = results[<span class="number">0</span>].boxes.xyxy.tolist()</span><br><span class="line">                name_set = [names.get(i) <span class="keyword">for</span> i <span class="keyword">in</span> clses]</span><br><span class="line">                frame_bgr = visualize_det_cv2(frame_bgr, boxes, name_set)</span><br><span class="line">                <span class="comment"># 通过共享实现id实现优先级入队</span></span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    <span class="keyword">if</span> solve_id.value == frame_id:</span><br><span class="line">                        outputqueue.put((frame_id, frame_bgr))</span><br><span class="line">                        solve_id.value += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    rtsp_url = input(<span class="string">'码流链接：'</span>)</span><br><span class="line">    rtsp_stream = <span class="string">'rtsp://192.168.9.164:8554/live'</span></span><br><span class="line">    sds = StreamingDetectionServer(rtsp_url, rtsp_stream)</span><br><span class="line">    sds.run()</span><br></pre></td></tr></table></figure><p><img src="/2024/03/07/RTSP推拉流服务搭建/8.png" alt></p><p><img src="/2024/03/07/RTSP推拉流服务搭建/9.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、基础服务搭建（windows）&quot;&gt;&lt;a href=&quot;#一、基础服务搭建（windows）&quot; class=&quot;headerlink&quot; title=&quot;一、基础服务搭建（windows）&quot;&gt;&lt;/a&gt;一、基础服务搭建（windows）&lt;/h2&gt;&lt;h3 id=&quot;1-下载RTSP服务器&quot;&gt;&lt;a href=&quot;#1-下载RTSP服务器&quot; class=&quot;headerlink&quot; title=&quot;1.下载RTSP服务器&quot;&gt;&lt;/a&gt;1.下载RTSP服务器&lt;/h3&gt;&lt;p&gt;下载链接：&lt;a href=&quot;https://github.com/aler9/rtsp-simple-server/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/aler9/rtsp-simple-server/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/03/07/RTSP推拉流服务搭建/1.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-下载FFmpeg工具&quot;&gt;&lt;a href=&quot;#2-下载FFmpeg工具&quot; class=&quot;headerlink&quot; title=&quot;2.下载FFmpeg工具&quot;&gt;&lt;/a&gt;2.下载FFmpeg工具&lt;/h3&gt;&lt;p&gt;下载链接：&lt;a href=&quot;https://github.com/BtbN/FFmpeg-Builds/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/BtbN/FFmpeg-Builds/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/03/07/RTSP推拉流服务搭建/2.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-启动服务器&quot;&gt;&lt;a href=&quot;#3-启动服务器&quot; class=&quot;headerlink&quot; title=&quot;3.启动服务器&quot;&gt;&lt;/a&gt;3.启动服务器&lt;/h3&gt;&lt;p&gt;进入RTSP服务器路径，控制台执行&lt;code&gt;.\mediamtx.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/03/07/RTSP推拉流服务搭建/3.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="流媒体" scheme="http://yoursite.com/categories/流媒体/"/>
    
    
    <category term="yolov8" scheme="http://yoursite.com/tags/yolov8/"/>
    
    <category term="RTSP" scheme="http://yoursite.com/tags/RTSP/"/>
    
  </entry>
  
  <entry>
    <title>yolov8-pose：关键点姿态检测</title>
    <link href="http://yoursite.com/2024/01/30/yolov8-pose/"/>
    <id>http://yoursite.com/2024/01/30/yolov8-pose/</id>
    <published>2024-01-30T04:00:00.000Z</published>
    <updated>2024-06-28T07:31:50.162Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="环境-amp-安装"><a href="#环境-amp-安装" class="headerlink" title="环境&amp;安装"></a>环境&amp;安装</h2><p>同上文yolov8：火灾检测</p><p>模型使用<code>yolov8n-pose</code></p><h2 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h2><h3 id="标注工具：labelme"><a href="#标注工具：labelme" class="headerlink" title="标注工具：labelme"></a>标注工具：labelme</h3><p>对图像中的目标（人物）及其关键点进行标记，包括1个目标类别和17个关键点类别</p><p><img src="/2024/01/30/yolov8-pose/A.png" alt></p><h3 id="数据格式转换"><a href="#数据格式转换" class="headerlink" title="数据格式转换"></a>数据格式转换</h3><p>将labelme数据格式转为yolo格式，通用转换代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">TODO:</span></span></span><br><span class="line"><span class="comment"># 参考yolov8-火灾检测，未完待续</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="创建训练yaml文件"><a href="#创建训练yaml文件" class="headerlink" title="创建训练yaml文件"></a>创建训练yaml文件</h3><p>参考<code>yolov8n-pose.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">/exp/work/video/yolov8/datasets/human-pose/images/train</span> <span class="comment">#训练集文件夹</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">/exp/work/video/yolov8/datasets/human-pose/images/val</span> <span class="comment"># 验证集文件夹</span></span><br><span class="line"><span class="attr">test:</span> <span class="string">/exp/work/video/yolov8/datasets/human-pose/images/val</span> <span class="comment"># 测试集文件夹</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">1</span> <span class="comment"># 分类数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键点，每个关键点有 X Y 是否可见 三个参数</span></span><br><span class="line"><span class="comment"># 可见性：2-可见不遮挡 1-遮挡 0-没有点</span></span><br><span class="line"><span class="attr">kpt_shape:</span> <span class="string">[17,</span> <span class="number">3</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 框的类别（对于关键点检测，只有一类）</span></span><br><span class="line"><span class="attr">names:</span></span><br><span class="line">  <span class="attr">0:</span> <span class="string">people</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">model = YOLO(<span class="string">'yolov8n.pt'</span>)  <span class="comment"># 加载预训练模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 双卡训练</span></span><br><span class="line">model.train(</span><br><span class="line">    data=<span class="string">'datasets/human-pose/data/human-pose.yaml'</span>,</span><br><span class="line">    epochs=<span class="number">300</span>,</span><br><span class="line">    device=[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动验证</span></span><br><span class="line">model.val()</span><br></pre></td></tr></table></figure><h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><h3 id="导包、模型加载-amp-GPU加载"><a href="#导包、模型加载-amp-GPU加载" class="headerlink" title="导包、模型加载 &amp; GPU加载"></a>导包、模型加载 &amp; GPU加载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># GPU</span></span><br><span class="line">os.environ[<span class="string">'CUDA_VISIBLE_DEVICES'</span>] = <span class="string">'0,1'</span></span><br><span class="line"><span class="comment"># device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')</span></span><br><span class="line"><span class="comment"># print('using device:', device)</span></span><br><span class="line"></span><br><span class="line">model = YOLO(<span class="string">'yolov8n-pose.pt'</span>)</span><br><span class="line"><span class="comment"># model.to(device)</span></span><br></pre></td></tr></table></figure><h3 id="设计样式参数"><a href="#设计样式参数" class="headerlink" title="设计样式参数"></a>设计样式参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测框（rectangle）可视化配置</span></span><br><span class="line">bbox_color = (<span class="number">150</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 框的 BGR 颜色</span></span><br><span class="line">bbox_thickness = <span class="number">2</span>  <span class="comment"># 框的线宽</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测框类别文字</span></span><br><span class="line">bbox_labelstr = &#123;</span><br><span class="line">    <span class="string">'font_size'</span>: <span class="number">1</span>,  <span class="comment"># 字体大小</span></span><br><span class="line">    <span class="string">'font_thickness'</span>: <span class="number">2</span>,  <span class="comment"># 字体粗细</span></span><br><span class="line">    <span class="string">'offset_x'</span>: <span class="number">0</span>,  <span class="comment"># X 方向，文字偏移距离，向右为正</span></span><br><span class="line">    <span class="string">'offset_y'</span>: <span class="number">-10</span>,  <span class="comment"># Y 方向，文字偏移距离，向下为正</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键点 BGR 配色</span></span><br><span class="line">kpt_color_map = &#123;</span><br><span class="line">    <span class="number">0</span>: &#123;<span class="string">'name'</span>: <span class="string">'Nose'</span>, <span class="string">'color'</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 鼻尖</span></span><br><span class="line">    <span class="number">1</span>: &#123;<span class="string">'name'</span>: <span class="string">'Right Eye'</span>, <span class="string">'color'</span>: [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 右边眼睛</span></span><br><span class="line">    <span class="number">2</span>: &#123;<span class="string">'name'</span>: <span class="string">'Left Eye'</span>, <span class="string">'color'</span>: [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 左边眼睛</span></span><br><span class="line">    <span class="number">3</span>: &#123;<span class="string">'name'</span>: <span class="string">'Right Ear'</span>, <span class="string">'color'</span>: [<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 右边耳朵</span></span><br><span class="line">    <span class="number">4</span>: &#123;<span class="string">'name'</span>: <span class="string">'Left Ear'</span>, <span class="string">'color'</span>: [<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 左边耳朵</span></span><br><span class="line">    <span class="number">5</span>: &#123;<span class="string">'name'</span>: <span class="string">'Right Shoulder'</span>, <span class="string">'color'</span>: [<span class="number">193</span>, <span class="number">182</span>, <span class="number">255</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 右边肩膀</span></span><br><span class="line">    <span class="number">6</span>: &#123;<span class="string">'name'</span>: <span class="string">'Left Shoulder'</span>, <span class="string">'color'</span>: [<span class="number">193</span>, <span class="number">182</span>, <span class="number">255</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 左边肩膀</span></span><br><span class="line">    <span class="number">7</span>: &#123;<span class="string">'name'</span>: <span class="string">'Right Elbow'</span>, <span class="string">'color'</span>: [<span class="number">16</span>, <span class="number">144</span>, <span class="number">247</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 右侧胳膊肘</span></span><br><span class="line">    <span class="number">8</span>: &#123;<span class="string">'name'</span>: <span class="string">'Left Elbow'</span>, <span class="string">'color'</span>: [<span class="number">16</span>, <span class="number">144</span>, <span class="number">247</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 左侧胳膊肘</span></span><br><span class="line">    <span class="number">9</span>: &#123;<span class="string">'name'</span>: <span class="string">'Right Wrist'</span>, <span class="string">'color'</span>: [<span class="number">1</span>, <span class="number">240</span>, <span class="number">255</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 右侧手腕</span></span><br><span class="line">    <span class="number">10</span>: &#123;<span class="string">'name'</span>: <span class="string">'Left Wrist'</span>, <span class="string">'color'</span>: [<span class="number">1</span>, <span class="number">240</span>, <span class="number">255</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 左侧手腕</span></span><br><span class="line">    <span class="number">11</span>: &#123;<span class="string">'name'</span>: <span class="string">'Right Hip'</span>, <span class="string">'color'</span>: [<span class="number">140</span>, <span class="number">47</span>, <span class="number">240</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 右侧胯</span></span><br><span class="line">    <span class="number">12</span>: &#123;<span class="string">'name'</span>: <span class="string">'Left Hip'</span>, <span class="string">'color'</span>: [<span class="number">140</span>, <span class="number">47</span>, <span class="number">240</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 左侧胯</span></span><br><span class="line">    <span class="number">13</span>: &#123;<span class="string">'name'</span>: <span class="string">'Right Knee'</span>, <span class="string">'color'</span>: [<span class="number">223</span>, <span class="number">155</span>, <span class="number">60</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 右侧膝盖</span></span><br><span class="line">    <span class="number">14</span>: &#123;<span class="string">'name'</span>: <span class="string">'Left Knee'</span>, <span class="string">'color'</span>: [<span class="number">223</span>, <span class="number">155</span>, <span class="number">60</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 左侧膝盖</span></span><br><span class="line">    <span class="number">15</span>: &#123;<span class="string">'name'</span>: <span class="string">'Right Ankle'</span>, <span class="string">'color'</span>: [<span class="number">139</span>, <span class="number">0</span>, <span class="number">0</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 右侧脚踝</span></span><br><span class="line">    <span class="number">16</span>: &#123;<span class="string">'name'</span>: <span class="string">'Left Ankle'</span>, <span class="string">'color'</span>: [<span class="number">139</span>, <span class="number">0</span>, <span class="number">0</span>], <span class="string">'radius'</span>: <span class="number">6</span>&#125;,  <span class="comment"># 左侧脚踝</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点类别文字</span></span><br><span class="line">kpt_labelstr = &#123;</span><br><span class="line">    <span class="string">'font_size'</span>: <span class="number">0.5</span>,  <span class="comment"># 字体大小</span></span><br><span class="line">    <span class="string">'font_thickness'</span>: <span class="number">1</span>,  <span class="comment"># 字体粗细</span></span><br><span class="line">    <span class="string">'offset_x'</span>: <span class="number">10</span>,  <span class="comment"># X 方向，文字偏移距离，向右为正</span></span><br><span class="line">    <span class="string">'offset_y'</span>: <span class="number">0</span>,  <span class="comment"># Y 方向，文字偏移距离，向下为正</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 骨架连接 BGR 配色</span></span><br><span class="line">skeleton_map = [</span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">15</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">13</span>, <span class="string">'color'</span>: [<span class="number">0</span>, <span class="number">100</span>, <span class="number">255</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 右侧脚踝-右侧膝盖</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">13</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">11</span>, <span class="string">'color'</span>: [<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 右侧膝盖-右侧胯</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">16</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">14</span>, <span class="string">'color'</span>: [<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 左侧脚踝-左侧膝盖</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">14</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">12</span>, <span class="string">'color'</span>: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 左侧膝盖-左侧胯</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">11</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">12</span>, <span class="string">'color'</span>: [<span class="number">122</span>, <span class="number">160</span>, <span class="number">255</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 右侧胯-左侧胯</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">5</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">11</span>, <span class="string">'color'</span>: [<span class="number">139</span>, <span class="number">0</span>, <span class="number">139</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 右边肩膀-右侧胯</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">6</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">12</span>, <span class="string">'color'</span>: [<span class="number">237</span>, <span class="number">149</span>, <span class="number">100</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 左边肩膀-左侧胯</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">5</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">6</span>, <span class="string">'color'</span>: [<span class="number">152</span>, <span class="number">251</span>, <span class="number">152</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 右边肩膀-左边肩膀</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">5</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">7</span>, <span class="string">'color'</span>: [<span class="number">148</span>, <span class="number">0</span>, <span class="number">69</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 右边肩膀-右侧胳膊肘</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">6</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">8</span>, <span class="string">'color'</span>: [<span class="number">0</span>, <span class="number">75</span>, <span class="number">255</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 左边肩膀-左侧胳膊肘</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">7</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">9</span>, <span class="string">'color'</span>: [<span class="number">56</span>, <span class="number">230</span>, <span class="number">25</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 右侧胳膊肘-右侧手腕</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">8</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">10</span>, <span class="string">'color'</span>: [<span class="number">0</span>, <span class="number">240</span>, <span class="number">240</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 左侧胳膊肘-左侧手腕</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">1</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">2</span>, <span class="string">'color'</span>: [<span class="number">224</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 右边眼睛-左边眼睛</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">0</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">1</span>, <span class="string">'color'</span>: [<span class="number">47</span>, <span class="number">255</span>, <span class="number">173</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 鼻尖-左边眼睛</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">0</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">2</span>, <span class="string">'color'</span>: [<span class="number">203</span>, <span class="number">192</span>, <span class="number">255</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 鼻尖-左边眼睛</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">1</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">3</span>, <span class="string">'color'</span>: [<span class="number">196</span>, <span class="number">75</span>, <span class="number">255</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 右边眼睛-右边耳朵</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">2</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">4</span>, <span class="string">'color'</span>: [<span class="number">86</span>, <span class="number">0</span>, <span class="number">25</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 左边眼睛-左边耳朵</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">3</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">5</span>, <span class="string">'color'</span>: [<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;,  <span class="comment"># 右边耳朵-右边肩膀</span></span><br><span class="line">    &#123;<span class="string">'srt_kpt_id'</span>: <span class="number">4</span>, <span class="string">'dst_kpt_id'</span>: <span class="number">6</span>, <span class="string">'color'</span>: [<span class="number">255</span>, <span class="number">18</span>, <span class="number">200</span>], <span class="string">'thickness'</span>: <span class="number">2</span>&#125;  <span class="comment"># 左边耳朵-左边肩膀</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="视频处理函数"><a href="#视频处理函数" class="headerlink" title="视频处理函数"></a>视频处理函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_frame</span><span class="params">(img_bgr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    输入摄像头画面 bgr-array，输出图像 bgr-array</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    results = model(img_bgr, verbose=<span class="literal">False</span>)  <span class="comment"># verbose设置为False，不单独打印每一帧预测结果</span></span><br><span class="line">    <span class="comment"># 预测框的个数</span></span><br><span class="line">    num_bbox = len(results[<span class="number">0</span>].boxes.cls)</span><br><span class="line">    <span class="comment"># 预测框的 xyxy 坐标</span></span><br><span class="line">    bboxes_xyxy = results[<span class="number">0</span>].boxes.xyxy.cpu().numpy().astype(<span class="string">'uint32'</span>)</span><br><span class="line">    <span class="comment"># 关键点的 xy 坐标</span></span><br><span class="line">    bboxes_keypoints = results[<span class="number">0</span>].keypoints.data.cpu().numpy()</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(num_bbox):  <span class="comment"># 遍历每个框</span></span><br><span class="line">        <span class="comment"># 获取该框坐标</span></span><br><span class="line">        bbox_xyxy = bboxes_xyxy[idx]</span><br><span class="line">        <span class="comment"># 获取框的预测类别(对于关键点检测，只有一个类别)</span></span><br><span class="line">        bbox_label = results[<span class="number">0</span>].names[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 画框</span></span><br><span class="line">        img_bgr = cv2.rectangle(img_bgr, (bbox_xyxy[<span class="number">0</span>], bbox_xyxy[<span class="number">1</span>]), (bbox_xyxy[<span class="number">2</span>], bbox_xyxy[<span class="number">3</span>]), bbox_color,</span><br><span class="line">                                bbox_thickness)</span><br><span class="line">        <span class="comment"># 写框类别文字：图片，文字字符串，文字左上角坐标，字体，字体大小，颜色，字体粗细</span></span><br><span class="line">        img_bgr = cv2.putText(img_bgr, bbox_label,</span><br><span class="line">                              (bbox_xyxy[<span class="number">0</span>] + bbox_labelstr[<span class="string">'offset_x'</span>], bbox_xyxy[<span class="number">1</span>] + bbox_labelstr[<span class="string">'offset_y'</span>]),</span><br><span class="line">                              cv2.FONT_HERSHEY_SIMPLEX, bbox_labelstr[<span class="string">'font_size'</span>], bbox_color,</span><br><span class="line">                              bbox_labelstr[<span class="string">'font_thickness'</span>])</span><br><span class="line">        bbox_keypoints = bboxes_keypoints[idx]  <span class="comment"># 该框所有关键点坐标和置信度</span></span><br><span class="line">        <span class="comment"># 画该框的骨架连接</span></span><br><span class="line">        <span class="keyword">for</span> skeleton <span class="keyword">in</span> skeleton_map:</span><br><span class="line">            <span class="comment"># 获取起始点坐标</span></span><br><span class="line">            srt_kpt_id = skeleton[<span class="string">'srt_kpt_id'</span>]</span><br><span class="line">            srt_kpt_x = round(bbox_keypoints[srt_kpt_id][<span class="number">0</span>])</span><br><span class="line">            srt_kpt_y = round(bbox_keypoints[srt_kpt_id][<span class="number">1</span>])</span><br><span class="line">            srt_kpt_conf = bbox_keypoints[srt_kpt_id][<span class="number">2</span>]  <span class="comment"># 获取起始点置信度</span></span><br><span class="line">            <span class="comment"># print(srt_kpt_conf)</span></span><br><span class="line">            <span class="comment"># 获取终止点坐标</span></span><br><span class="line">            dst_kpt_id = skeleton[<span class="string">'dst_kpt_id'</span>]</span><br><span class="line">            dst_kpt_x = round(bbox_keypoints[dst_kpt_id][<span class="number">0</span>])</span><br><span class="line">            dst_kpt_y = round(bbox_keypoints[dst_kpt_id][<span class="number">1</span>])</span><br><span class="line">            dst_kpt_conf = bbox_keypoints[dst_kpt_id][<span class="number">2</span>]  <span class="comment"># 获取终止点置信度</span></span><br><span class="line">            <span class="comment"># print(dst_kpt_conf)</span></span><br><span class="line">            <span class="comment"># 获取骨架连接颜色</span></span><br><span class="line">            skeleton_color = skeleton[<span class="string">'color'</span>]</span><br><span class="line">            <span class="comment"># 获取骨架连接线宽</span></span><br><span class="line">            skeleton_thickness = skeleton[<span class="string">'thickness'</span>]</span><br><span class="line">            <span class="comment"># 如果起始点和终止点的置信度都高于阈值，才画骨架连接</span></span><br><span class="line">            <span class="keyword">if</span> srt_kpt_conf &gt; <span class="number">0.5</span> <span class="keyword">and</span> dst_kpt_conf &gt; <span class="number">0.5</span>:</span><br><span class="line">                <span class="comment"># 画骨架连接</span></span><br><span class="line">                img_bgr = cv2.line(img_bgr, (srt_kpt_x, srt_kpt_y), (dst_kpt_x, dst_kpt_y), color=skeleton_color,</span><br><span class="line">                                   thickness=skeleton_thickness)</span><br><span class="line">        <span class="comment"># 画该框的关键点</span></span><br><span class="line">        <span class="keyword">for</span> kpt_id <span class="keyword">in</span> kpt_color_map:</span><br><span class="line">            <span class="comment"># 获取该关键点的颜色、半径、XY坐标</span></span><br><span class="line">            kpt_color = kpt_color_map[kpt_id][<span class="string">'color'</span>]</span><br><span class="line">            kpt_radius = kpt_color_map[kpt_id][<span class="string">'radius'</span>]</span><br><span class="line">            kpt_x = round(bbox_keypoints[kpt_id][<span class="number">0</span>])</span><br><span class="line">            kpt_y = round(bbox_keypoints[kpt_id][<span class="number">1</span>])</span><br><span class="line">            kpt_conf = bbox_keypoints[kpt_id][<span class="number">2</span>]  <span class="comment"># 获取该关键点置信度</span></span><br><span class="line">            <span class="keyword">if</span> kpt_conf &gt; <span class="number">0.5</span>:</span><br><span class="line">                <span class="comment"># 画圆：图片、XY坐标、半径、颜色、线宽(-1为填充)</span></span><br><span class="line">                img_bgr = cv2.circle(img_bgr, (kpt_x, kpt_y), kpt_radius, kpt_color, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> img_bgr</span><br></pre></td></tr></table></figure><h3 id="CV2处理函数"><a href="#CV2处理函数" class="headerlink" title="CV2处理函数"></a>CV2处理函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_video</span><span class="params">(input_path=<span class="string">'video/robot.mp4'</span>)</span>:</span></span><br><span class="line">    file_head = input_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">    output_path = <span class="string">"out-"</span> + file_head</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'视频开始处理'</span>, input_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取视频总帧数</span></span><br><span class="line">    cap = cv2.VideoCapture(input_path)</span><br><span class="line">    frame_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        success, frame = cap.read()</span><br><span class="line">        frame_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    print(<span class="string">'视频总帧数为'</span>, frame_count)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># cv2.namedWindow('Crack Detection and Measurement Video Processing')</span></span><br><span class="line">    cap = cv2.VideoCapture(input_path)</span><br><span class="line">    frame_size = (cap.get(cv2.CAP_PROP_FRAME_WIDTH), cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fourcc = int(cap.get(cv2.CAP_PROP_FOURCC))</span></span><br><span class="line">    <span class="comment"># fourcc = cv2.VideoWriter_fourcc(*'XVID')</span></span><br><span class="line">    fourcc = cv2.VideoWriter_fourcc(*<span class="string">'mp4v'</span>)</span><br><span class="line">    fps = cap.get(cv2.CAP_PROP_FPS)</span><br><span class="line"></span><br><span class="line">    out = cv2.VideoWriter(output_path, fourcc, fps, (int(frame_size[<span class="number">0</span>]), int(frame_size[<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进度条绑定视频总帧数</span></span><br><span class="line">    <span class="keyword">with</span> tqdm(total=frame_count - <span class="number">1</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="comment"># noinspection PyBroadException</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">                success, frame = cap.read()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># noinspection PyBroadException</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    frame = process_frame(frame)</span><br><span class="line">                <span class="keyword">except</span> Exception:</span><br><span class="line">                    print(<span class="string">'error'</span>)</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> success:</span><br><span class="line">                    <span class="comment"># cv2.imshow('Video Processing', frame)</span></span><br><span class="line">                    out.write(frame)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 进度条更新一帧</span></span><br><span class="line">                    pbar.update(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># if cv2.waitKey(1) &amp; 0xFF == ord('q'):</span></span><br><span class="line">                <span class="comment"># break</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">'中途中断'</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    out.release()</span><br><span class="line">    cap.release()</span><br><span class="line">    print(<span class="string">'视频已保存'</span>, output_path)</span><br></pre></td></tr></table></figure><h3 id="预测-1"><a href="#预测-1" class="headerlink" title="预测"></a>预测</h3><p>将代码整合以后，执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    generate_video(input_path=<span class="string">'video/test.mp4'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;环境-amp-安装&quot;&gt;&lt;a href=&quot;#环境-amp-安装&quot; class=&quot;headerlink&quot; title=&quot;环境&amp;amp;安装&quot;&gt;&lt;/a&gt;环境&amp;amp;安装&lt;/h2&gt;&lt;p&gt;同上文yolov8：火灾检测&lt;/p&gt;
&lt;p&gt;模型使用&lt;code&gt;yolov8n-pose&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据标注&quot;&gt;&lt;a href=&quot;#数据标注&quot; class=&quot;headerlink&quot; title=&quot;数据标注&quot;&gt;&lt;/a&gt;数据标注&lt;/h2&gt;&lt;h3 id=&quot;标注工具：labelme&quot;&gt;&lt;a href=&quot;#标注工具：labelme&quot; class=&quot;headerlink&quot; title=&quot;标注工具：labelme&quot;&gt;&lt;/a&gt;标注工具：labelme&lt;/h3&gt;&lt;p&gt;对图像中的目标（人物）及其关键点进行标记，包括1个目标类别和17个关键点类别&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/01/30/yolov8-pose/A.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;数据格式转换&quot;&gt;&lt;a href=&quot;#数据格式转换&quot; class=&quot;headerlink&quot; title=&quot;数据格式转换&quot;&gt;&lt;/a&gt;数据格式转换&lt;/h3&gt;&lt;p&gt;将labelme数据格式转为yolo格式，通用转换代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 参考yolov8-火灾检测，未完待续&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建训练yaml文件&quot;&gt;&lt;a href=&quot;#创建训练yaml文件&quot; class=&quot;headerlink&quot; title=&quot;创建训练yaml文件&quot;&gt;&lt;/a&gt;创建训练yaml文件&lt;/h3&gt;&lt;p&gt;参考&lt;code&gt;yolov8n-pose.yaml&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;train:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/exp/work/video/yolov8/datasets/human-pose/images/train&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#训练集文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;val:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/exp/work/video/yolov8/datasets/human-pose/images/val&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 验证集文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;test:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/exp/work/video/yolov8/datasets/human-pose/images/val&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 测试集文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;nc:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 分类数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 关键点，每个关键点有 X Y 是否可见 三个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 可见性：2-可见不遮挡 1-遮挡 0-没有点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kpt_shape:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;[17,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 框的类别（对于关键点检测，只有一类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;names:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;0:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;people&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="关键点检测" scheme="http://yoursite.com/categories/关键点检测/"/>
    
    
    <category term="yolov8" scheme="http://yoursite.com/tags/yolov8/"/>
    
    <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>yolov8-火灾检测</title>
    <link href="http://yoursite.com/2024/01/25/yolov8%EF%BC%9A%E7%81%AB%E7%81%BE%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2024/01/25/yolov8%EF%BC%9A%E7%81%AB%E7%81%BE%E6%A3%80%E6%B5%8B/</id>
    <published>2024-01-25T09:23:20.000Z</published>
    <updated>2024-02-07T01:54:57.353Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h3><ul><li><font color="gold">NVIDIA 3090*2</font></li><li><font color="gold">显卡驱动 535.104.05</font></li><li><font color="gold">CUDA版本 12.2</font></li><li><font color="gold">CUDAtoolkit</font> (cuda_12.2.2_535.104.05_linux)</li><li><font color="gold">cuDNN (v8.9.7)</font></li></ul><h3 id="yolo版本"><a href="#yolo版本" class="headerlink" title="yolo版本"></a>yolo版本</h3><ul><li><font color="gold">v8.1.5</font> (ultralytics yolov8)</li></ul><h3 id="pytorch版本"><a href="#pytorch版本" class="headerlink" title="pytorch版本"></a>pytorch版本</h3><ul><li><font color="gold">v2.1.2</font></li></ul><h3 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h3><ul><li><font color="gold">CentOS7.9</font></li><li><font color="gold">anaconda3</font></li><li><font color="gold">python3.9</font></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>源码主页：<a href="https://github.com/ultralytics/ultralytics" target="_blank" rel="noopener">https://github.com/ultralytics/ultralytics</a></p><p>官方文档：<a href="https://docs.ultralytics.com/zh" target="_blank" rel="noopener">https://docs.ultralytics.com/zh</a></p><p><img src="/2024/01/25/yolov8：火灾检测/1.png" alt></p><h3 id="克隆源码"><a href="#克隆源码" class="headerlink" title="克隆源码"></a>克隆源码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://hub.nuaa.cf/ultralytics/ultralytics.git</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pip install ultralytics -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><h3 id="环境验证"><a href="#环境验证" class="headerlink" title="环境验证"></a>环境验证</h3><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ultralytics</span><br><span class="line">ultralytics.checks()</span><br></pre></td></tr></table></figure><p>cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yolo predict model=yolov8n.pt source=ultralytics/assets/zidane.jpg</span><br></pre></td></tr></table></figure><p>执行完毕后得到输出的结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(py39_yolov8) [root@jdz yolov8]# yolo predict model=yolov8n.pt source=ultralytics/assets/zidane.jpg </span><br><span class="line">Ultralytics YOLOv8.1.5 🚀 Python-3.9.18 torch-2.1.2+cu121 CUDA:0 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">YOLOv8n summary (fused): 168 layers, 3151904 parameters, 0 gradients, 8.7 GFLOPs</span><br><span class="line"></span><br><span class="line">image 1/1 /exp/work/video/yolov8/ultralytics/assets/zidane.jpg: 384x640 2 persons, 1 tie, 216.9ms</span><br><span class="line">Speed: 7.3ms preprocess, 216.9ms inference, 762.4ms postprocess per image at shape (1, 3, 384, 640)</span><br><span class="line">Results saved to runs/detect/predict</span><br><span class="line">💡 Learn more at https://docs.ultralytics.com/modes/predict</span><br></pre></td></tr></table></figure><p>将在<code>Results saved to runs/detect/predict</code>目录下找到输出结果</p><a id="more"></a><p><img src="/2024/01/25/yolov8：火灾检测/2.png" alt></p><p>至此，已验证基础环境正常工作。</p><h2 id="训练集"><a href="#训练集" class="headerlink" title="训练集"></a>训练集</h2><p>前往kaggle官网寻找火焰训练集，这里使用Fire and Smoke Dataset数据集（<a href="https://www.kaggle.com/datasets/dataclusterlabs/fire-and-smoke-dataset" target="_blank" rel="noopener">https://www.kaggle.com/datasets/dataclusterlabs/fire-and-smoke-dataset</a>）</p><p>数据集包含烟、火图像共100张</p><p><img src="/2024/01/25/yolov8：火灾检测/3.png" alt></p><p><img src="/2024/01/25/yolov8：火灾检测/4.png" alt></p><h2 id="数据标注"><a href="#数据标注" class="headerlink" title="数据标注"></a>数据标注</h2><h3 id="标注工具：labelme"><a href="#标注工具：labelme" class="headerlink" title="标注工具：labelme"></a>标注工具：labelme</h3><p>对图像中的火焰和烟雾进行矩形标记，将数据的label分为两类：0-火焰；1-烟雾</p><p><img src="/2024/01/25/yolov8：火灾检测/5.png" alt></p><h3 id="数据格式转换"><a href="#数据格式转换" class="headerlink" title="数据格式转换"></a>数据格式转换</h3><p>将labelme数据格式转为yolo格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> PR</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集目录</span></span><br><span class="line">Dataset_root = os.path.join(PR, <span class="string">'datasets/protective_clothing'</span>)</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">fr'<span class="subst">&#123;Dataset_root&#125;</span>/images'</span>)</span><br><span class="line">test_frac = <span class="number">0.2</span>  <span class="comment"># 测试集比例</span></span><br><span class="line">random.seed(<span class="number">123</span>) <span class="comment"># 随机数种子，便于复现</span></span><br><span class="line"></span><br><span class="line">img_paths = os.listdir(<span class="string">fr'<span class="subst">&#123;Dataset_root&#125;</span>/images'</span>)</span><br><span class="line">random.shuffle(img_paths) <span class="comment"># 随机打乱</span></span><br><span class="line"></span><br><span class="line">val_number = int(len(img_paths) * test_frac) <span class="comment"># 测试集文件个数</span></span><br><span class="line">train_files = img_paths[val_number:]         <span class="comment"># 训练集文件名列表</span></span><br><span class="line">val_files = img_paths[:val_number]           <span class="comment"># 测试集文件名列表</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'数据集文件总数'</span>, len(img_paths))</span><br><span class="line">print(<span class="string">'训练集文件个数'</span>, len(train_files))</span><br><span class="line">print(<span class="string">'测试集文件个数'</span>, len(val_files))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'train'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'train'</span>)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(train_files):</span><br><span class="line">        shutil.move(each, <span class="string">'train'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'val'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'val'</span>)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(val_files):</span><br><span class="line">        shutil.move(each, <span class="string">'val'</span>)</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">fr'<span class="subst">&#123;Dataset_root&#125;</span>/labelme_jsons'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'train'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'train'</span>)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(train_files):</span><br><span class="line">        srt_path = each.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.json'</span></span><br><span class="line">        shutil.move(srt_path, <span class="string">'train'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'val'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'val'</span>)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(val_files):</span><br><span class="line">        srt_path = each.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.json'</span></span><br><span class="line">        shutil.move(srt_path, <span class="string">'val'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">classes = &#123;</span><br><span class="line">    <span class="string">'unprotected'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'protected'</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">os.chdir(Dataset_root)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'classes.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> list(classes.keys()):</span><br><span class="line">        f.write(each + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'labels'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'labels'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'labels/train'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'labels/train'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'labels/val'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'labels/val'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_single_json</span><span class="params">(labelme_path, save_folder=<span class="string">fr'<span class="subst">&#123;Dataset_root&#125;</span>/labels/train'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 载入 labelme格式的 json 标注文件</span></span><br><span class="line">    <span class="keyword">with</span> open(labelme_path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        labelme = json.load(f)</span><br><span class="line"></span><br><span class="line">    img_width = labelme[<span class="string">'imageWidth'</span>]  <span class="comment"># 图像宽度</span></span><br><span class="line">    img_height = labelme[<span class="string">'imageHeight'</span>]  <span class="comment"># 图像高度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成 YOLO 格式的 txt 文件</span></span><br><span class="line">    suffix = labelme_path.split(<span class="string">'.'</span>)[<span class="number">-2</span>]</span><br><span class="line">    yolo_txt_path = suffix + <span class="string">'.txt'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(yolo_txt_path, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> each_ann <span class="keyword">in</span> labelme[<span class="string">'shapes'</span>]:  <span class="comment"># 遍历每个框</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> each_ann[<span class="string">'shape_type'</span>] == <span class="string">'rectangle'</span>:  <span class="comment"># 筛选出框</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 获取类别 ID</span></span><br><span class="line">                bbox_class_id = classes[each_ann[<span class="string">'label'</span>]]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 左上角和右下角的 XY 像素坐标</span></span><br><span class="line">                bbox_top_left_x = int(min(each_ann[<span class="string">'points'</span>][<span class="number">0</span>][<span class="number">0</span>], each_ann[<span class="string">'points'</span>][<span class="number">1</span>][<span class="number">0</span>]))</span><br><span class="line">                bbox_bottom_right_x = int(max(each_ann[<span class="string">'points'</span>][<span class="number">0</span>][<span class="number">0</span>], each_ann[<span class="string">'points'</span>][<span class="number">1</span>][<span class="number">0</span>]))</span><br><span class="line">                bbox_top_left_y = int(min(each_ann[<span class="string">'points'</span>][<span class="number">0</span>][<span class="number">1</span>], each_ann[<span class="string">'points'</span>][<span class="number">1</span>][<span class="number">1</span>]))</span><br><span class="line">                bbox_bottom_right_y = int(max(each_ann[<span class="string">'points'</span>][<span class="number">0</span>][<span class="number">1</span>], each_ann[<span class="string">'points'</span>][<span class="number">1</span>][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 框中心点的 XY 像素坐标</span></span><br><span class="line">                bbox_center_x = int((bbox_top_left_x + bbox_bottom_right_x) / <span class="number">2</span>)</span><br><span class="line">                bbox_center_y = int((bbox_top_left_y + bbox_bottom_right_y) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 框宽度</span></span><br><span class="line">                bbox_width = bbox_bottom_right_x - bbox_top_left_x</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 框高度</span></span><br><span class="line">                bbox_height = bbox_bottom_right_y - bbox_top_left_y</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 框中心点归一化坐标</span></span><br><span class="line">                bbox_center_x_norm = bbox_center_x / img_width</span><br><span class="line">                bbox_center_y_norm = bbox_center_y / img_height</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 框归一化宽度</span></span><br><span class="line">                bbox_width_norm = bbox_width / img_width</span><br><span class="line">                <span class="comment"># 框归一化高度</span></span><br><span class="line">                bbox_height_norm = bbox_height / img_height</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 生成 YOLO 格式的一行标注，指定保留小数点后几位</span></span><br><span class="line">                bbox_yolo_str = <span class="string">'&#123;&#125; &#123;:.4f&#125; &#123;:.4f&#125; &#123;:.4f&#125; &#123;:.4f&#125;'</span>.format(bbox_class_id, bbox_center_x_norm,</span><br><span class="line">                                                                        bbox_center_y_norm, bbox_width_norm,</span><br><span class="line">                                                                        bbox_height_norm)</span><br><span class="line">                <span class="comment"># 写入 txt 文件中</span></span><br><span class="line">                f.write(bbox_yolo_str + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    shutil.move(yolo_txt_path, save_folder)</span><br><span class="line">    print(<span class="string">'&#123;&#125; --&gt; &#123;&#125; 转换完成'</span>.format(labelme_path, yolo_txt_path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">fr'<span class="subst">&#123;Dataset_root&#125;</span>/labelme_jsons/train'</span>)</span><br><span class="line"></span><br><span class="line">save_folder = <span class="string">fr'<span class="subst">&#123;Dataset_root&#125;</span>/labels/train'</span></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> os.listdir():</span><br><span class="line">    process_single_json(path, save_folder=save_folder)</span><br><span class="line">print(<span class="string">'YOLO格式的txt标注文件已保存至 '</span>, save_folder)</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">fr'<span class="subst">&#123;Dataset_root&#125;</span>/labelme_jsons/val'</span>)</span><br><span class="line">save_folder = <span class="string">fr'<span class="subst">&#123;Dataset_root&#125;</span>//labels/val'</span></span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> os.listdir():</span><br><span class="line">    process_single_json(path, save_folder=save_folder)</span><br><span class="line">print(<span class="string">'YOLO格式的txt标注文件已保存至 '</span>, save_folder)</span><br></pre></td></tr></table></figure><h3 id="创建训练yaml文件"><a href="#创建训练yaml文件" class="headerlink" title="创建训练yaml文件"></a>创建训练yaml文件</h3><p>在数据集的根目录下新建<code>fire.yaml</code>文件用于记录训练集信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">train:</span> <span class="string">/exp/work/video/yolov8/datasets/fire/data/train/images</span> <span class="comment"># 训练集</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">/exp/work/video/yolov8/datasets/fire/data/val/images</span> <span class="comment"># 验证集</span></span><br><span class="line"><span class="attr">test:</span> <span class="string">/exp/work/video/yolov8/datasets/fire/data/test/images</span> <span class="comment"># 测试集</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">2</span> <span class="comment"># 分类数量</span></span><br><span class="line"></span><br><span class="line"><span class="attr">names:</span> <span class="string">[fire,</span> <span class="string">smoke]</span> <span class="comment"># 类别名称</span></span><br></pre></td></tr></table></figure><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>在项目根目录下创建训练脚本<code>yolov8_train.py</code>，并设置双卡训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">model = YOLO(<span class="string">'yolov8n.pt'</span>)  <span class="comment"># 加载预训练模型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 双卡训练</span></span><br><span class="line">model.train(</span><br><span class="line">    data=<span class="string">'datasets/fire/data/fire.yaml'</span>,</span><br><span class="line">    epochs=<span class="number">300</span>,</span><br><span class="line">    device=[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动验证</span></span><br><span class="line">model.val()</span><br></pre></td></tr></table></figure><p>启动训练脚本，开启训练</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python yolov8_train.py</span><br></pre></td></tr></table></figure><p>打印配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ultralytics YOLOv8.1.5 🚀 Python-3.9.18 torch-2.1.2+cu121 CUDA:0 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">                                                          CUDA:1 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">engine/trainer: task=detect, mode=train, model=yolov8n.pt, data=datasets/fire/data/fire.yaml, epochs=300, time=None, patience=50, batch=16, imgsz=640, save=True, save_period=-1, cache=False, device=[0, 1], workers=8, project=None, name=train9, exist_ok=False, pretrained=True, optimizer=auto, verbose=True, seed=0, deterministic=True, single_cls=False, rect=False, cos_lr=False, close_mosaic=10, resume=False, amp=True, fraction=1.0, profile=False, freeze=None, multi_scale=False, overlap_mask=True, mask_ratio=4, dropout=0.0, val=True, split=val, save_json=False, save_hybrid=False, conf=None, iou=0.7, max_det=300, half=False, dnn=False, plots=True, source=None, vid_stride=1, stream_buffer=False, visualize=False, augment=False, agnostic_nms=False, classes=None, retina_masks=False, embed=None, show=False, save_frames=False, save_txt=False, save_conf=False, save_crop=False, show_labels=True, show_conf=True, show_boxes=True, line_width=None, format=torchscript, keras=False, optimize=False, int8=False, dynamic=False, simplify=False, opset=None, workspace=4, nms=False, lr0=0.01, lrf=0.01, momentum=0.937, weight_decay=0.0005, warmup_epochs=3.0, warmup_momentum=0.8, warmup_bias_lr=0.1, box=7.5, cls=0.5, dfl=1.5, pose=12.0, kobj=1.0, label_smoothing=0.0, nbs=64, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, degrees=0.0, translate=0.1, scale=0.5, shear=0.0, perspective=0.0, flipud=0.0, fliplr=0.5, mosaic=1.0, mixup=0.0, copy_paste=0.0, auto_augment=randaugment, erasing=0.4, crop_fraction=1.0, cfg=None, tracker=botsort.yaml, save_dir=runs/detect/train9</span><br><span class="line">Overriding model.yaml nc=80 with nc=2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">                   from  n    params  module                                       arguments                     </span><br><span class="line">  0                  -1  1       464  ultralytics.nn.modules.conv.Conv             [3, 16, 3, 2]                 </span><br><span class="line">  1                  -1  1      4672  ultralytics.nn.modules.conv.Conv             [16, 32, 3, 2]                </span><br><span class="line">  2                  -1  1      7360  ultralytics.nn.modules.block.C2f             [32, 32, 1, True]             </span><br><span class="line">  3                  -1  1     18560  ultralytics.nn.modules.conv.Conv             [32, 64, 3, 2]                </span><br><span class="line">  4                  -1  2     49664  ultralytics.nn.modules.block.C2f             [64, 64, 2, True]             </span><br><span class="line">  5                  -1  1     73984  ultralytics.nn.modules.conv.Conv             [64, 128, 3, 2]               </span><br><span class="line">  6                  -1  2    197632  ultralytics.nn.modules.block.C2f             [128, 128, 2, True]           </span><br><span class="line">  7                  -1  1    295424  ultralytics.nn.modules.conv.Conv             [128, 256, 3, 2]              </span><br><span class="line">  8                  -1  1    460288  ultralytics.nn.modules.block.C2f             [256, 256, 1, True]           </span><br><span class="line">  9                  -1  1    164608  ultralytics.nn.modules.block.SPPF            [256, 256, 5]                 </span><br><span class="line"> 10                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          </span><br><span class="line"> 11             [-1, 6]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 12                  -1  1    148224  ultralytics.nn.modules.block.C2f             [384, 128, 1]                 </span><br><span class="line"> 13                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          </span><br><span class="line"> 14             [-1, 4]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 15                  -1  1     37248  ultralytics.nn.modules.block.C2f             [192, 64, 1]                  </span><br><span class="line"> 16                  -1  1     36992  ultralytics.nn.modules.conv.Conv             [64, 64, 3, 2]                </span><br><span class="line"> 17            [-1, 12]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 18                  -1  1    123648  ultralytics.nn.modules.block.C2f             [192, 128, 1]                 </span><br><span class="line"> 19                  -1  1    147712  ultralytics.nn.modules.conv.Conv             [128, 128, 3, 2]              </span><br><span class="line"> 20             [-1, 9]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           </span><br><span class="line"> 21                  -1  1    493056  ultralytics.nn.modules.block.C2f             [384, 256, 1]                 </span><br><span class="line"> 22        [15, 18, 21]  1    751702  ultralytics.nn.modules.head.Detect           [2, [64, 128, 256]]           </span><br><span class="line">Model summary: 225 layers, 3011238 parameters, 3011222 gradients, 8.2 GFLOPs</span><br><span class="line"></span><br><span class="line">Transferred 319/355 items from pretrained weights</span><br><span class="line">DDP: debug command /root/anaconda3/envs/py39_yolov8/bin/python -m torch.distributed.run --nproc_per_node 2 --master_port 45027 /root/.config/Ultralytics/DDP/_temp_bfxihrb7140614302513712.py</span><br><span class="line">WARNING:__main__:</span><br><span class="line">*****************************************</span><br><span class="line">Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. </span><br><span class="line">*****************************************</span><br><span class="line">Ultralytics YOLOv8.1.5 🚀 Python-3.9.18 torch-2.1.2+cu121 CUDA:0 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">                                                          CUDA:1 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">Overriding model.yaml nc=80 with nc=2</span><br><span class="line">Transferred 319/355 items from pretrained weights</span><br><span class="line">Freezing layer 'model.22.dfl.conv.weight'</span><br><span class="line">AMP: running Automatic Mixed Precision (AMP) checks with YOLOv8n...</span><br><span class="line">AMP: checks passed ✅</span><br></pre></td></tr></table></figure><p>记录模型输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Plotting labels to runs/detect/train9/labels.jpg... </span><br><span class="line">optimizer: 'optimizer=auto' found, ignoring 'lr0=0.01' and 'momentum=0.937' and determining best 'optimizer', 'lr0' and 'momentum' automatically... </span><br><span class="line">optimizer: AdamW(lr=0.000714, momentum=0.9) with parameter groups 57 weight(decay=0.0), 64 weight(decay=0.0005), 63 bias(decay=0.0)</span><br><span class="line">Image sizes 640 train, 640 val</span><br><span class="line">Using 16 dataloader workers</span><br><span class="line">Logging results to runs/detect/train9</span><br></pre></td></tr></table></figure><p>训练开始</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">Starting training for 300 epochs...</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">      1/300      1.38G      2.132      4.599       2.13          6        640: 100%|██████████| 3/3 [00:04&lt;00:00,  1.53s/it]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00,  3.10it/s]</span><br><span class="line">                   all         41         62    0.00191      0.349     0.0223     0.0121</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">      2/300      1.44G      1.984      4.085      1.942         18        640: 100%|██████████| 3/3 [00:00&lt;00:00,  5.08it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00, 11.57it/s]</span><br><span class="line">                   all         41         62    0.00209      0.373     0.0247     0.0119</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">      3/300      1.48G      2.421      4.407      2.348         14        640: 100%|██████████| 3/3 [00:00&lt;00:00,  5.78it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00, 10.23it/s]</span><br><span class="line">                   all         41         62    0.00205      0.373     0.0335     0.0165</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">      4/300      1.48G      1.795      3.787      1.724         18        640: 100%|██████████| 3/3 [00:00&lt;00:00,  5.61it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00,  9.82it/s]</span><br><span class="line">                   all         41         62    0.00239      0.434     0.0445     0.0219</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">      5/300      1.48G      1.707      3.619      1.785         17        640: 100%|██████████| 3/3 [00:00&lt;00:00,  5.49it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00,  8.87it/s]</span><br><span class="line">                   all         41         62      0.003      0.495     0.0735     0.0283</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    295/300       1.5G     0.3742     0.5917     0.8247          7        640: 100%|██████████| 3/3 [00:00&lt;00:00,  7.21it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00, 11.40it/s]</span><br><span class="line">                   all         41         62      0.996          1      0.995      0.946</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    296/300      1.44G     0.4263     0.6716     0.8004          7        640: 100%|██████████| 3/3 [00:00&lt;00:00,  6.86it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00, 11.97it/s]</span><br><span class="line">                   all         41         62      0.996          1      0.995      0.945</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    297/300       1.5G      0.473     0.6775     0.8499          7        640: 100%|██████████| 3/3 [00:00&lt;00:00,  7.20it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00, 11.12it/s]</span><br><span class="line">                   all         41         62      0.996          1      0.995      0.945</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    298/300      1.51G     0.4877     0.6956     0.8936         11        640: 100%|██████████| 3/3 [00:00&lt;00:00,  6.73it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00, 11.03it/s]</span><br><span class="line">                   all         41         62      0.996          1      0.995      0.942</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    299/300       1.5G     0.4303      0.622     0.8264          6        640: 100%|██████████| 3/3 [00:00&lt;00:00,  6.89it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00, 11.62it/s]</span><br><span class="line">                   all         41         62      0.996          1      0.995      0.941</span><br><span class="line"></span><br><span class="line">      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size</span><br><span class="line">    300/300      1.44G     0.4593     0.6413     0.8419          6        640: 100%|██████████| 3/3 [00:00&lt;00:00,  6.31it/s]</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00, 11.83it/s]</span><br><span class="line">                   all         41         62      0.995          1      0.995       0.94</span><br></pre></td></tr></table></figure><p>训练结束，验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">300 epochs completed in 0.101 hours.</span><br><span class="line">Optimizer stripped from runs/detect/train9/weights/last.pt, 6.3MB</span><br><span class="line">Optimizer stripped from runs/detect/train9/weights/best.pt, 6.3MB</span><br><span class="line"></span><br><span class="line">Validating runs/detect/train9/weights/best.pt...</span><br><span class="line">Ultralytics YOLOv8.1.5 🚀 Python-3.9.18 torch-2.1.2+cu121 CUDA:0 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">                                                          CUDA:1 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">Model summary (fused): 168 layers, 3006038 parameters, 0 gradients, 8.1 GFLOPs</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:00&lt;00:00, 10.62it/s]</span><br><span class="line">                   all         41         62      0.996          1      0.995      0.946</span><br><span class="line">                  fire         41         41      0.999          1      0.995      0.938</span><br><span class="line">                 smoke         41         21      0.992          1      0.995      0.955</span><br><span class="line">Speed: 0.1ms preprocess, 1.4ms inference, 0.0ms loss, 1.0ms postprocess per image</span><br><span class="line">Results saved to runs/detect/train9</span><br><span class="line">Ultralytics YOLOv8.1.5 🚀 Python-3.9.18 torch-2.1.2+cu121 CUDA:0 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">                                                          CUDA:1 (NVIDIA GeForce RTX 3090, 24260MiB)</span><br><span class="line">Model summary (fused): 168 layers, 3006038 parameters, 0 gradients, 8.1 GFLOPs</span><br><span class="line">                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 3/3 [00:04&lt;00:00,  1.41s/it]</span><br><span class="line">                   all         41         62      0.996          1      0.995      0.941</span><br><span class="line">                  fire         41         41      0.999          1      0.995      0.939</span><br><span class="line">                 smoke         41         21      0.992          1      0.995      0.942</span><br><span class="line">Speed: 0.2ms preprocess, 14.3ms inference, 0.0ms loss, 16.8ms postprocess per image</span><br><span class="line">Results saved to runs/detect/train92</span><br></pre></td></tr></table></figure><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><p>进入保存训练结果的文件夹内，其中<code>weights</code>文件夹包含了最佳训练模型和最近训练模型，文件夹外存储训练的各项记录和测试曲线等</p><p><img src="/2024/01/25/yolov8：火灾检测/6.png" alt></p><p><img src="/2024/01/25/yolov8：火灾检测/7.png" alt></p><p><code>result.csv</code>文件中记录了300轮epoch的详细结果</p><p><img src="/2024/01/25/yolov8：火灾检测/8.png" alt></p><h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><p>在项目根目录下创建预测脚本<code>yolov8_test.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line">model = YOLO(<span class="string">'runs/detect/train9/weights/best.pt'</span>) <span class="comment"># 指定最佳模型</span></span><br><span class="line">model.predict(<span class="string">'video/fire.mp4'</span>, save=<span class="literal">True</span>, classes=[<span class="number">0</span>, <span class="number">1</span>]) <span class="comment"># 指定输出类别</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">video 1/1 (1/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 208.5ms</span><br><span class="line">video 1/1 (2/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 9.6ms</span><br><span class="line">video 1/1 (3/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 7.9ms</span><br><span class="line">video 1/1 (4/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 7.9ms</span><br><span class="line">video 1/1 (5/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 8.0ms</span><br><span class="line">video 1/1 (6/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 7.8ms</span><br><span class="line">video 1/1 (7/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 7.7ms</span><br><span class="line">video 1/1 (8/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 7.6ms</span><br><span class="line">video 1/1 (9/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 7.9ms</span><br><span class="line">video 1/1 (10/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 7.8ms</span><br><span class="line">video 1/1 (11/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 8.1ms</span><br><span class="line">video 1/1 (12/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 8.1ms</span><br><span class="line">video 1/1 (13/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 8.2ms</span><br><span class="line">video 1/1 (14/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 8.0ms</span><br><span class="line">video 1/1 (15/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 7.7ms</span><br><span class="line">video 1/1 (16/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 7.8ms</span><br><span class="line">video 1/1 (17/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 (no detections), 7.6ms</span><br><span class="line">video 1/1 (18/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.6ms</span><br><span class="line">video 1/1 (19/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.8ms</span><br><span class="line">video 1/1 (20/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.6ms</span><br><span class="line">video 1/1 (21/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.8ms</span><br><span class="line">video 1/1 (22/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 2 fires, 7.7ms</span><br><span class="line">video 1/1 (23/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.6ms</span><br><span class="line">video 1/1 (24/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.5ms</span><br><span class="line">video 1/1 (25/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.7ms</span><br><span class="line">video 1/1 (26/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.5ms</span><br><span class="line">video 1/1 (27/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.4ms</span><br><span class="line">video 1/1 (28/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.6ms</span><br><span class="line">video 1/1 (29/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.8ms</span><br><span class="line">video 1/1 (30/306) /exp/work/video/yolov8/video/fire.mp4: 384x640 1 fire, 7.7ms</span><br><span class="line">...</span><br><span class="line">Speed: 2.2ms preprocess, 8.3ms inference, 3.8ms postprocess per image at shape (1, 3, 384, 640)</span><br><span class="line">Results saved to runs/detect/predict13</span><br></pre></td></tr></table></figure><p><img src="/2024/01/25/yolov8：火灾检测/fire.gif" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;h3 id=&quot;GPU&quot;&gt;&lt;a href=&quot;#GPU&quot; class=&quot;headerlink&quot; title=&quot;GPU&quot;&gt;&lt;/a&gt;GPU&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;font color=&quot;gold&quot;&gt;NVIDIA 3090*2&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;gold&quot;&gt;显卡驱动 535.104.05&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;gold&quot;&gt;CUDA版本 12.2&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;gold&quot;&gt;CUDAtoolkit&lt;/font&gt; (cuda_12.2.2_535.104.05_linux)&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;gold&quot;&gt;cuDNN (v8.9.7)&lt;/font&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;yolo版本&quot;&gt;&lt;a href=&quot;#yolo版本&quot; class=&quot;headerlink&quot; title=&quot;yolo版本&quot;&gt;&lt;/a&gt;yolo版本&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;font color=&quot;gold&quot;&gt;v8.1.5&lt;/font&gt; (ultralytics yolov8)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pytorch版本&quot;&gt;&lt;a href=&quot;#pytorch版本&quot; class=&quot;headerlink&quot; title=&quot;pytorch版本&quot;&gt;&lt;/a&gt;pytorch版本&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;font color=&quot;gold&quot;&gt;v2.1.2&lt;/font&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;python环境&quot;&gt;&lt;a href=&quot;#python环境&quot; class=&quot;headerlink&quot; title=&quot;python环境&quot;&gt;&lt;/a&gt;python环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;font color=&quot;gold&quot;&gt;CentOS7.9&lt;/font&gt;
&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;gold&quot;&gt;anaconda3&lt;/font&gt;
&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;gold&quot;&gt;python3.9&lt;/font&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;源码主页：&lt;a href=&quot;https://github.com/ultralytics/ultralytics&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ultralytics/ultralytics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://docs.ultralytics.com/zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.ultralytics.com/zh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/01/25/yolov8：火灾检测/1.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;克隆源码&quot;&gt;&lt;a href=&quot;#克隆源码&quot; class=&quot;headerlink&quot; title=&quot;克隆源码&quot;&gt;&lt;/a&gt;克隆源码&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://hub.nuaa.cf/ultralytics/ultralytics.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install pip install ultralytics -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;环境验证&quot;&gt;&lt;a href=&quot;#环境验证&quot; class=&quot;headerlink&quot; title=&quot;环境验证&quot;&gt;&lt;/a&gt;环境验证&lt;/h3&gt;&lt;p&gt;python&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ultralytics&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ultralytics.checks()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;cli&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yolo predict model=yolov8n.pt source=ultralytics/assets/zidane.jpg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行完毕后得到输出的结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(py39_yolov8) [root@jdz yolov8]# yolo predict model=yolov8n.pt source=ultralytics/assets/zidane.jpg &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ultralytics YOLOv8.1.5 🚀 Python-3.9.18 torch-2.1.2+cu121 CUDA:0 (NVIDIA GeForce RTX 3090, 24260MiB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;YOLOv8n summary (fused): 168 layers, 3151904 parameters, 0 gradients, 8.7 GFLOPs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;image 1/1 /exp/work/video/yolov8/ultralytics/assets/zidane.jpg: 384x640 2 persons, 1 tie, 216.9ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Speed: 7.3ms preprocess, 216.9ms inference, 762.4ms postprocess per image at shape (1, 3, 384, 640)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Results saved to runs/detect/predict&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;💡 Learn more at https://docs.ultralytics.com/modes/predict&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将在&lt;code&gt;Results saved to runs/detect/predict&lt;/code&gt;目录下找到输出结果&lt;/p&gt;</summary>
    
    
    
    <category term="目标检测" scheme="http://yoursite.com/categories/目标检测/"/>
    
    
    <category term="yolov8" scheme="http://yoursite.com/tags/yolov8/"/>
    
    <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX: 图论算法应用</title>
    <link href="http://yoursite.com/2024/01/08/NetworkX-%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2024/01/08/NetworkX-%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%BA%94%E7%94%A8/</id>
    <published>2024-01-08T07:48:56.000Z</published>
    <updated>2024-01-25T08:23:02.432Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="NetworkX"><a href="#NetworkX" class="headerlink" title="NetworkX"></a>NetworkX</h2><p>NetworkX是一款Python的软件包，用于创造、操作复杂网络，以及学习复杂网络的结构、动力学及其功能。有了NetworkX就可以用标准或者不标准的数据格式加载或者存储网络，它可以产生许多种类的随机网络或经典网络，也可以分析网络结构、建立网络模型、设计新的网络算法、绘制网络等</p><p>参考文献地址: <a href="https://www.osgeo.cn/networkx/reference/index.html" target="_blank" rel="noopener">https://www.osgeo.cn/networkx/reference/index.html</a></p><h2 id="图计算应用方式比较"><a href="#图计算应用方式比较" class="headerlink" title="图计算应用方式比较"></a>图计算应用方式比较</h2><h3 id="1-nebula-spark"><a href="#1-nebula-spark" class="headerlink" title="1.nebula + spark"></a>1.nebula + spark</h3><p>依赖nebula-spark-connector包、nebula-algorithm包和spark集群的数据读取、图计算方式</p><h3 id="2-clickhouse-NetworkX"><a href="#2-clickhouse-NetworkX" class="headerlink" title="2.clickhouse + NetworkX"></a>2.clickhouse + NetworkX</h3><p>由于nebula-algorithm依赖spark集群，且nebula-console原生的数据读取能力不佳，在环境受限且计算量有限的情况下优先考虑跳过spark集群和nebula图库，采用clickhouse + NetworkX的图计算方式，其中clickhouse是存储了nebula源数据的列式分布式表，作用类似于方法1中将nebula集群数据通过nebula-spark-connector包导入为spark-DataFrame，仅用做数据读取，再通过将数据转化为NetworkX的图结构进行图计算</p><p><img src="/2024/01/08/NetworkX-图论算法应用/9.png" alt></p><a id="more"></a><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>nebula集群存储以群聊和群成员、好友关系所组成的关系网，clickhouse集群存储节点源数据和对应关系</p><h3 id="一、集合运算"><a href="#一、集合运算" class="headerlink" title="一、集合运算"></a>一、集合运算</h3><p>交、并、差集</p><p>直接使用clickhouse进行查询，适用于两个群组成员或账号所加群的交并差集</p><p><strong>输入：</strong></p><p><strong><font color="gold">·</font></strong> n个账号（n≥2）</p><p><strong><font color="gold">·</font></strong> n个群组（n≥2）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/1.png" alt></p><h3 id="二、路径探寻"><a href="#二、路径探寻" class="headerlink" title="二、路径探寻"></a>二、路径探寻</h3><p>直接使用nebula进行查询，适用于搜索图谱中任意两个节点的最短可达路径</p><p><strong>输入：</strong></p><p><strong><font color="gold">·</font></strong> 任意类型2个节点</p><p><img src="/2024/01/08/NetworkX-图论算法应用/2.png" alt></p><h3 id="三、中心性"><a href="#三、中心性" class="headerlink" title="三、中心性"></a>三、中心性</h3><p><strong>输入：</strong></p><p><strong><font color="gold">·</font></strong> n个群组（n≥1），分析包括指定n个群组、群组群成员、群成员所加群组成关系网各节点的中心性</p><p><strong><font color="gold">·</font></strong> n个账号（n≥1），分析包括指定n个账号、账号所加群、群成员组成关系网各节点的中心性</p><p><strong><font color="gold">·</font></strong> 指定关系网，分析各节点中心性</p><p><strong>ClickHouse SQL示例（关系图谱）：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  team_id,account_id <span class="keyword">FROM</span> mqv3.ly_team_ship lts </span><br><span class="line">PREWHERE account_id <span class="keyword">GLOBAL</span> <span class="keyword">IN</span> </span><br><span class="line">(<span class="keyword">SELECT</span> account_id <span class="keyword">FROM</span> mqv3.ly_team_ship lts PREWHERE team_id=<span class="string">'&#123;src_vid&#125;'</span>);</span><br></pre></td></tr></table></figure><h4 id="1-度中心性"><a href="#1-度中心性" class="headerlink" title="1.度中心性"></a>1.度中心性</h4><p>衡量节点中心性的指标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = nx.degree_centrality(G)</span><br><span class="line">res = dict(sorted(res.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p><strong>e.g.</strong> 以群（-1151413367、-1541749047）为指定节点，计算三级关系网各节点度中心性（抛弃度&lt;5的节点，突出结构）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/3.png" alt></p><h4 id="2-接近中心性"><a href="#2-接近中心性" class="headerlink" title="2.接近中心性"></a>2.接近中心性</h4><p>反映在关系网络中某一节点与其他节点之间的接近程度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = nx.closeness_centrality(G)</span><br><span class="line">res = dict(sorted(res.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p><strong>e.g.</strong> 以群（-1151413367、-1541749047）为指定节点，计算三级关系网各节点接近中心性（抛弃度&lt;50的节点，突出结构）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/4.png" alt></p><h4 id="3-中介中心性"><a href="#3-中介中心性" class="headerlink" title="3.中介中心性"></a>3.中介中心性</h4><p>以经过某个节点的最短路径数目来刻画节点重要性的指标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = nx.betweenness_centrality(G, k=<span class="number">1000</span>)</span><br><span class="line">res = dict(sorted(res.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p><strong>e.g.</strong> 以群（-1151413367、-1541749047）为指定节点，计算三级关系网各节点中介中心性（抛弃度&lt;5的节点，突出结构）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/5.png" alt></p><h4 id="4-特征向量中心性"><a href="#4-特征向量中心性" class="headerlink" title="4.特征向量中心性"></a>4.特征向量中心性</h4><p>关系网络中一个节点的重要性既取决于其邻居节点的数量（即该节点的度），也取决于其邻居节点的重要性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = nx.eigenvector_centrality(G)</span><br><span class="line">res = dict(sorted(res.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p><strong>e.g.</strong> 以群（-1151413367、-1541749047）为指定节点，计算三级关系网各节点特征向量中心性（抛弃度&lt;5的节点，突出结构）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/6.png" alt></p><h3 id="四、重要性"><a href="#四、重要性" class="headerlink" title="四、重要性"></a>四、重要性</h3><p><strong>输入：</strong></p><p><strong><font color="gold">·</font></strong> n个群组（n≥1），分析包括指定n个群组、群组群成员、群成员所加群组成关系网各节点的重要程度</p><p><strong><font color="gold">·</font></strong> n个账号（n≥1），分析包括指定n个账号、账号所加群、群成员组成关系网各节点的重要程度</p><p><strong><font color="gold">·</font></strong> 指定关系网，分析各节点的重要程度</p><h4 id="1-k核"><a href="#1-k核" class="headerlink" title="1.k核"></a>1.k核</h4><p>用于在图中寻找符合一定紧密关系条件（K）的子图结构的算法，要求每个顶点至少与该子图的其他K个顶点关联</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res1 = nx.core_number(G)</span><br><span class="line">res2 = nx.k_core(G, <span class="number">6</span>)</span><br><span class="line">res1 = dict(sorted(res1.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br><span class="line">print(res1)</span><br><span class="line">print(list(res2))</span><br></pre></td></tr></table></figure><p><strong>e.g.</strong> 以群（-1151413367、-1541749047）为指定节点，计算三级关系网各节点k-core值，结合louvain社区上色（全图）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/7.png" alt></p><h4 id="2-PageRank"><a href="#2-PageRank" class="headerlink" title="2.PageRank"></a>2.PageRank</h4><p>衡量图中节点重要性的指标，值越高，图中访问该节点的概率越高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = nx.pagerank(G, alpha=<span class="number">0.85</span>)</span><br><span class="line">res = dict(sorted(res.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p><strong>e.g.1.</strong> 以群（-1151413367、-1541749047）为指定节点，计算三级关系网各节点pagerank值（抛弃度&lt;5的节点，突出结构）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/8.png" alt></p><p><strong>e.g.2.</strong> 以群（-1151413367、-1541749047）为指定节点，计算三级关系网各节点pagerank值，结合louvain社区（全图）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/9.png" alt></p><h3 id="五、聚类算法"><a href="#五、聚类算法" class="headerlink" title="五、聚类算法"></a>五、聚类算法</h3><p><strong>输入（社区发现）：</strong></p><p><strong><font color="gold">·</font></strong> n个群组（n≥1），划分包括指定n个群组、群组群成员、群成员所加群组成关系网的各个社区</p><p><strong><font color="gold">·</font></strong> n个账号（n≥1），划分包括指定n个账号、账号所加群、群成员组成关系网的各个社区</p><p><strong><font color="gold">·</font></strong> 划分指定关系网各节点的社区</p><p><strong>输入（三角形计数）：</strong></p><p><strong><font color="gold">·</font></strong> n个群组（n≥1），计算包括指定n个群组、群组群成员、群成员好友、群成员所加群组、群成员所加群组成关系网的三角形数量，挖掘团体关系</p><p><strong><font color="gold">·</font></strong> 计算指定关系网各节点的三角形数量，挖掘团体关系</p><p>用于计算图谱中三角关系数量，挖掘关系团体</p><p><strong>ClickHouse SQL示例（三角形计数）：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T <span class="keyword">AS</span>(<span class="comment">-- 指定群群成员</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> team_id,account_id <span class="keyword">FROM</span> mqv3.ly_team_ship PREWHERE team_id = <span class="string">'&#123;src_vid&#125;'</span></span><br><span class="line">),T1 <span class="keyword">AS</span>(<span class="comment">-- 指定群群成员的好友</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> account_id,fri_account_id <span class="keyword">FROM</span> mqv3.ly_account_ship PREWHERE account_id <span class="keyword">GLOBAL</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> account_id <span class="keyword">FROM</span> T) </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">DISTINCT</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> fri_account_id,account_id <span class="keyword">FROM</span> mqv3.ly_account_ship PREWHERE fri_account_id <span class="keyword">GLOBAL</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> account_id <span class="keyword">FROM</span> T)</span><br><span class="line">),T2 <span class="keyword">AS</span>(<span class="comment">-- 群成员所加群</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> team_id,account_id <span class="keyword">FROM</span> mqv3.ly_team_ship PREWHERE account_id <span class="keyword">GLOBAL</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> account_id <span class="keyword">FROM</span> T)</span><br><span class="line">),T3 <span class="keyword">AS</span>(<span class="comment">-- 群成员所加群和群成员和群成员的好友</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> team_id,account_id,fri_account_id <span class="keyword">FROM</span> T2 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> T1 <span class="keyword">ON</span> T2.account_id = T1.account_id</span><br><span class="line">),T4 <span class="keyword">AS</span>(<span class="comment">-- 群成员好友所加群</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> team_id,account_id <span class="keyword">AS</span> fri_account_id <span class="keyword">FROM</span> mqv3.ly_team_ship lts PREWHERE lts.account_id <span class="keyword">GLOBAL</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> fri_account_id <span class="keyword">FROM</span> T1)</span><br><span class="line">),T5 <span class="keyword">AS</span>(<span class="comment">-- 共同所加群</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> team_id,account_id,fri_account_id <span class="keyword">FROM</span> T3 <span class="keyword">JOIN</span> T4 <span class="keyword">ON</span> (T3.team_id = T4.team_id <span class="keyword">AND</span> T3.fri_account_id = T4.fri_account_id)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> team_id,account_id,fri_account_id <span class="keyword">from</span> T5</span><br></pre></td></tr></table></figure><h4 id="1-标签传播（LPA社区发现）"><a href="#1-标签传播（LPA社区发现）" class="headerlink" title="1.标签传播（LPA社区发现）"></a>1.标签传播（LPA社区发现）</h4><p>基于lpa的社区划分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = nx.algorithms.community.label_propagation_communities(G)</span><br><span class="line">print(list(res))</span><br></pre></td></tr></table></figure><p><strong>e.g.</strong>以群（-1151413367、-1541749047）为指定节点，划分lpa标签传播社区（抛弃度&lt;5的节点，突出结构）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/10.png" alt></p><h4 id="2-鲁汶（Louvain社区发现）"><a href="#2-鲁汶（Louvain社区发现）" class="headerlink" title="2.鲁汶（Louvain社区发现）"></a>2.鲁汶（Louvain社区发现）</h4><p>基于louvain的社区划分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = nx.algorithms.community.louvain_communities(G, resolution=<span class="number">0.5</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p><strong>e.g.1.</strong>以群（-1151413367、-1541749047）为指定节点，划分louvain鲁汶社区（resolution=1，抛弃度&lt;5的节点，突出结构）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/11.png" alt></p><p><strong>e.g.2.</strong>以群（-1151413367、-1541749047）为指定节点，划分louvain鲁汶社区（resolution=0.3，抛弃度&lt;5的节点，突出结构）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/12.png" alt></p><h4 id="3-三角形计数"><a href="#3-三角形计数" class="headerlink" title="3.三角形计数"></a>3.三角形计数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = nx.triangles(G)</span><br><span class="line">res = dict(sorted(res.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p><strong>e.g.</strong>以群（-1151413367、-1541749047）为指定节点，计算关系网中各个节点三角形数量（抛弃度&lt;5的节点，突出结构）</p><p><img src="/2024/01/08/NetworkX-图论算法应用/13.png" alt></p><h3 id="六、连通性"><a href="#六、连通性" class="headerlink" title="六、连通性"></a>六、连通性</h3><p><strong>输入：</strong></p><p><strong><font color="gold">·</font></strong> 指定n个群组（n≥2），判断群组、群成员、群成员所加群所组关系网是否为连通图</p><p><strong><font color="gold">·</font></strong> 指定n个账号（n≥2），判断账号、账号所加群、群成员所组关系网是否为连通图</p><p><strong><font color="gold">·</font></strong> 指定关系网</p><h4 id="1-连通性检测"><a href="#1-连通性检测" class="headerlink" title="1.连通性检测"></a>1.连通性检测</h4><p>判断目标图谱是否为连通图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res1 = nx.is_connected(G)</span><br><span class="line">print(res1)</span><br></pre></td></tr></table></figure><p><strong>e.g.1.</strong>连通图</p><p><img src="/2024/01/08/NetworkX-图论算法应用/14.png" alt></p><p><strong>e.g.2.</strong>非连通图</p><p><img src="/2024/01/08/NetworkX-图论算法应用/15.png" alt></p><h4 id="2-联通组件数"><a href="#2-联通组件数" class="headerlink" title="2.联通组件数"></a>2.联通组件数</h4><p>判断目标图谱中联通组件的数量（n）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res2 = nx.number_connected_components(G)</span><br><span class="line">print(res2)</span><br></pre></td></tr></table></figure><h4 id="3-联通组件"><a href="#3-联通组件" class="headerlink" title="3.联通组件"></a>3.联通组件</h4><p>显示目标图谱中的全部联通组件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res3 = nx.connected_components(G)</span><br><span class="line">print(res3)</span><br></pre></td></tr></table></figure><h4 id="4-指定节点联通组件"><a href="#4-指定节点联通组件" class="headerlink" title="4.指定节点联通组件"></a>4.指定节点联通组件</h4><p>显示目标图谱中指定节点所在的联通组件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res4 = nx.node_connected_component(G, <span class="string">"sample_node"</span>)</span><br><span class="line">print(res4)</span><br></pre></td></tr></table></figure><h3 id="七、几何"><a href="#七、几何" class="headerlink" title="七、几何"></a>七、几何</h3><p><strong>输入：</strong></p><p><strong><font color="gold">·</font></strong> 指定n个群组（n≥2），计算群组、群成员、群成员所加群所组关系网的中心、重心</p><p><strong><font color="gold">·</font></strong> 指定n个账号（n≥2），计算账号、账号所加群、群成员所组关系网的中心、重心</p><p><strong><font color="gold">·</font></strong> 计算指定关系网几何中心、重心</p><h4 id="1-几何重心"><a href="#1-几何重心" class="headerlink" title="1.几何重心"></a>1.几何重心</h4><p>图的重心节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res1 = nx.barycenter(G)</span><br><span class="line">print(res1)</span><br></pre></td></tr></table></figure><h4 id="2-几何中心"><a href="#2-几何中心" class="headerlink" title="2.几何中心"></a>2.几何中心</h4><p>图的中心节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res2 = nx.center(G)</span><br><span class="line">print(res2)</span><br></pre></td></tr></table></figure><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><p><strong>e.g.</strong> 中心中心性 + LPA标签传播算法聚类</p><p>数据源：<a href="https://www.inetbio.org/wormnet/downloadnetwork.php" target="_blank" rel="noopener">https://www.inetbio.org/wormnet/downloadnetwork.php</a></p><p><strong><font color="gold">·</font></strong> WormNet v.3-GS (<a href="https://www.inetbio.org/wormnet/download.php?type=2" target="_blank" rel="noopener">https://www.inetbio.org/wormnet/download.php?type=2</a>)</p><p> 完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> sample</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gold standard data of positive gene functional associations</span></span><br><span class="line"><span class="comment"># from https://www.inetbio.org/wormnet/downloadnetwork.php</span></span><br><span class="line">G = nx.read_edgelist(<span class="string">"WormNet.v3.benchmark.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove randomly selected nodes (to make example fast)</span></span><br><span class="line">num_to_remove = int(len(G) / <span class="number">1.5</span>)</span><br><span class="line">nodes = sample(list(G.nodes), num_to_remove)</span><br><span class="line">G.remove_nodes_from(nodes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove low-degree nodes</span></span><br><span class="line">low_degree = [n <span class="keyword">for</span> n, d <span class="keyword">in</span> G.degree() <span class="keyword">if</span> d &lt; <span class="number">10</span>]</span><br><span class="line">G.remove_nodes_from(low_degree)</span><br><span class="line"></span><br><span class="line"><span class="comment"># largest connected component</span></span><br><span class="line">components = nx.connected_components(G)</span><br><span class="line">largest_component = max(components, key=len)</span><br><span class="line">H = G.subgraph(largest_component)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compute centrality</span></span><br><span class="line">centrality = nx.betweenness_centrality(H, k=<span class="number">10</span>, endpoints=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compute community structure</span></span><br><span class="line">lpc = nx.community.label_propagation_communities(H)</span><br><span class="line">community_index = &#123;n: i <span class="keyword">for</span> i, com <span class="keyword">in</span> enumerate(lpc) <span class="keyword">for</span> n <span class="keyword">in</span> com&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#### draw graph ####</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">15</span>))</span><br><span class="line">pos = nx.spring_layout(H, k=<span class="number">0.15</span>, seed=<span class="number">4572321</span>)</span><br><span class="line">node_color = [community_index[n] <span class="keyword">for</span> n <span class="keyword">in</span> H]</span><br><span class="line">node_size = [v * <span class="number">20000</span> <span class="keyword">for</span> v <span class="keyword">in</span> centrality.values()]</span><br><span class="line">nx.draw_networkx(</span><br><span class="line">    H,</span><br><span class="line">    pos=pos,</span><br><span class="line">    with_labels=<span class="literal">False</span>,</span><br><span class="line">    node_color=node_color,</span><br><span class="line">    node_size=node_size,</span><br><span class="line">    edge_color=<span class="string">"gainsboro"</span>,</span><br><span class="line">    alpha=<span class="number">0.4</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Title/legend</span></span><br><span class="line">font = &#123;<span class="string">"color"</span>: <span class="string">"k"</span>, <span class="string">"fontweight"</span>: <span class="string">"bold"</span>, <span class="string">"fontsize"</span>: <span class="number">20</span>&#125;</span><br><span class="line">ax.set_title(<span class="string">"Gene functional association network (C. elegans)"</span>, font)</span><br><span class="line"><span class="comment"># Change font color for legend</span></span><br><span class="line">font[<span class="string">"color"</span>] = <span class="string">"r"</span></span><br><span class="line"></span><br><span class="line">ax.text(</span><br><span class="line">    <span class="number">0.80</span>,</span><br><span class="line">    <span class="number">0.10</span>,</span><br><span class="line">    <span class="string">"node color = community structure"</span>,</span><br><span class="line">    horizontalalignment=<span class="string">"center"</span>,</span><br><span class="line">    transform=ax.transAxes,</span><br><span class="line">    fontdict=font,</span><br><span class="line">)</span><br><span class="line">ax.text(</span><br><span class="line">    <span class="number">0.80</span>,</span><br><span class="line">    <span class="number">0.06</span>,</span><br><span class="line">    <span class="string">"node size = betweeness centrality"</span>,</span><br><span class="line">    horizontalalignment=<span class="string">"center"</span>,</span><br><span class="line">    transform=ax.transAxes,</span><br><span class="line">    fontdict=font,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Resize figure for label readibility</span></span><br><span class="line">ax.margins(<span class="number">0.1</span>, <span class="number">0.05</span>)</span><br><span class="line">fig.tight_layout()</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2024/01/08/NetworkX-图论算法应用/16.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;NetworkX&quot;&gt;&lt;a href=&quot;#NetworkX&quot; class=&quot;headerlink&quot; title=&quot;NetworkX&quot;&gt;&lt;/a&gt;NetworkX&lt;/h2&gt;&lt;p&gt;NetworkX是一款Python的软件包，用于创造、操作复杂网络，以及学习复杂网络的结构、动力学及其功能。有了NetworkX就可以用标准或者不标准的数据格式加载或者存储网络，它可以产生许多种类的随机网络或经典网络，也可以分析网络结构、建立网络模型、设计新的网络算法、绘制网络等&lt;/p&gt;
&lt;p&gt;参考文献地址: &lt;a href=&quot;https://www.osgeo.cn/networkx/reference/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.osgeo.cn/networkx/reference/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;图计算应用方式比较&quot;&gt;&lt;a href=&quot;#图计算应用方式比较&quot; class=&quot;headerlink&quot; title=&quot;图计算应用方式比较&quot;&gt;&lt;/a&gt;图计算应用方式比较&lt;/h2&gt;&lt;h3 id=&quot;1-nebula-spark&quot;&gt;&lt;a href=&quot;#1-nebula-spark&quot; class=&quot;headerlink&quot; title=&quot;1.nebula + spark&quot;&gt;&lt;/a&gt;1.nebula + spark&lt;/h3&gt;&lt;p&gt;依赖nebula-spark-connector包、nebula-algorithm包和spark集群的数据读取、图计算方式&lt;/p&gt;
&lt;h3 id=&quot;2-clickhouse-NetworkX&quot;&gt;&lt;a href=&quot;#2-clickhouse-NetworkX&quot; class=&quot;headerlink&quot; title=&quot;2.clickhouse + NetworkX&quot;&gt;&lt;/a&gt;2.clickhouse + NetworkX&lt;/h3&gt;&lt;p&gt;由于nebula-algorithm依赖spark集群，且nebula-console原生的数据读取能力不佳，在环境受限且计算量有限的情况下优先考虑跳过spark集群和nebula图库，采用clickhouse + NetworkX的图计算方式，其中clickhouse是存储了nebula源数据的列式分布式表，作用类似于方法1中将nebula集群数据通过nebula-spark-connector包导入为spark-DataFrame，仅用做数据读取，再通过将数据转化为NetworkX的图结构进行图计算&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/01/08/NetworkX-图论算法应用/9.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="NetworkX" scheme="http://yoursite.com/categories/NetworkX/"/>
    
    
    <category term="nebula" scheme="http://yoursite.com/tags/nebula/"/>
    
    <category term="图算法" scheme="http://yoursite.com/tags/图算法/"/>
    
    <category term="networkx" scheme="http://yoursite.com/tags/networkx/"/>
    
  </entry>
  
  <entry>
    <title>基于VGG16神经网络实现以图搜图</title>
    <link href="http://yoursite.com/2024/01/02/%E5%9F%BA%E4%BA%8EVGG%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%9B%BE%E6%90%9C%E5%9B%BE/"/>
    <id>http://yoursite.com/2024/01/02/%E5%9F%BA%E4%BA%8EVGG%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%9B%BE%E6%90%9C%E5%9B%BE/</id>
    <published>2024-01-02T11:11:22.000Z</published>
    <updated>2024-02-07T03:39:00.650Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><font color="gold"> <strong>·</strong> </font>预先准备一份图片库，并对其中数据进行批处理操作，使用VGG16卷积神经网络提取图像的512维卷积特征，刷入数据库（ClickHouse）记录；</p><p><font color="gold"> <strong>·</strong> </font>上传目标图像进行识图，同样使用VGG16提取目标图像特征，使用CK数据库距离函数进行匹配，高于阈值即可返回识图结果</p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author : tianL.R</span></span><br><span class="line"><span class="comment"># @Email : rtl1312@163.com</span></span><br><span class="line"><span class="comment"># @Time : 2023.11.26</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> keras.applications.vgg16 <span class="keyword">import</span> VGG16</span><br><span class="line"><span class="keyword">from</span> keras.applications.vgg16 <span class="keyword">import</span> preprocess_input</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> linalg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VGG16Net</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.input_shape = (<span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>)</span><br><span class="line">        self.weight = <span class="string">'imagenet'</span></span><br><span class="line">        self.pooling = <span class="string">'max'</span></span><br><span class="line">        self.model_vgg = VGG16(weights=self.weight,</span><br><span class="line">                               input_shape=(self.input_shape[<span class="number">0</span>], self.input_shape[<span class="number">1</span>], self.input_shape[<span class="number">2</span>],),</span><br><span class="line">                               pooling=self.pooling,</span><br><span class="line">                               include_top=<span class="literal">False</span>)</span><br><span class="line">        self.model_vgg.predict(np.zeros((<span class="number">1</span>, <span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detection</span><span class="params">(self, img_path)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        提取VGG16最后一层卷积特征</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># img = image.load_img(img_path, target_size=(self.input_shape[0], self.input_shape[1]))</span></span><br><span class="line">        img = img_path.resize((self.input_shape[<span class="number">0</span>], self.input_shape[<span class="number">1</span>]))</span><br><span class="line">        img = image.img_to_array(img)</span><br><span class="line">        img = np.expand_dims(img, axis=<span class="number">0</span>)</span><br><span class="line">        img = preprocess_input(img)</span><br><span class="line">        feat = self.model_vgg.predict(img)</span><br><span class="line">        norm_feat = feat[<span class="number">0</span>] / linalg.norm(feat[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> norm_feat.tolist()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img1 = <span class="string">'333.jpg'</span></span><br><span class="line">    img2 = <span class="string">'555.jpg'</span></span><br><span class="line">    img1 = Image.open(img1)</span><br><span class="line">    img2 = Image.open(img2)</span><br><span class="line"></span><br><span class="line">    vgg = VGG16Net()</span><br><span class="line">    queryVec1 = np.array(vgg.detection(img1))</span><br><span class="line">    queryVec2 = np.array(vgg.detection(img2))</span><br><span class="line">    scores = np.dot(queryVec1, queryVec2)</span><br><span class="line">    score2 = queryVec1.dot(queryVec2) / (np.linalg.norm(queryVec1) * np.linalg.norm(queryVec2))</span><br><span class="line">    print(scores)</span><br><span class="line">    print(score2)</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;&lt;font color=&quot;gold&quot;&gt; &lt;strong&gt;·&lt;/strong&gt; &lt;/font&gt;预先准备一份图片库，并对其中数据进行批处理操作，使用VGG16卷积神经网络提取图像的512维卷积特征，刷入数据库（ClickHouse）记录；&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;gold&quot;&gt; &lt;strong&gt;·&lt;/strong&gt; &lt;/font&gt;上传目标图像进行识图，同样使用VGG16提取目标图像特征，使用CK数据库距离函数进行匹配，高于阈值即可返回识图结果&lt;/p&gt;
&lt;h2 id=&quot;神经网络&quot;&gt;&lt;a href=&quot;#神经网络&quot; class=&quot;headerlink&quot; title=&quot;神经网络&quot;&gt;&lt;/a&gt;神经网络&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# @Author : tianL.R&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# @Email : rtl1312@163.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# @Time : 2023.11.26&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; PIL &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; keras.applications.vgg16 &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; VGG16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; keras.applications.vgg16 &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; preprocess_input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; keras.preprocessing &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; linalg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;VGG16Net&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.input_shape = (&lt;span class=&quot;number&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.weight = &lt;span class=&quot;string&quot;&gt;&#39;imagenet&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.pooling = &lt;span class=&quot;string&quot;&gt;&#39;max&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.model_vgg = VGG16(weights=self.weight,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               input_shape=(self.input_shape[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], self.input_shape[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], self.input_shape[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               pooling=self.pooling,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               include_top=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.model_vgg.predict(np.zeros((&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;detection&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, img_path)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        提取VGG16最后一层卷积特征&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;        &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# img = image.load_img(img_path, target_size=(self.input_shape[0], self.input_shape[1]))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img = img_path.resize((self.input_shape[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], self.input_shape[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img = image.img_to_array(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img = np.expand_dims(img, axis=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img = preprocess_input(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        feat = self.model_vgg.predict(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        norm_feat = feat[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] / linalg.norm(feat[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; norm_feat.tolist()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img1 = &lt;span class=&quot;string&quot;&gt;&#39;333.jpg&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img2 = &lt;span class=&quot;string&quot;&gt;&#39;555.jpg&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img1 = Image.open(img1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img2 = Image.open(img2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vgg = VGG16Net()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queryVec1 = np.array(vgg.detection(img1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queryVec2 = np.array(vgg.detection(img2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    scores = np.dot(queryVec1, queryVec2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    score2 = queryVec1.dot(queryVec2) / (np.linalg.norm(queryVec1) * np.linalg.norm(queryVec2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(scores)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(score2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="深度学习" scheme="http://yoursite.com/categories/深度学习/"/>
    
    
    <category term="VGG" scheme="http://yoursite.com/tags/VGG/"/>
    
    <category term="卷积神经网络" scheme="http://yoursite.com/tags/卷积神经网络/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络图像分类算法小集</title>
    <link href="http://yoursite.com/2024/01/01/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E5%B0%8F%E9%9B%86/"/>
    <id>http://yoursite.com/2024/01/01/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%E7%AE%97%E6%B3%95%E5%B0%8F%E9%9B%86/</id>
    <published>2024-01-01T02:12:35.000Z</published>
    <updated>2024-04-15T09:32:19.819Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h3 id="训练结构"><a href="#训练结构" class="headerlink" title="训练结构"></a>训练结构</h3><p><font color="gold"><strong>·</strong></font> 在项目根目录下新建数据集文件夹<code>data_set</code>，建立子文件夹（数据集名称）用于存放训练集和测试集；</p><p><font color="gold"><strong>·</strong></font> 在项目根目录下新建数据集文件夹<code>class_j</code>，用于存放分类json文件；</p><p><font color="gold"><strong>·</strong></font> 在项目根目录下新建数据集文件夹<code>models</code>，用于存放训练好的模型文件；</p><p><font color="gold"><strong>·</strong></font> 神经网络<code>model.py</code>；</p><p><font color="gold"><strong>·</strong></font> 训练脚本<code>train.py</code>；</p><p><font color="gold"><strong>·</strong></font> 预测脚本<code>predict.py</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> project</span></span><br><span class="line">├── data_set</span><br><span class="line">│├── data</span><br><span class="line">│     ├── train</span><br><span class="line">│     │    ├── 00001.jpg</span><br><span class="line">│     │    ├── 00002.jpg</span><br><span class="line">│     │    ├── 00003.jpg</span><br><span class="line">│     │    ├── ...</span><br><span class="line">│     │    └── 10000.jpg</span><br><span class="line">│     └── val</span><br><span class="line">│          ├── 00001.jpg</span><br><span class="line">│          ├── 00002.jpg</span><br><span class="line">│          ├── 00003.jpg</span><br><span class="line">│          ├── ...</span><br><span class="line">│          └── 01000.jpg</span><br><span class="line">├── class_j</span><br><span class="line">│├── class_indices.json</span><br><span class="line">├── models</span><br><span class="line">│├── model.pth</span><br><span class="line">├── model.py</span><br><span class="line">├── train.py</span><br><span class="line">└── predict.py</span><br></pre></td></tr></table></figure><h3 id="封装结构"><a href="#封装结构" class="headerlink" title="封装结构"></a>封装结构</h3><p>以<code>GoogLeNet</code>神经网络为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GoogLeNet</span></span><br><span class="line">├── class_j</span><br><span class="line">│├── class_indices.json</span><br><span class="line">│── weights</span><br><span class="line">│├── GoogLeNet_GPU_v1.pth</span><br><span class="line">└── model.py</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h3 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h3><h4 id="神经网络-1"><a href="#神经网络-1" class="headerlink" title="神经网络"></a>神经网络</h4><p><code>model.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">VGG模型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFile</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> PR, vgg_model</span><br><span class="line"></span><br><span class="line">ImageFile.LOAD_TRUNCATED_IMAGES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预训练权重模型</span></span><br><span class="line">model_urls = &#123;</span><br><span class="line">    <span class="string">'vgg11'</span>: <span class="string">'https://download.pytorch.org/models/vgg11-bbd30ac9.pth'</span>,</span><br><span class="line">    <span class="string">'vgg13'</span>: <span class="string">'https://download.pytorch.org/models/vgg13-c768596a.pth'</span>,</span><br><span class="line">    <span class="string">'vgg16'</span>: <span class="string">'https://download.pytorch.org/models/vgg16-397923af.pth'</span>,</span><br><span class="line">    <span class="string">'vgg19'</span>: <span class="string">'https://download.pytorch.org/models/vgg19-dcbb9e9d.pth'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cfgs = &#123;</span><br><span class="line">    <span class="string">'vgg11'</span>: [<span class="number">64</span>, <span class="string">'M'</span>, <span class="number">128</span>, <span class="string">'M'</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">'M'</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">'M'</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">'M'</span>],</span><br><span class="line">    <span class="string">'vgg13'</span>: [<span class="number">64</span>, <span class="number">64</span>, <span class="string">'M'</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="string">'M'</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">'M'</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">'M'</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">'M'</span>],</span><br><span class="line">    <span class="string">'vgg16'</span>: [<span class="number">64</span>, <span class="number">64</span>, <span class="string">'M'</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="string">'M'</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">'M'</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">'M'</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">'M'</span>],</span><br><span class="line">    <span class="string">'vgg19'</span>: [<span class="number">64</span>, <span class="number">64</span>, <span class="string">'M'</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="string">'M'</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">'M'</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">'M'</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">'M'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VGG</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, features, num_classes=<span class="number">1000</span>, init_weights=False)</span>:</span></span><br><span class="line">        super(VGG, self).__init__()</span><br><span class="line">        self.features = features</span><br><span class="line">        self.classifier = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">512</span> * <span class="number">7</span> * <span class="number">7</span>, <span class="number">4096</span>),  <span class="comment"># 第1线性层, 2048 减少参数</span></span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">            nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>),  <span class="comment"># 第2线性层</span></span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">            nn.Linear(<span class="number">4096</span>, num_classes),  <span class="comment"># 第3线性层</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> init_weights:</span><br><span class="line">            self._initialize_weights()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.features(x)  <span class="comment"># N x 3 x 224 x 224</span></span><br><span class="line">        x = torch.flatten(x, start_dim=<span class="number">1</span>)  <span class="comment"># N x 512 x 7 x 7</span></span><br><span class="line">        x = self.classifier(x)  <span class="comment"># N x 512*7*7</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_initialize_weights</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> isinstance(m, nn.Conv2d):</span><br><span class="line">                nn.init.xavier_uniform_(m.weight)</span><br><span class="line">                <span class="keyword">if</span> m.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> isinstance(m, nn.Linear):</span><br><span class="line">                nn.init.xavier_uniform_(m.weight)</span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_features</span><span class="params">(cfg: list)</span>:</span></span><br><span class="line">    layers = []</span><br><span class="line">    in_channels = <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> cfg:</span><br><span class="line">        <span class="keyword">if</span> v == <span class="string">"M"</span>:</span><br><span class="line">            layers += [nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            conv2d = nn.Conv2d(in_channels, v, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">            layers += [conv2d, nn.ReLU(<span class="literal">True</span>)]</span><br><span class="line">            in_channels = v</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vgg</span><span class="params">(model_name=<span class="string">"vgg16"</span>, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> model_name <span class="keyword">in</span> cfgs, <span class="string">"Warning: model number &#123;&#125; not in cfgs dist!"</span>.format(model_name)</span><br><span class="line">    cfg = cfgs[model_name]</span><br><span class="line">    model = VGG(make_features(cfg), **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VGGNetImageClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")</span></span><br><span class="line">        self.device = torch.device(<span class="string">"cpu"</span>)</span><br><span class="line">        self.data_transform = transforms.Compose([</span><br><span class="line">            transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><br><span class="line">        ])</span><br><span class="line">        self.json_path = os.path.join(PR, <span class="string">"im_weight_vgg/class_j/class_indices.json"</span>)</span><br><span class="line">        self.weights_path = os.path.join(PR, <span class="string">f"im_weight_vgg/weights/<span class="subst">&#123;vgg_model&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">        self.model = vgg(model_name=<span class="string">"vgg19"</span>, num_classes=<span class="number">13</span>).to(self.device)</span><br><span class="line">        self.model.load_state_dict(torch.load(self.weights_path, map_location=self.device))</span><br><span class="line">        self.model.eval()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(self.json_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.class_indices = json.load(f)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detection</span><span class="params">(self, img)</span>:</span></span><br><span class="line">        img = self.data_transform(img) <span class="comment"># [N, C H, W]</span></span><br><span class="line">        img = torch.unsqueeze(img, dim=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            output = torch.squeeze(self.model(img.to(self.device))).cpu()</span><br><span class="line">            predict = torch.softmax(output, dim=<span class="number">0</span>)</span><br><span class="line">            predict_cla = torch.argmax(predict).numpy()</span><br><span class="line">            result = &#123;</span><br><span class="line">                <span class="string">'class'</span>: predict_cla.tolist(),</span><br><span class="line">                <span class="string">'prob'</span>: predict[predict_cla].numpy().tolist()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p><code>train.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">训练(GPU)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, datasets, utils</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> vgg</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFile</span><br><span class="line">ImageFile.LOAD_TRUNCATED_IMAGES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line">    print(<span class="string">f"use device is <span class="subst">&#123;device&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    data_transform = &#123;</span><br><span class="line">        <span class="string">"train"</span>: transforms.Compose([</span><br><span class="line">            transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.RandomHorizontalFlip(),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)),</span><br><span class="line">        ]),</span><br><span class="line">        <span class="string">"val"</span>: transforms.Compose([</span><br><span class="line">            transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)),</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">    data_root = os.path.abspath(os.path.join(os.getcwd(), <span class="string">"./"</span>))</span><br><span class="line">    image_path = os.path.join(data_root, <span class="string">"data_set"</span>, <span class="string">"data"</span>)</span><br><span class="line">    <span class="keyword">assert</span> os.path.exists(image_path), <span class="string">"&#123;&#125; path does not exist."</span>.format(image_path)</span><br><span class="line">    train_dataset = datasets.ImageFolder(root=os.path.join(image_path, <span class="string">"train"</span>),</span><br><span class="line">                                         transform=data_transform[<span class="string">"train"</span>]</span><br><span class="line">                                         )</span><br><span class="line">    train_num = len(train_dataset)</span><br><span class="line">    flower_list = train_dataset.class_to_idx</span><br><span class="line">    cla_dict = dict((val, key) <span class="keyword">for</span> key, val <span class="keyword">in</span> flower_list.items())</span><br><span class="line">    json_str = json.dumps(cla_dict, indent=<span class="number">12</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"class_j/class_indices.json"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">        json_file.write(json_str)</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">32</span></span><br><span class="line">    nw = min([os.cpu_count(), batch_size <span class="keyword">if</span> batch_size &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>, <span class="number">8</span>])  <span class="comment"># 线程数计算</span></span><br><span class="line">    nw = <span class="number">0</span></span><br><span class="line">    print(<span class="string">f"Using <span class="subst">&#123;nw&#125;</span> dataloader workers every process."</span>)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_dataset,</span><br><span class="line">                                               batch_size=batch_size,</span><br><span class="line">                                               shuffle=<span class="literal">True</span>,</span><br><span class="line">                                               num_workers=nw</span><br><span class="line">                                               )</span><br><span class="line">    val_dataset = datasets.ImageFolder(root=os.path.join(image_path, <span class="string">"val"</span>),</span><br><span class="line">                                       transform=data_transform[<span class="string">"val"</span>]</span><br><span class="line">                                       )</span><br><span class="line">    val_num = len(val_dataset)</span><br><span class="line">    val_loader = torch.utils.data.DataLoader(val_dataset,</span><br><span class="line">                                             batch_size=<span class="number">4</span>,</span><br><span class="line">                                             shuffle=<span class="literal">False</span>,</span><br><span class="line">                                             num_workers=nw</span><br><span class="line">                                             )</span><br><span class="line">    print(<span class="string">f"Using <span class="subst">&#123;train_num&#125;</span> images for training, <span class="subst">&#123;val_num&#125;</span> images for validation."</span>)</span><br><span class="line"></span><br><span class="line">    model_name = <span class="string">"vgg19"</span></span><br><span class="line">    net = vgg(model_name=model_name, num_classes=<span class="number">13</span>, init_weights=<span class="literal">True</span>)  <span class="comment"># 实例化网络(13分类)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># """ 加载预训练模型权重</span></span><br><span class="line">    model_weight_path = <span class="string">'./models/VGG19Net_GPU_v5.pth'</span></span><br><span class="line">    net.load_state_dict(torch.load(model_weight_path, map_location=<span class="string">'cpu'</span>))</span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    net.to(device)</span><br><span class="line">    loss_function = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = optim.Adam(net.parameters(), lr=<span class="number">0.0001</span>)</span><br><span class="line"></span><br><span class="line">    epochs = <span class="number">300</span></span><br><span class="line">    save_path = <span class="string">"./VGG19Net_GPU_RE.pth"</span></span><br><span class="line">    best_accuracy = <span class="number">0.0</span></span><br><span class="line">    train_steps = len(train_loader)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        net.train()</span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        train_bar = tqdm(train_loader, file=sys.stdout)</span><br><span class="line">        <span class="keyword">for</span> step, data <span class="keyword">in</span> enumerate(train_bar):</span><br><span class="line">            images, labels = data</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            outputs = net(images.to(device))</span><br><span class="line">            loss = loss_function(outputs, labels.to(device))</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            train_bar.desc = <span class="string">"train epoch [&#123;&#125;/&#123;&#125;] loss:&#123;:.3f&#125;"</span>.format(epoch + <span class="number">1</span>,</span><br><span class="line">                                                                      epochs,</span><br><span class="line">                                                                      loss</span><br><span class="line">                                                                      )</span><br><span class="line">        <span class="comment"># 验证</span></span><br><span class="line">        net.eval()</span><br><span class="line">        acc = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            val_bar = tqdm(val_loader, file=sys.stdout)</span><br><span class="line">            <span class="keyword">for</span> val_data <span class="keyword">in</span> val_bar:</span><br><span class="line">                val_images, val_labels = val_data</span><br><span class="line">                outputs = net(val_images.to(device))</span><br><span class="line">                predict_y = torch.max(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                acc += torch.eq(predict_y, val_labels.to(device)).sum().item()</span><br><span class="line">        val_accuracy = acc / val_num</span><br><span class="line">        print(<span class="string">"[epoch %d ] train_loss: %3f    val_accurancy: %3f"</span> %</span><br><span class="line">              (epoch + <span class="number">1</span>, running_loss / train_steps, val_accuracy))</span><br><span class="line">        <span class="keyword">if</span> val_accuracy &gt; best_accuracy:</span><br><span class="line">            best_accuracy = val_accuracy</span><br><span class="line">        torch.save(net.state_dict(), save_path+str(val_accuracy))</span><br><span class="line">    print(<span class="string">"Finshed Training."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.environ[<span class="string">"CUDA_VISIBLE_DEVICES"</span>] = <span class="string">"1"</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><p><code>predict.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">预测</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFile</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> im_weight_vgg.model <span class="keyword">import</span> VGGNetImageClass</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    im_class = VGGNetImageClass()</span><br><span class="line">    url = <span class="string">'http://192.168.3.18:300/files/group1/M00/11/0E/wKgCBWRUgjWAGTfNAAEKiw0XSZc371.jpg'</span></span><br><span class="line">    img_bytes = urlopen(url).read()</span><br><span class="line">    img_pil = Image.open(BytesIO(img_bytes))</span><br><span class="line"></span><br><span class="line">    print(im_class.detection(img_pil))</span><br><span class="line">    print(im_class.detection(Image.open(<span class="string">"-532576361772532412_120.jpg"</span>).convert(<span class="string">"RGB"</span>)))</span><br></pre></td></tr></table></figure><p>附：vgg16+transformer</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># VGG16神经网络定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VGG16</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"""Vgg16 Net"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, requires_grad=False)</span>:</span></span><br><span class="line">        super(VGG16, self).__init__()</span><br><span class="line">        vgg_pretrained_features = models.vgg16(pretrained=<span class="literal">True</span>).features</span><br><span class="line">        self.slice1 = torch.nn.Sequential()</span><br><span class="line">        self.slice2 = torch.nn.Sequential()</span><br><span class="line">        self.slice3 = torch.nn.Sequential()</span><br><span class="line">        self.slice4 = torch.nn.Sequential()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            self.slice1.add_module(str(x), vgg_pretrained_features[x])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>, <span class="number">9</span>):</span><br><span class="line">            self.slice2.add_module(str(x), vgg_pretrained_features[x])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>, <span class="number">16</span>):</span><br><span class="line">            self.slice3.add_module(str(x), vgg_pretrained_features[x])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">16</span>, <span class="number">23</span>):</span><br><span class="line">            self.slice4.add_module(str(x), vgg_pretrained_features[x])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> requires_grad:</span><br><span class="line">            <span class="keyword">for</span> param <span class="keyword">in</span> self.parameters():</span><br><span class="line">                param.requires_grad = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        h = self.slice1(X)</span><br><span class="line">        h_relu1_2 = h</span><br><span class="line">        h = self.slice2(h)</span><br><span class="line">        h_relu2_2 = h</span><br><span class="line">        h = self.slice3(h)</span><br><span class="line">        h_relu3_3 = h</span><br><span class="line">        h = self.slice4(h)</span><br><span class="line">        h_relu4_3 = h</span><br><span class="line"></span><br><span class="line">        vgg_outputs = namedtuple(<span class="string">"VggOutputs"</span>, [<span class="string">"relu1_2"</span>, <span class="string">"relu2_2"</span>, <span class="string">"relu3_3"</span>, <span class="string">"relu4_3"</span>])</span><br><span class="line">        output = vgg_outputs(h_relu1_2, h_relu2_2, h_relu3_3, h_relu4_3)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransformerNet</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(TransformerNet, self).__init__()</span><br><span class="line">        self.model = nn.Sequential(</span><br><span class="line">            ConvBlock(<span class="number">3</span>, <span class="number">32</span>, kernel_size=<span class="number">9</span>, stride=<span class="number">1</span>),</span><br><span class="line">            ConvBlock(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">            ConvBlock(<span class="number">64</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">            ResidualBlock(<span class="number">128</span>),</span><br><span class="line">            ResidualBlock(<span class="number">128</span>),</span><br><span class="line">            ResidualBlock(<span class="number">128</span>),</span><br><span class="line">            ResidualBlock(<span class="number">128</span>),</span><br><span class="line">            ResidualBlock(<span class="number">128</span>),</span><br><span class="line">            ConvBlock(<span class="number">128</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, upsample=<span class="literal">True</span>),</span><br><span class="line">            ConvBlock(<span class="number">64</span>, <span class="number">32</span>, kernel_size=<span class="number">3</span>, upsample=<span class="literal">True</span>),</span><br><span class="line">            ConvBlock(<span class="number">32</span>, <span class="number">3</span>, kernel_size=<span class="number">9</span>, stride=<span class="number">1</span>, normalize=<span class="literal">False</span>, relu=<span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.model(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResidualBlock</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, channels)</span>:</span></span><br><span class="line">        super(ResidualBlock, self).__init__()</span><br><span class="line">        self.block = nn.Sequential(</span><br><span class="line">            ConvBlock(channels, channels, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, normalize=<span class="literal">True</span>, relu=<span class="literal">True</span>),</span><br><span class="line">            ConvBlock(channels, channels, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, normalize=<span class="literal">True</span>, relu=<span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.block(x) + x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvBlock</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, upsample=False, normalize=True, relu=True)</span>:</span></span><br><span class="line">        super(ConvBlock, self).__init__()</span><br><span class="line">        self.upsample = upsample</span><br><span class="line">        self.block = nn.Sequential(</span><br><span class="line">            nn.ReflectionPad2d(kernel_size // <span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels, out_channels, kernel_size, (stride,))</span><br><span class="line">        )</span><br><span class="line">        self.norm = nn.InstanceNorm2d(out_channels, affine=<span class="literal">True</span>) <span class="keyword">if</span> normalize <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        self.relu = relu</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.upsample:</span><br><span class="line">            x = F.interpolate(x, scale_factor=<span class="number">2</span>)</span><br><span class="line">        x = self.block(x)</span><br><span class="line">        <span class="keyword">if</span> self.norm <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            x = self.norm(x)</span><br><span class="line">        <span class="keyword">if</span> self.relu:</span><br><span class="line">            x = F.relu(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    input1 = torch.rand([<span class="number">224</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>])</span><br><span class="line">    model_x = VGG16()</span><br><span class="line">    print(model_x)</span><br></pre></td></tr></table></figure><h3 id="GoogLeNet"><a href="#GoogLeNet" class="headerlink" title="GoogLeNet"></a>GoogLeNet</h3><p><code>model.py</code></p><h4 id="神经网络-2"><a href="#神经网络-2" class="headerlink" title="神经网络"></a>神经网络</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> GoogLeNet_model</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 定义卷积+激活函数操作模板</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicConv2d</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_channels, out_channels, **kwargs)</span>:</span></span><br><span class="line">        super(BasicConv2d, self).__init__()</span><br><span class="line">        self.conv = nn.Conv2d(in_channels, out_channels, **kwargs)</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        x = self.relu(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 定义 Iception 辅助分类器模板</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InceptionAux</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_channels, num_classes)</span>:</span></span><br><span class="line">        super(InceptionAux, self).__init__()</span><br><span class="line">        self.averagePool = nn.AvgPool2d(kernel_size=<span class="number">5</span>, stride=<span class="number">3</span>)</span><br><span class="line">        self.conv = BasicConv2d(in_channels, <span class="number">128</span>, kernel_size=<span class="number">1</span>)  <span class="comment"># output = [batch, 128, 4, 4]</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">2048</span>, <span class="number">1024</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">1024</span>, num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># aux1: N*512*14*14, aux2: N*528*14*14</span></span><br><span class="line">        x = self.averagePool(x)</span><br><span class="line">        <span class="comment"># aux1: N*512*4*4, aux2: N*528*4*4</span></span><br><span class="line">        x = self.conv(x)</span><br><span class="line">        <span class="comment"># N*128*4*4</span></span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>)</span><br><span class="line">        x = F.dropout(x, <span class="number">0.5</span>, training=self.training)</span><br><span class="line">        <span class="comment"># N*2048</span></span><br><span class="line">        x = F.relu(self.fc1(x), inplace=<span class="literal">True</span>)</span><br><span class="line">        x = F.dropout(x, <span class="number">0.5</span>, training=self.training)</span><br><span class="line">        <span class="comment"># N*1024</span></span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="comment"># N*num_classes</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Inception 模板 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inception</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_channels, ch1x1, ch3x3red, ch3x3, ch5x5red, ch5x5, pool_proj)</span>:</span></span><br><span class="line">        super(Inception, self).__init__()</span><br><span class="line">        self.branch1 = BasicConv2d(in_channels, ch1x1, kernel_size=<span class="number">1</span>)</span><br><span class="line">        self.branch2 = nn.Sequential(</span><br><span class="line">            BasicConv2d(in_channels, ch3x3red, kernel_size=<span class="number">1</span>),</span><br><span class="line">            BasicConv2d(ch3x3red, ch3x3, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)  <span class="comment"># 保证输出大小等于输入大小</span></span><br><span class="line">        )</span><br><span class="line">        self.branch3 = nn.Sequential(</span><br><span class="line">            BasicConv2d(in_channels, ch5x5red, kernel_size=<span class="number">1</span>),</span><br><span class="line">            <span class="comment"># 官方 3x3, https://github.com/pytorch/vision/issues/906</span></span><br><span class="line">            BasicConv2d(ch5x5red, ch5x5, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>)  <span class="comment"># 输出大小=输入大小</span></span><br><span class="line">        )</span><br><span class="line">        self.branch4 = nn.Sequential(</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">            BasicConv2d(in_channels, pool_proj, kernel_size=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        branch1 = self.branch1(x)</span><br><span class="line">        branch2 = self.branch2(x)</span><br><span class="line">        branch3 = self.branch3(x)</span><br><span class="line">        branch4 = self.branch4(x)</span><br><span class="line">        outputs = [branch1, branch2, branch3, branch4]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> torch.cat(outputs, <span class="number">1</span>)  <span class="comment"># 拼接数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># GoogLeNet 模型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoogLeNet</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_classes=<span class="number">1000</span>, aux_logits=True, init_weights=False)</span>:</span></span><br><span class="line">        super(GoogLeNet, self).__init__()</span><br><span class="line">        self.aux_logits = aux_logits</span><br><span class="line"></span><br><span class="line">        self.conv1 = BasicConv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">7</span>, stride=<span class="number">2</span>, padding=<span class="number">3</span>)</span><br><span class="line">        self.maxpool1 = nn.MaxPool2d(<span class="number">3</span>, stride=<span class="number">2</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.conv2 = BasicConv2d(<span class="number">64</span>, <span class="number">64</span>, kernel_size=<span class="number">1</span>)</span><br><span class="line">        self.conv3 = BasicConv2d(<span class="number">64</span>, <span class="number">192</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.maxpool2 = nn.MaxPool2d(<span class="number">3</span>, stride=<span class="number">2</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.inception3a = Inception(<span class="number">192</span>, <span class="number">64</span>, <span class="number">96</span>, <span class="number">128</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">        self.inception3b = Inception(<span class="number">256</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">192</span>, <span class="number">32</span>, <span class="number">96</span>, <span class="number">64</span>)</span><br><span class="line">        self.maxpool3 = nn.MaxPool2d(<span class="number">3</span>, stride=<span class="number">2</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.inception4a = Inception(<span class="number">480</span>, <span class="number">192</span>, <span class="number">96</span>, <span class="number">208</span>, <span class="number">16</span>, <span class="number">48</span>, <span class="number">64</span>)</span><br><span class="line">        self.inception4b = Inception(<span class="number">512</span>, <span class="number">160</span>, <span class="number">112</span>, <span class="number">224</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.inception4c = Inception(<span class="number">512</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.inception4d = Inception(<span class="number">512</span>, <span class="number">112</span>, <span class="number">144</span>, <span class="number">288</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">        self.inception4e = Inception(<span class="number">528</span>, <span class="number">256</span>, <span class="number">160</span>, <span class="number">320</span>, <span class="number">32</span>, <span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">        self.maxpool4 = nn.MaxPool2d(<span class="number">3</span>, stride=<span class="number">2</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.inception5a = Inception(<span class="number">832</span>, <span class="number">256</span>, <span class="number">160</span>, <span class="number">320</span>, <span class="number">32</span>, <span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">        self.inception5b = Inception(<span class="number">832</span>, <span class="number">384</span>, <span class="number">192</span>, <span class="number">384</span>, <span class="number">48</span>, <span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.aux_logits:</span><br><span class="line">            self.aux1 = InceptionAux(<span class="number">512</span>, num_classes)</span><br><span class="line">            self.aux2 = InceptionAux(<span class="number">528</span>, num_classes)</span><br><span class="line"></span><br><span class="line">        self.avgpool = nn.AdaptiveAvgPool2d((<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        self.dropout = nn.Dropout(<span class="number">0.4</span>)</span><br><span class="line">        self.fc = nn.Linear(<span class="number">1024</span>, num_classes)</span><br><span class="line">        <span class="keyword">if</span> init_weights:</span><br><span class="line">            self._initialize_weights()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># N*3*224*224</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="comment"># N*64*112*112</span></span><br><span class="line">        x = self.maxpool1(x)</span><br><span class="line">        <span class="comment"># N*64*56*56</span></span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        <span class="comment"># N*64*56*56</span></span><br><span class="line">        x = self.conv3(x)</span><br><span class="line">        <span class="comment"># N*192*56*56</span></span><br><span class="line">        x = self.maxpool2(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># N*192*28*28</span></span><br><span class="line">        x = self.inception3a(x)</span><br><span class="line">        <span class="comment"># N*256*28*28</span></span><br><span class="line">        x = self.inception3b(x)</span><br><span class="line">        <span class="comment"># N*480*28*28</span></span><br><span class="line">        x = self.maxpool3(x)</span><br><span class="line">        <span class="comment"># N*480*14*14</span></span><br><span class="line">        x = self.inception4a(x)</span><br><span class="line">        <span class="comment"># N*512*14*14</span></span><br><span class="line">        <span class="keyword">if</span> self.training <span class="keyword">and</span> self.aux_logits:  <span class="comment"># eval model lose this layer</span></span><br><span class="line">            aux1 = self.aux1(x)</span><br><span class="line"></span><br><span class="line">        x = self.inception4b(x)</span><br><span class="line">        <span class="comment"># N*512*14*14</span></span><br><span class="line">        x = self.inception4c(x)</span><br><span class="line">        <span class="comment"># N*512*14*14</span></span><br><span class="line">        x = self.inception4d(x)</span><br><span class="line">        <span class="comment"># N*528*14*14</span></span><br><span class="line">        <span class="keyword">if</span> self.training <span class="keyword">and</span> self.aux_logits:  <span class="comment"># eval model lose this layer</span></span><br><span class="line">            aux2 = self.aux2(x)</span><br><span class="line"></span><br><span class="line">        x = self.inception4e(x)</span><br><span class="line">        <span class="comment"># N*832*14*14</span></span><br><span class="line">        x = self.maxpool4(x)</span><br><span class="line">        <span class="comment"># N*832*7*7</span></span><br><span class="line">        x = self.inception5a(x)</span><br><span class="line">        <span class="comment"># N*832*7*7</span></span><br><span class="line">        x = self.inception5b(x)</span><br><span class="line">        <span class="comment"># N*1024*7*7</span></span><br><span class="line"></span><br><span class="line">        x = self.avgpool(x)</span><br><span class="line">        <span class="comment"># N*1024*1*1</span></span><br><span class="line">        x = torch.flatten(x, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># N*1024</span></span><br><span class="line">        x = self.dropout(x)</span><br><span class="line">        x = self.fc(x)</span><br><span class="line">        <span class="comment"># N*1000 (num_classes)</span></span><br><span class="line">        <span class="keyword">if</span> self.training <span class="keyword">and</span> self.aux_logits:  <span class="comment"># eval model lose this layer</span></span><br><span class="line">            <span class="keyword">return</span> x, aux2, aux1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_initialize_weights</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> isinstance(m, nn.Conv2d):</span><br><span class="line">                nn.init.kaiming_normal_(m.weight, mode=<span class="string">'fan_out'</span>, nonlinearity=<span class="string">'relu'</span>)</span><br><span class="line">                <span class="keyword">if</span> m.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> isinstance(m, nn.Linear):</span><br><span class="line">                nn.init.normal_(m.weight, <span class="number">0</span>, <span class="number">0.01</span>)</span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoogLeNetImageClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")</span></span><br><span class="line">        self.device = torch.device(<span class="string">"cpu"</span>)</span><br><span class="line">        self.data_transform = transforms.Compose([</span><br><span class="line">            transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><br><span class="line">        ])</span><br><span class="line">        self.json_path = <span class="string">"im_weight_gln/class_j/class_indices.json"</span></span><br><span class="line">        self.weights_path = <span class="string">f"im_weight_gln/weights/<span class="subst">&#123;GoogLeNet_model&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">        self.model = GoogLeNet(num_classes=<span class="number">13</span>, aux_logits=<span class="literal">False</span>).to(self.device)</span><br><span class="line">        self.model.load_state_dict(torch.load(self.weights_path, map_location=self.device), strict=<span class="literal">False</span>)</span><br><span class="line">        self.model.eval()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(self.json_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.class_indices = json.load(f)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detection</span><span class="params">(self, img)</span>:</span></span><br><span class="line">        img = self.data_transform(img)  <span class="comment"># [N, C H, W]</span></span><br><span class="line">        img = torch.unsqueeze(img, dim=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            output = torch.squeeze(self.model(img.to(self.device))).cpu()</span><br><span class="line">            predict = torch.softmax(output, dim=<span class="number">0</span>)</span><br><span class="line">            predict_cla = torch.argmax(predict).numpy()</span><br><span class="line">            result = &#123;</span><br><span class="line">                <span class="string">'class'</span>: predict_cla.tolist(),</span><br><span class="line">                <span class="string">'prob'</span>: predict[predict_cla].numpy().tolist()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h4 id="训练-1"><a href="#训练-1" class="headerlink" title="训练"></a>训练</h4><p><code>train.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">训练(GPU)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, datasets, utils</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> GoogLeNet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line">    print(<span class="string">f"use device is <span class="subst">&#123;device&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    data_transform = &#123;</span><br><span class="line">        <span class="string">"train"</span>: transforms.Compose([</span><br><span class="line">            transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.RandomHorizontalFlip(),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)),</span><br><span class="line">        ]),</span><br><span class="line">        <span class="string">"val"</span>: transforms.Compose([</span><br><span class="line">            transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)),</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">    data_root = os.path.abspath(os.path.join(os.getcwd(), <span class="string">"./"</span>))</span><br><span class="line">    image_path = <span class="string">"/exp/work/algorithm/vgg/data_set/data"</span></span><br><span class="line">    <span class="keyword">assert</span> os.path.exists(image_path), <span class="string">"&#123;&#125; path does not exist."</span>.format(image_path)</span><br><span class="line">    train_dataset = datasets.ImageFolder(root=os.path.join(image_path, <span class="string">"train"</span>),</span><br><span class="line">                                         transform=data_transform[<span class="string">"train"</span>]</span><br><span class="line">                                         )</span><br><span class="line">    train_num = len(train_dataset)</span><br><span class="line">    flower_list = train_dataset.class_to_idx</span><br><span class="line">    cla_dict = dict((val, key) <span class="keyword">for</span> key, val <span class="keyword">in</span> flower_list.items())</span><br><span class="line">    json_str = json.dumps(cla_dict, indent=<span class="number">12</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"calss_indices.json"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">        json_file.write(json_str)</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">32</span></span><br><span class="line">    nw = min([os.cpu_count(), batch_size <span class="keyword">if</span> batch_size &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>, <span class="number">8</span>])  <span class="comment"># 线程数计算</span></span><br><span class="line">    nw = <span class="number">0</span></span><br><span class="line">    print(<span class="string">f"Using <span class="subst">&#123;nw&#125;</span> dataloader workers every process."</span>)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_dataset,</span><br><span class="line">                                               batch_size=batch_size,</span><br><span class="line">                                               shuffle=<span class="literal">True</span>,</span><br><span class="line">                                               num_workers=nw</span><br><span class="line">                                               )</span><br><span class="line">    val_dataset = datasets.ImageFolder(root=os.path.join(image_path, <span class="string">"val"</span>),</span><br><span class="line">                                       transform=data_transform[<span class="string">"val"</span>]</span><br><span class="line">                                       )</span><br><span class="line">    val_num = len(val_dataset)</span><br><span class="line">    val_loader = torch.utils.data.DataLoader(val_dataset,</span><br><span class="line">                                             batch_size=<span class="number">4</span>,</span><br><span class="line">                                             shuffle=<span class="literal">False</span>,</span><br><span class="line">                                             num_workers=nw</span><br><span class="line">                                             )</span><br><span class="line">    print(<span class="string">f"Using <span class="subst">&#123;train_num&#125;</span> images for training, <span class="subst">&#123;val_num&#125;</span> images for validation."</span>)</span><br><span class="line"></span><br><span class="line">    net = GoogLeNet(num_classes=<span class="number">13</span>, aux_logits=<span class="literal">True</span>, init_weights=<span class="literal">True</span>)  <span class="comment"># 实例化网络(5分类)</span></span><br><span class="line">    net.to(device)</span><br><span class="line">    loss_function = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = optim.Adam(net.parameters(), lr=<span class="number">0.0001</span>)</span><br><span class="line"></span><br><span class="line">    epochs = <span class="number">300</span></span><br><span class="line">    save_path = <span class="string">"./GoogLeNet_GPU.pth"</span></span><br><span class="line">    best_accuracy = <span class="number">0.0</span></span><br><span class="line">    train_steps = len(train_loader)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        net.train()</span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        train_bar = tqdm(train_loader, file=sys.stdout)</span><br><span class="line">        <span class="keyword">for</span> step, data <span class="keyword">in</span> enumerate(train_bar):</span><br><span class="line">            images, labels = data</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            logits, aux_logits2, aux_logits1 = net(images.to(device))</span><br><span class="line">            loss0 = loss_function(logits, labels.to(device))</span><br><span class="line">            loss1 = loss_function(aux_logits1, labels.to(device))</span><br><span class="line">            loss2 = loss_function(aux_logits2, labels.to(device))</span><br><span class="line">            loss = loss0 + loss1 * <span class="number">0.3</span> + loss2 * <span class="number">0.3</span></span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            train_bar.desc = <span class="string">"train epoch [&#123;&#125;/&#123;&#125;] loss:&#123;:.3f&#125;"</span>.format(epoch + <span class="number">1</span>,</span><br><span class="line">                                                                      epochs,</span><br><span class="line">                                                                      loss</span><br><span class="line">                                                                      )</span><br><span class="line">        <span class="comment"># 验证</span></span><br><span class="line">        net.eval()</span><br><span class="line">        acc = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            val_bar = tqdm(val_loader, file=sys.stdout)</span><br><span class="line">            <span class="keyword">for</span> val_data <span class="keyword">in</span> val_bar:</span><br><span class="line">                val_images, val_labels = val_data</span><br><span class="line">                outputs = net(val_images.to(device))</span><br><span class="line">                predict_y = torch.max(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                acc += torch.eq(predict_y, val_labels.to(device)).sum().item()</span><br><span class="line">        val_accuracy = acc / val_num</span><br><span class="line">        print(<span class="string">"[epoch %d ] train_loss: %3f    val_accurancy: %3f"</span> %</span><br><span class="line">              (epoch + <span class="number">1</span>, running_loss / train_steps, val_accuracy))</span><br><span class="line">        <span class="keyword">if</span> val_accuracy &gt; best_accuracy:</span><br><span class="line">            best_accuracy = val_accuracy</span><br><span class="line">            torch.save(net.state_dict(), save_path)</span><br><span class="line">    print(<span class="string">"Finshed Training."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    os.environ[<span class="string">"CUDA_VISIBLE_DEVICES"</span>] = <span class="string">"1"</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="预测-1"><a href="#预测-1" class="headerlink" title="预测"></a>预测</h4><p><code>predict.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">预测</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFile</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> im_weight_gln.model <span class="keyword">import</span> GoogLeNetImageClass</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    im_class = GoogLeNetImageClass()</span><br><span class="line">    url = <span class="string">'http://192.168.3.18:300/files/group1/M00/11/0E/wKgCBWRUgjWAGTfNAAEKiw0XSZc371.jpg'</span></span><br><span class="line">    img_bytes = urlopen(url).read()</span><br><span class="line">    img_pil = Image.open(BytesIO(img_bytes))</span><br><span class="line"></span><br><span class="line">    print(im_class.detection(img_pil))</span><br><span class="line">    print(im_class.detection(Image.open(<span class="string">"-532576361772532412_120.jpg"</span>).convert(<span class="string">"RGB"</span>)))</span><br></pre></td></tr></table></figure><h3 id="ResNet-ResNext"><a href="#ResNet-ResNext" class="headerlink" title="ResNet/ResNext"></a>ResNet/ResNext</h3><h4 id="神经网络-3"><a href="#神经网络-3" class="headerlink" title="神经网络"></a>神经网络</h4><p><code>model.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ResNetr模型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFile</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> PR, ResNet_model</span><br><span class="line"></span><br><span class="line">ImageFile.LOAD_TRUNCATED_IMAGES = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">model_urls = &#123;</span><br><span class="line">    <span class="string">'resnet18'</span>: <span class="string">'https://download.pytorch.org/models/resnet18-5c106cde.pth'</span>,</span><br><span class="line">    <span class="string">'resnet34'</span>: <span class="string">'https://download.pytorch.org/models/resnet34-333f7ec4.pth'</span>,</span><br><span class="line">    <span class="string">'resnet50'</span>: <span class="string">'https://download.pytorch.org/models/resnet50-19c8e357.pth'</span>,</span><br><span class="line">    <span class="string">'resnet101'</span>: <span class="string">'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'</span>,</span><br><span class="line">    <span class="string">'resnet152'</span>: <span class="string">'https://download.pytorch.org/models/resnet152-b121ed2d.pth'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 定义 BasicBlock 模块</span></span><br><span class="line"><span class="string"># ResNet18/34的残差结构, 用的是2个3x3大小的卷积</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicBlock</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    expansion = <span class="number">1</span>  <span class="comment"># 残差结构中, 判断主分支的卷积核个数是否发生变化，不变则为1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_channel, out_channel, stride=<span class="number">1</span>, downsample=None, **kwargs)</span>:</span>  <span class="comment"># downsample 对应虚线残差结构</span></span><br><span class="line">        super(BasicBlock, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=in_channel, out_channels=out_channel,</span><br><span class="line">                               kernel_size=<span class="number">3</span>, stride=stride, padding=<span class="number">1</span>, bias=<span class="literal">False</span></span><br><span class="line">                               )</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(out_channel)</span><br><span class="line">        self.relu = nn.ReLU()</span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels=out_channel, out_channels=out_channel,</span><br><span class="line">                               kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>, bias=<span class="literal">False</span></span><br><span class="line">                               )</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(out_channel)</span><br><span class="line">        self.downsample = downsample</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        identity = x</span><br><span class="line">        <span class="keyword">if</span> self.downsample <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  <span class="comment"># 虚线残差结构，需要下采样</span></span><br><span class="line">            identity = self.downsample(x)  <span class="comment"># 捷径分支short cut</span></span><br><span class="line"></span><br><span class="line">        out = self.conv1(x)</span><br><span class="line">        out = self.bn1(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.conv2(out)</span><br><span class="line">        out = self.bn2(out)</span><br><span class="line"></span><br><span class="line">        out += identity</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 定义 Bottleneck 模块</span></span><br><span class="line"><span class="string"># ResNet50/101/152的残差结构，用的是1x1+3x3+1x1的卷积</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bottleneck</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    #   注意：原论文中，在虚线残差结构的主分支上，第一个1x1卷积层的步距是2，第二个3x3卷积层步距是1。</span></span><br><span class="line"><span class="string">    #  但在pytorch官方实现过程中是第一个1x1卷积层的步距是1，第二个3x3卷积层步距是2，</span></span><br><span class="line"><span class="string">    #   这么做的好处是能够在top1上提升大概0.5%的准确率。</span></span><br><span class="line"><span class="string">    #   可参考Resnet v1.5 https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">    expansion = <span class="number">4</span>  <span class="comment"># 残差结构中第三层卷积核个数是第1/2层卷积核个数的4倍</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_channel, out_channel, stride=<span class="number">1</span>, downsample=None, groups=<span class="number">1</span>, width_per_group=<span class="number">64</span>)</span>:</span></span><br><span class="line">        super(Bottleneck, self).__init__()</span><br><span class="line"></span><br><span class="line">        width = int(out_channel * (width_per_group / <span class="number">64.</span>)) * groups</span><br><span class="line"></span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=in_channel, out_channels=width, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(width)</span><br><span class="line"></span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels=width, out_channels=width, groups=groups,</span><br><span class="line">                               kernel_size=<span class="number">3</span>, stride=stride, bias=<span class="literal">False</span>, padding=<span class="number">1</span></span><br><span class="line">                               )</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(width)</span><br><span class="line"></span><br><span class="line">        self.conv3 = nn.Conv2d(in_channels=width, out_channels=out_channel * self.expansion,</span><br><span class="line">                               kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn3 = nn.BatchNorm2d(out_channel * self.expansion)</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.downsample = downsample</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        identity = x</span><br><span class="line">        <span class="keyword">if</span> self.downsample <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            identity = self.downsample(x)  <span class="comment"># 捷径分支short cut</span></span><br><span class="line"></span><br><span class="line">        out = self.conv1(x)</span><br><span class="line">        out = self.bn1(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.conv2(out)</span><br><span class="line">        out = self.bn2(out)</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        out = self.conv3(out)</span><br><span class="line">        out = self.bn3(out)</span><br><span class="line"></span><br><span class="line">        out += identity</span><br><span class="line">        out = self.relu(out)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 残差网络结构</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="comment"># block = BasicBlock or Bottleneck</span></span><br><span class="line">    <span class="comment"># blocks_num 为残差结构中 conv2_x~conv5_x 中残差块个数, 一个列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, block, blocks_num, num_classes=<span class="number">1000</span>, include_top=True, groups=<span class="number">1</span>, width_per_group=<span class="number">64</span>)</span>:</span></span><br><span class="line">        super(ResNet, self).__init__()</span><br><span class="line">        self.include_top = include_top</span><br><span class="line">        self.in_channel = <span class="number">64</span></span><br><span class="line">        self.groups = groups</span><br><span class="line">        self.width_per_group = width_per_group</span><br><span class="line"></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, self.in_channel, kernel_size=<span class="number">7</span>, stride=<span class="number">2</span>, padding=<span class="number">3</span>, bias=<span class="literal">False</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(self.in_channel)</span><br><span class="line">        self.relu = nn.ReLU(inplace=<span class="literal">True</span>)</span><br><span class="line">        self.maxpool = nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.layer1 = self._make_layer(block, <span class="number">64</span>, blocks_num[<span class="number">0</span>])</span><br><span class="line">        self.layer2 = self._make_layer(block, <span class="number">128</span>, blocks_num[<span class="number">1</span>], stride=<span class="number">2</span>)</span><br><span class="line">        self.layer3 = self._make_layer(block, <span class="number">256</span>, blocks_num[<span class="number">2</span>], stride=<span class="number">2</span>)</span><br><span class="line">        self.layer4 = self._make_layer(block, <span class="number">512</span>, blocks_num[<span class="number">3</span>], stride=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> self.include_top:</span><br><span class="line">            self.avgpool = nn.AdaptiveAvgPool2d((<span class="number">1</span>, <span class="number">1</span>))  <span class="comment"># output size = (1, 1)</span></span><br><span class="line">            self.fc = nn.Linear(<span class="number">512</span> * block.expansion, num_classes)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> isinstance(m, nn.Conv2d):</span><br><span class="line">                nn.init.kaiming_normal_(m.weight, mode=<span class="string">'fan_out'</span>, nonlinearity=<span class="string">'relu'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># channel 为残差结构中第1层卷积核个数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_make_layer</span><span class="params">(self, block, channel, block_num, stride=<span class="number">1</span>)</span>:</span></span><br><span class="line">        downsample = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># ResNet50/101/152 的残差结构, block.expansion=4</span></span><br><span class="line">        <span class="keyword">if</span> stride != <span class="number">1</span> <span class="keyword">or</span> self.in_channel != channel * block.expansion:</span><br><span class="line">            downsample = nn.Sequential(</span><br><span class="line">                nn.Conv2d(self.in_channel, channel * block.expansion, kernel_size=<span class="number">1</span>, stride=stride, bias=<span class="literal">False</span>),</span><br><span class="line">                nn.BatchNorm2d(channel * block.expansion)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        layers = []</span><br><span class="line">        layers.append(block(self.in_channel,</span><br><span class="line">                            channel,</span><br><span class="line">                            downsample=downsample,</span><br><span class="line">                            stride=stride,</span><br><span class="line">                            groups=self.groups,</span><br><span class="line">                            width_per_group=self.width_per_group,</span><br><span class="line">                            ))</span><br><span class="line">        self.in_channel = channel * block.expansion</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1</span>, block_num):</span><br><span class="line">            layers.append(block(self.in_channel,</span><br><span class="line">                                channel,</span><br><span class="line">                                groups=self.groups,</span><br><span class="line">                                width_per_group=self.width_per_group,</span><br><span class="line">                                ))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        x = self.bn1(x)</span><br><span class="line">        x = self.relu(x)</span><br><span class="line">        x = self.maxpool(x)</span><br><span class="line"></span><br><span class="line">        x = self.layer1(x)</span><br><span class="line">        x = self.layer2(x)</span><br><span class="line">        x = self.layer3(x)</span><br><span class="line">        x = self.layer4(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.include_top:</span><br><span class="line">            x = self.avgpool(x)</span><br><span class="line">            x = torch.flatten(x, <span class="number">1</span>)</span><br><span class="line">            x = self.fc(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># resnet34 结构</span></span><br><span class="line"><span class="string"># https://download.pytorch.org/models/resnet34-333f7ec4.pth</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resnet34</span><span class="params">(num_classes=<span class="number">1000</span>, include_top=True)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ResNet(BasicBlock, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>], num_classes=num_classes, include_top=include_top)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># resnet50 结构</span></span><br><span class="line"><span class="string"># https://download.pytorch.org/models/resnet50-19c8e357.pth</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resnet50</span><span class="params">(num_classes=<span class="number">1000</span>, include_top=True)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ResNet(Bottleneck, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>], num_classes=num_classes, include_top=include_top)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># resnet101 结构</span></span><br><span class="line"><span class="string"># https://download.pytorch.org/models/resnet101-5d3b4d8f.pth</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resnet101</span><span class="params">(num_classes=<span class="number">1000</span>, include_top=True)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ResNet(Bottleneck, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">3</span>], num_classes=num_classes, include_top=include_top)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># resnet152 结构</span></span><br><span class="line"><span class="string"># https://download.pytorch.org/models/resnet152-b121ed2d.pth</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resnet152</span><span class="params">(num_classes=<span class="number">1000</span>, include_top=True)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ResNet(Bottleneck, [<span class="number">3</span>, <span class="number">8</span>, <span class="number">36</span>, <span class="number">3</span>], num_classes=num_classes, include_top=include_top)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># resnext50_32x4d 结构</span></span><br><span class="line"><span class="string"># https://download.pytorch.org/models/resnext50_32x4d-7cdf4587.pth</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resnext50_32x4d</span><span class="params">(num_classes=<span class="number">1000</span>, include_top=True)</span>:</span></span><br><span class="line">    groups = <span class="number">32</span></span><br><span class="line">    width_per_group = <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> ResNet(Bottleneck, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>],</span><br><span class="line">                  num_classes=num_classes,</span><br><span class="line">                  include_top=include_top,</span><br><span class="line">                  groups=groups,</span><br><span class="line">                  width_per_group=width_per_group)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># resnext101_32x8d 结构</span></span><br><span class="line"><span class="string"># https://download.pytorch.org/models/resnext101_32x8d-8ba56ff5.pth</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resnext101_32x8d</span><span class="params">(num_classes=<span class="number">1000</span>, include_top=True)</span>:</span></span><br><span class="line">    groups = <span class="number">32</span></span><br><span class="line">    width_per_group = <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> ResNet(Bottleneck, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">3</span>],</span><br><span class="line">                  num_classes=num_classes,</span><br><span class="line">                  include_top=include_top,</span><br><span class="line">                  groups=groups,</span><br><span class="line">                  width_per_group=width_per_group)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNetImageClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")</span></span><br><span class="line">        self.device = torch.device(<span class="string">"cpu"</span>)</span><br><span class="line">        self.data_transform = transforms.Compose([</span><br><span class="line">            transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><br><span class="line">        ])</span><br><span class="line">        self.json_path = <span class="string">"im_weight_Res/class_j/class_indices.json"</span></span><br><span class="line">        self.weights_path = <span class="string">f"im_weight_Res/weights/<span class="subst">&#123;ResNet_model&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">        self.model = resnet152(num_classes=<span class="number">13</span>).to(self.device)</span><br><span class="line">        self.model.load_state_dict(torch.load(self.weights_path, map_location=self.device))</span><br><span class="line">        self.model.eval()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(self.json_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.class_indices = json.load(f)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detection</span><span class="params">(self, img)</span>:</span></span><br><span class="line">        img = self.data_transform(img) <span class="comment"># [N, C H, W]</span></span><br><span class="line">        img = torch.unsqueeze(img, dim=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            output = torch.squeeze(self.model(img.to(self.device))).cpu()</span><br><span class="line">            predict = torch.softmax(output, dim=<span class="number">0</span>)</span><br><span class="line">            predict_cla = torch.argmax(predict).numpy()</span><br><span class="line">            result = &#123;</span><br><span class="line">                <span class="string">'class'</span>: predict_cla.tolist(),</span><br><span class="line">                <span class="string">'prob'</span>: predict[predict_cla].numpy().tolist()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h4 id="训练-2"><a href="#训练-2" class="headerlink" title="训练"></a>训练</h4><p><code>train.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">训练(GPU)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, datasets, utils</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> resnet152</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line">    print(<span class="string">f"use device is <span class="subst">&#123;device&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    data_transform = &#123;</span><br><span class="line">        <span class="string">"train"</span>: transforms.Compose([</span><br><span class="line">            transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.RandomHorizontalFlip(),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">        ]),</span><br><span class="line">        <span class="string">"val"</span>: transforms.Compose([</span><br><span class="line">            transforms.Resize(<span class="number">256</span>),</span><br><span class="line">            transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">    data_root = os.path.abspath(os.path.join(os.getcwd(), <span class="string">"./"</span>))</span><br><span class="line">    image_path = <span class="string">"/exp/work/algorithm/vgg/data_set/data"</span></span><br><span class="line">    <span class="keyword">assert</span> os.path.exists(image_path), <span class="string">"&#123;&#125; path does not exist."</span>.format(image_path)</span><br><span class="line">    train_dataset = datasets.ImageFolder(root=os.path.join(image_path, <span class="string">"train"</span>),</span><br><span class="line">                                         transform=data_transform[<span class="string">"train"</span>]</span><br><span class="line">                                         )</span><br><span class="line">    train_num = len(train_dataset)</span><br><span class="line">    flower_list = train_dataset.class_to_idx</span><br><span class="line">    cla_dict = dict((val, key) <span class="keyword">for</span> key, val <span class="keyword">in</span> flower_list.items())</span><br><span class="line">    json_str = json.dumps(cla_dict, indent=<span class="number">12</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"calss_indices.json"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">        json_file.write(json_str)</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">16</span></span><br><span class="line">    nw = min([os.cpu_count(), batch_size <span class="keyword">if</span> batch_size &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>, <span class="number">8</span>])  <span class="comment"># 线程数计算</span></span><br><span class="line">    nw = <span class="number">0</span></span><br><span class="line">    print(<span class="string">f"Using <span class="subst">&#123;nw&#125;</span> dataloader workers every process."</span>)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_dataset,</span><br><span class="line">                                               batch_size=batch_size,</span><br><span class="line">                                               shuffle=<span class="literal">True</span>,</span><br><span class="line">                                               num_workers=nw</span><br><span class="line">                                               )</span><br><span class="line">    val_dataset = datasets.ImageFolder(root=os.path.join(image_path, <span class="string">"val"</span>),</span><br><span class="line">                                       transform=data_transform[<span class="string">"val"</span>]</span><br><span class="line">                                       )</span><br><span class="line">    val_num = len(val_dataset)</span><br><span class="line">    val_loader = torch.utils.data.DataLoader(val_dataset,</span><br><span class="line">                                             batch_size=<span class="number">4</span>,</span><br><span class="line">                                             shuffle=<span class="literal">False</span>,</span><br><span class="line">                                             num_workers=nw</span><br><span class="line">                                             )</span><br><span class="line">    print(<span class="string">f"Using <span class="subst">&#123;train_num&#125;</span> images for training, <span class="subst">&#123;val_num&#125;</span> images for validation."</span>)</span><br><span class="line"></span><br><span class="line">    net = resnet152()  <span class="comment"># 实例化网络</span></span><br><span class="line">    <span class="comment"># load pretrain weights</span></span><br><span class="line">    <span class="comment"># download url: https://download.pytorch.org/models/resnet34-333f7ec4.pth</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    model_weight_path = <span class="string">"./ResNet152_GPU_v2.pth"</span></span><br><span class="line">    <span class="keyword">assert</span> os.path.exists(model_weight_path), <span class="string">"file &#123;&#125; does not exist."</span>.format(model_weight_path)</span><br><span class="line">    net.load_state_dict(torch.load(model_weight_path, map_location=<span class="string">'cpu'</span>))</span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment"># for param in net.parameters():</span></span><br><span class="line">    <span class="comment">#     param.requires_grad = False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># change fc layer structure</span></span><br><span class="line">    in_channel = net.fc.in_features</span><br><span class="line">    net.fc = nn.Linear(in_channel, <span class="number">13</span>)  <span class="comment"># (5分类)</span></span><br><span class="line">    net.to(device)</span><br><span class="line">    loss_function = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct an optimizer</span></span><br><span class="line">    <span class="comment"># optimizer = optim.Adam(net.parameters(), lr=0.0001)</span></span><br><span class="line">    params = [p <span class="keyword">for</span> p <span class="keyword">in</span> net.parameters() <span class="keyword">if</span> p.requires_grad]</span><br><span class="line">    optimizer = optim.Adam(params, lr=<span class="number">0.0001</span>)</span><br><span class="line"></span><br><span class="line">    epochs = <span class="number">300</span></span><br><span class="line">    save_path = <span class="string">"./ResNet152_GPU_RE.pth"</span></span><br><span class="line">    best_accuracy = <span class="number">0.0</span></span><br><span class="line">    train_steps = len(train_loader)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        net.train()</span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        train_bar = tqdm(train_loader, file=sys.stdout)</span><br><span class="line">        <span class="keyword">for</span> step, data <span class="keyword">in</span> enumerate(train_bar):</span><br><span class="line">            images, labels = data</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            logits = net(images.to(device))</span><br><span class="line">            loss = loss_function(logits, labels.to(device))  <span class="comment"># 计算损失函数</span></span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            train_bar.desc = <span class="string">"train epoch [&#123;&#125;/&#123;&#125;] loss:&#123;:.3f&#125;"</span>.format(epoch + <span class="number">1</span>,</span><br><span class="line">                                                                      epochs,</span><br><span class="line">                                                                      loss</span><br><span class="line">                                                                      )</span><br><span class="line">        <span class="comment"># 验证</span></span><br><span class="line">        net.eval()</span><br><span class="line">        acc = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            val_bar = tqdm(val_loader, file=sys.stdout)</span><br><span class="line">            <span class="keyword">for</span> val_data <span class="keyword">in</span> val_bar:</span><br><span class="line">                val_images, val_labels = val_data</span><br><span class="line">                outputs = net(val_images.to(device))</span><br><span class="line">                predict_y = torch.max(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                acc += torch.eq(predict_y, val_labels.to(device)).sum().item()</span><br><span class="line">        val_accuracy = acc / val_num</span><br><span class="line">        print(<span class="string">"[epoch %d ] train_loss: %3f    val_accurancy: %3f"</span> %</span><br><span class="line">              (epoch + <span class="number">1</span>, running_loss / train_steps, val_accuracy))</span><br><span class="line">        <span class="keyword">if</span> val_accuracy &gt; best_accuracy:</span><br><span class="line">            best_accuracy = val_accuracy</span><br><span class="line">            torch.save(net.state_dict(), save_path)</span><br><span class="line">    print(<span class="string">"Finished Training."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="预测-2"><a href="#预测-2" class="headerlink" title="预测"></a>预测</h4><p><code>predict.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">预测</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFile</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> im_weight_Res.model <span class="keyword">import</span> ResNetImageClass</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    im_class = ResNetImageClass()</span><br><span class="line">    url = <span class="string">'http://192.168.3.18:300/files/group1/M00/11/0E/wKgCBWRUgjWAGTfNAAEKiw0XSZc371.jpg'</span></span><br><span class="line">    img_bytes = urlopen(url).read()</span><br><span class="line">    img_pil = Image.open(BytesIO(img_bytes))</span><br><span class="line"></span><br><span class="line">    print(im_class.detection(img_pil))</span><br><span class="line">    print(im_class.detection(Image.open(<span class="string">"-532576361772532412_120.jpg"</span>).convert(<span class="string">"RGB"</span>)))</span><br></pre></td></tr></table></figure><h3 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h3><h4 id="神经网络-4"><a href="#神经网络-4" class="headerlink" title="神经网络"></a>神经网络</h4><p><code>model.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlexNet</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_classes=<span class="number">1000</span>, init_weights=False)</span>:</span></span><br><span class="line">        super(AlexNet, self).__init__()</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        特征提取</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.features = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">48</span>, kernel_size=<span class="number">11</span>, stride=<span class="number">4</span>, padding=<span class="number">2</span>),   <span class="comment"># 输入[3, 224, 224] 输出[48, 55, 55]</span></span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),  <span class="comment"># 输出 [48,27,27]</span></span><br><span class="line">            nn.Conv2d(<span class="number">48</span>, <span class="number">128</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),   <span class="comment"># 输出 [128, 27, 27]</span></span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),  <span class="comment"># 输出 [128, 13, 13]</span></span><br><span class="line">            nn.Conv2d(<span class="number">128</span>, <span class="number">192</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),  <span class="comment"># 输出[192, 13, 13]</span></span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">192</span>, <span class="number">192</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>), <span class="comment"># 输出[192, 13, 13]</span></span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">192</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),  <span class="comment"># 输出[128, 13, 13]</span></span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>)   <span class="comment"># 输出 [128, 6, 6]</span></span><br><span class="line">        )</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        分类器</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.classifier = nn.Sequential(</span><br><span class="line">            nn.Dropout(p=<span class="number">0.5</span>),  <span class="comment"># Dropout 随机失活神经元, 比例诶0.5</span></span><br><span class="line">            nn.Linear(<span class="number">128</span> * <span class="number">6</span> * <span class="number">6</span>, <span class="number">2048</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">            nn.Linear(<span class="number">2048</span>, <span class="number">2048</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(<span class="number">2048</span>, num_classes)</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> init_weights:</span><br><span class="line">            self._initialize_weights()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.features(x)</span><br><span class="line">        x = torch.flatten(x, start_dim=<span class="number">1</span>)</span><br><span class="line">        x = self.classifier(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    权重初始化</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_initialize_weights</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> isinstance(m, nn.Conv2d):</span><br><span class="line">                nn.init.kaiming_normal_(m.weight, mode=<span class="string">'fan_out'</span>, nonlinearity=<span class="string">'relu'</span>)</span><br><span class="line">                <span class="keyword">if</span> m.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> isinstance(m, nn.Linear):</span><br><span class="line">                nn.init.normal_(m.weight, <span class="number">0.01</span>)</span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="训练-3"><a href="#训练-3" class="headerlink" title="训练"></a>训练</h4><p><code>train.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">训练(GPU)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, datasets, utils</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> AlexNet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line">    print(<span class="string">f"use device is <span class="subst">&#123;device&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    data_transform = &#123;</span><br><span class="line">        <span class="string">"train"</span>: transforms.Compose([</span><br><span class="line">            transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.RandomHorizontalFlip(),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)),</span><br><span class="line">        ]),</span><br><span class="line">        <span class="string">"val"</span>: transforms.Compose([</span><br><span class="line">            transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)),</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">    data_root = os.path.abspath(os.path.join(os.getcwd(), <span class="string">"./"</span>))</span><br><span class="line">    image_path = os.path.join(data_root, <span class="string">"data_set"</span>, <span class="string">"flower_data"</span>)</span><br><span class="line">    <span class="keyword">assert</span> os.path.exists(image_path), <span class="string">"&#123;&#125; path does not exist."</span>.format(image_path)</span><br><span class="line">    train_dataset = datasets.ImageFolder(root=os.path.join(image_path, <span class="string">"train"</span>),</span><br><span class="line">                                         transform=data_transform[<span class="string">"train"</span>]</span><br><span class="line">                                         )</span><br><span class="line">    train_num = len(train_dataset)</span><br><span class="line">    flower_list = train_dataset.class_to_idx</span><br><span class="line">    cla_dict = dict((val, key) <span class="keyword">for</span> key, val <span class="keyword">in</span> flower_list.items())</span><br><span class="line">    json_str = json.dumps(cla_dict, indent=<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"calss_indices.json"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">        json_file.write(json_str)</span><br><span class="line"></span><br><span class="line">    batch_size = <span class="number">32</span></span><br><span class="line">    nw = min([os.cpu_count(), batch_size <span class="keyword">if</span> batch_size &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>, <span class="number">8</span>])  <span class="comment"># 线程数计算</span></span><br><span class="line">    nw = <span class="number">0</span></span><br><span class="line">    print(<span class="string">f"Using <span class="subst">&#123;nw&#125;</span> dataloader workers every process."</span>)</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_dataset,</span><br><span class="line">                                               batch_size=batch_size,</span><br><span class="line">                                               shuffle=<span class="literal">True</span>,</span><br><span class="line">                                               num_workers=nw</span><br><span class="line">                                               )</span><br><span class="line">    val_dataset = datasets.ImageFolder(root=os.path.join(image_path, <span class="string">"val"</span>),</span><br><span class="line">                                       transform=data_transform[<span class="string">"val"</span>]</span><br><span class="line">                                       )</span><br><span class="line">    val_num = len(val_dataset)</span><br><span class="line">    val_loader = torch.utils.data.DataLoader(val_dataset,</span><br><span class="line">                                             batch_size=<span class="number">4</span>,</span><br><span class="line">                                             shuffle=<span class="literal">False</span>,</span><br><span class="line">                                             num_workers=nw</span><br><span class="line">                                             )</span><br><span class="line">    print(<span class="string">f"Using <span class="subst">&#123;train_num&#125;</span> images for training, <span class="subst">&#123;val_num&#125;</span> images for validation."</span>)</span><br><span class="line"></span><br><span class="line">    net = AlexNet(num_classes=<span class="number">5</span>, init_weights=<span class="literal">True</span>)</span><br><span class="line">    net.to(device)</span><br><span class="line">    loss_function = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = optim.Adam(net.parameters(), lr=<span class="number">0.0002</span>)</span><br><span class="line"></span><br><span class="line">    epochs = <span class="number">10</span></span><br><span class="line">    save_path = <span class="string">"./AlexNet.pth"</span></span><br><span class="line">    best_accuracy = <span class="number">0.0</span></span><br><span class="line">    train_steps = len(train_loader)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        net.train()</span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        train_bar = tqdm(train_loader, file=sys.stdout)</span><br><span class="line">        <span class="keyword">for</span> step, data <span class="keyword">in</span> enumerate(train_bar):</span><br><span class="line">            images, labels = data</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            outputs = net(images.to(device))</span><br><span class="line">            loss = loss_function(outputs, labels.to(device))</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            train_bar.desc = <span class="string">"train epoch [&#123;&#125;/&#123;&#125;] loss:&#123;:.3f&#125;"</span>.format(epoch + <span class="number">1</span>,</span><br><span class="line">                                                                      epochs,</span><br><span class="line">                                                                      loss</span><br><span class="line">                                                                      )</span><br><span class="line">        <span class="comment"># 验证</span></span><br><span class="line">        net.eval()</span><br><span class="line">        acc = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            val_bar = tqdm(val_loader, file=sys.stdout)</span><br><span class="line">            <span class="keyword">for</span> val_data <span class="keyword">in</span> val_bar:</span><br><span class="line">                val_images, val_labels = val_data</span><br><span class="line">                outputs = net(val_images.to(device))</span><br><span class="line">                predict_y = torch.max(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                acc += torch.eq(predict_y, val_labels.to(device)).sum().item()</span><br><span class="line">        val_accuracy = acc / val_num</span><br><span class="line">        print(<span class="string">"[epoch %d ] train_loss: %3f    val_accurancy: %3f"</span> %</span><br><span class="line">              (epoch + <span class="number">1</span>, running_loss / train_steps, val_accuracy))</span><br><span class="line">        <span class="keyword">if</span> val_accuracy &gt; best_accuracy:</span><br><span class="line">            best_accuracy = val_accuracy</span><br><span class="line">            torch.save(net.state_dict(), save_path)</span><br><span class="line">    print(<span class="string">"Finshed Training."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="预测-3"><a href="#预测-3" class="headerlink" title="预测"></a>预测</h4><p>（暂未封装）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">预测</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> AlexNet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line"></span><br><span class="line">    data_transform = transforms.Compose([</span><br><span class="line">        transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    image_path = <span class="string">"./sunflowers01.jpg"</span></span><br><span class="line">    img = Image.open(image_path)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    img = data_transform(img)  <span class="comment"># [N, C H, W]</span></span><br><span class="line">    img = torch.unsqueeze(img, dim=<span class="number">0</span>)  <span class="comment"># 维度扩展</span></span><br><span class="line">    <span class="comment"># print(f"img=&#123;img&#125;")</span></span><br><span class="line">    json_path = <span class="string">"./calss_indices.json"</span></span><br><span class="line">    <span class="keyword">with</span> open(json_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        class_indict = json.load(f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># model = AlexNet(num_classes=5).to(device)   # GPU</span></span><br><span class="line">    model = AlexNet(num_classes=<span class="number">5</span>)  <span class="comment"># CPU</span></span><br><span class="line">    weights_path = <span class="string">"./AlexNet.pth"</span></span><br><span class="line">    model.load_state_dict(torch.load(weights_path))</span><br><span class="line">    model.eval()  <span class="comment"># 关闭 Dorpout</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="comment"># output = torch.squeeze(model(img.to(device))).cpu()   #GPU</span></span><br><span class="line">        output = torch.squeeze(model(img))  <span class="comment"># 维度压缩</span></span><br><span class="line">        predict = torch.softmax(output, dim=<span class="number">0</span>)</span><br><span class="line">        predict_cla = torch.argmax(predict).numpy()</span><br><span class="line">        print_res = <span class="string">"class: &#123;&#125;  prob: &#123;:.3&#125;"</span>.format(class_indict[str(predict_cla)],</span><br><span class="line">                                                    predict[predict_cla].numpy())</span><br><span class="line">        plt.title(print_res)</span><br><span class="line">        <span class="comment"># for i in range(len(predict)):</span></span><br><span class="line">        <span class="comment">#     print("class: &#123;&#125;  prob: &#123;:.3&#125;".format(class_indict[str(predict_cla)],</span></span><br><span class="line">        <span class="comment">#                                             predict[predict_cla].numpy()))</span></span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h3><h4 id="神经网络-5"><a href="#神经网络-5" class="headerlink" title="神经网络"></a>神经网络</h4><p><code>model.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeNet</span><span class="params">(nn.Module)</span>:</span>  <span class="comment"># 集成nn.Module父类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(LeNet, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 看一下具体的参数</span></span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">3</span>,</span><br><span class="line">                               out_channels=<span class="number">16</span>,</span><br><span class="line">                               kernel_size=<span class="number">5</span>,</span><br><span class="line">                               stride=<span class="number">1</span>,</span><br><span class="line">                               padding=<span class="number">0</span>,</span><br><span class="line">                               bias=<span class="literal">True</span></span><br><span class="line">                               )</span><br><span class="line">        self.pool1 = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">16</span>, <span class="number">32</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool2 = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">32</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.relu = nn.ReLU(inplace=True)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正向传播</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = F.relu(self.conv1(x))  <span class="comment"># 输入: (3, 32, 32), 输出: (16, 28, 28)</span></span><br><span class="line">        x = self.pool1(x)  <span class="comment"># 输出: (16, 14, 14)</span></span><br><span class="line">        x = F.relu(self.conv2(x))  <span class="comment"># 输出: (32, 10, 10)</span></span><br><span class="line">        x = self.pool2(x)  <span class="comment"># 输出: (32, 5, 5)</span></span><br><span class="line">        x = x.view(<span class="number">-1</span>, <span class="number">32</span> * <span class="number">5</span> * <span class="number">5</span>)  <span class="comment"># 输出: (32*5*5)</span></span><br><span class="line">        x = F.relu(self.fc1(x))  <span class="comment"># 输出: (120)</span></span><br><span class="line">        x = F.relu(self.fc2(x))  <span class="comment"># 输出: (84)</span></span><br><span class="line">        x = self.fc3(x)  <span class="comment"># 输出(10)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><h4 id="训练-4"><a href="#训练-4" class="headerlink" title="训练"></a>训练</h4><p><code>train.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">训练</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> LeNet</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),  <span class="comment"># 数据转为张量</span></span><br><span class="line">        transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))  <span class="comment"># 标准化处理</span></span><br><span class="line">    ])</span><br><span class="line">    <span class="comment"># 导入训练集数据(50000张图片)</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">'./data'</span>,  <span class="comment"># root: 数据集存储路径</span></span><br><span class="line">                                             train=<span class="literal">True</span>,  <span class="comment"># 数据集为训练集</span></span><br><span class="line">                                             download=<span class="literal">False</span>,  <span class="comment"># download: True时下载数据集(下载完成修改为False)</span></span><br><span class="line">                                             transform=transform  <span class="comment"># 数据预处理</span></span><br><span class="line">                                             )</span><br><span class="line">    <span class="comment">#   加载训练集</span></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set,  <span class="comment"># 加载训练集</span></span><br><span class="line">                                               batch_size=<span class="number">50</span>,  <span class="comment"># batch 大小</span></span><br><span class="line">                                               shuffle=<span class="literal">True</span>,  <span class="comment"># 是否随机打乱训练集</span></span><br><span class="line">                                               num_workers=<span class="number">0</span>  <span class="comment"># 使用的线程数量</span></span><br><span class="line">                                               )</span><br><span class="line">    <span class="comment"># 导入测试集(10000张图片)</span></span><br><span class="line">    val_set = torchvision.datasets.CIFAR10(root=<span class="string">'./data'</span>,</span><br><span class="line">                                           train=<span class="literal">False</span>,  <span class="comment"># 数据集为测试集</span></span><br><span class="line">                                           download=<span class="literal">False</span>,</span><br><span class="line">                                           transform=transform</span><br><span class="line">                                           )</span><br><span class="line">    <span class="comment"># 加载测试集数据</span></span><br><span class="line">    val_loader = torch.utils.data.DataLoader(val_set,</span><br><span class="line">                                             batch_size=<span class="number">10000</span>,  <span class="comment"># 测试集batch大小</span></span><br><span class="line">                                             shuffle=<span class="literal">False</span>,</span><br><span class="line">                                             num_workers=<span class="number">0</span></span><br><span class="line">                                             )</span><br><span class="line">    <span class="comment"># 获取测试集中的图片和标签</span></span><br><span class="line">    val_data_iter = iter(val_loader)</span><br><span class="line">    <span class="comment"># val_image, val_label = val_data_iter.next()</span></span><br><span class="line">    val_image, val_label = next(val_data_iter)  <span class="comment"># python 3</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # -------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">    查看数据集, 注意修改查看数据集的 batch</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 定义的分类标签</span></span><br><span class="line">    <span class="comment"># class_labels = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')</span></span><br><span class="line">    <span class="comment"># 查看数据集的图片</span></span><br><span class="line">    <span class="comment">#  def img_show(img):</span></span><br><span class="line">    <span class="comment">#      img = img / 2 + 0.5</span></span><br><span class="line">    <span class="comment">#      np_img = img.numpy()</span></span><br><span class="line">    <span class="comment">#      plt.imshow(np.transpose(np_img, (1, 2, 0)))</span></span><br><span class="line">    <span class="comment">#      plt.show()</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#  # 查看数据集中的5张图像</span></span><br><span class="line">    <span class="comment">#  print(''.join(" %5s " % class_labels[val_label[j]] for j in range(5)))</span></span><br><span class="line">    <span class="comment">#  img_show(torchvision.utils.make_grid(val_image))</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # -------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查是否支持CPU</span></span><br><span class="line">    <span class="comment"># if torch.cuda.is_available():</span></span><br><span class="line">    <span class="comment">#     use_dev = torch.device("cuda")</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     use_dev = torch.device("cpu")</span></span><br><span class="line">    <span class="comment"># print(use_dev)</span></span><br><span class="line">    device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line"></span><br><span class="line">    net = LeNet()  <span class="comment"># 用于训练的网络模型</span></span><br><span class="line">    <span class="comment"># 指定GPU or CPU 进行训练</span></span><br><span class="line">    net.to(<span class="string">"cpu"</span>)</span><br><span class="line">    loss_function = nn.CrossEntropyLoss()  <span class="comment"># 损失函数(交叉熵函数)</span></span><br><span class="line">    optimizer = optim.Adam(net.parameters(), lr=<span class="number">0.001</span>)  <span class="comment"># 优化器(训练参数, 学习率)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练的轮数</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        start_time = time.perf_counter()</span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="comment"># 遍历训练集, 从0开始</span></span><br><span class="line">        <span class="keyword">for</span> step, data <span class="keyword">in</span> enumerate(train_loader, start=<span class="number">0</span>):</span><br><span class="line">            inputs, labels = data  <span class="comment"># 得到训练集图片和标签</span></span><br><span class="line">            optimizer.zero_grad()  <span class="comment"># 清除历史梯度</span></span><br><span class="line">            outputs = net(inputs)  <span class="comment"># 正向传播</span></span><br><span class="line">            loss = loss_function(outputs, labels)  <span class="comment"># 损失计算</span></span><br><span class="line">            loss.backward()  <span class="comment"># 反向传播</span></span><br><span class="line">            optimizer.step()  <span class="comment"># 优化器更新参数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 用于打印精确率等评估参数</span></span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            <span class="keyword">if</span> step % <span class="number">500</span> == <span class="number">499</span>:  <span class="comment"># 500步打印一次</span></span><br><span class="line">                <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                    outputs = net(val_image)  <span class="comment"># 传入测试集数据</span></span><br><span class="line">                    predict_y = torch.max(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                    accuracy = torch.eq(predict_y, val_label).sum().item() / val_label.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 打印训练轮数、精确率等</span></span><br><span class="line">                    print(<span class="string">"[%d, %5d] train_loss: %.3f   test_accuracy: %.3f"</span> %</span><br><span class="line">                          (epoch + <span class="number">1</span>, step + <span class="number">1</span>, running_loss / <span class="number">500</span>, accuracy)</span><br><span class="line">                          )</span><br><span class="line">                    running_loss = <span class="number">0.0</span></span><br><span class="line">        end_time = time.perf_counter()</span><br><span class="line">        print(<span class="string">"cost time = "</span>, end_time - start_time)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Finished trainning"</span>)</span><br><span class="line"></span><br><span class="line">    save_path = <span class="string">"./LeNet.pth"</span></span><br><span class="line">    torch.save(net.state_dict(), save_path)  <span class="comment"># 保存训练输出的模型文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="预测-4"><a href="#预测-4" class="headerlink" title="预测"></a>预测</h4><p>（暂未封装）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""""</span></span><br><span class="line"><span class="string">测试</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> LeNet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    data_class = (<span class="string">'plane'</span>, <span class="string">'car'</span>, <span class="string">'bird'</span>, <span class="string">'cat'</span>, <span class="string">'deer'</span>, <span class="string">'dog'</span>, <span class="string">'frog'</span>, <span class="string">'horse'</span>, <span class="string">'ship'</span>, <span class="string">'truck'</span>)</span><br><span class="line"></span><br><span class="line">    net = LeNet()</span><br><span class="line">    net.load_state_dict(torch.load(<span class="string">'LeNet.pth'</span>))</span><br><span class="line">    <span class="comment"># net.load_state_dict(torch.load('LeNet.pth', map_location=torch.device("cpu")))</span></span><br><span class="line"></span><br><span class="line">    test_image = Image.open(<span class="string">'cat_test2.jpg'</span>)</span><br><span class="line">    test_image = transform(test_image)  <span class="comment"># [C H W]</span></span><br><span class="line">    test_image = torch.unsqueeze(test_image, dim=<span class="number">0</span>)  <span class="comment"># [N C H W]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        outputs = net(test_image)</span><br><span class="line">        predict = torch.max(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>].numpy()</span><br><span class="line">    print(<span class="string">f"It is <span class="subst">&#123;data_class[int(predict)]&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;h3 id=&quot;训练结构&quot;&gt;&lt;a href=&quot;#训练结构&quot; class=&quot;headerlink&quot; title=&quot;训练结构&quot;&gt;&lt;/a&gt;训练结构&lt;/h3&gt;&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;/font&gt; 在项目根目录下新建数据集文件夹&lt;code&gt;data_set&lt;/code&gt;，建立子文件夹（数据集名称）用于存放训练集和测试集；&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;/font&gt; 在项目根目录下新建数据集文件夹&lt;code&gt;class_j&lt;/code&gt;，用于存放分类json文件；&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;/font&gt; 在项目根目录下新建数据集文件夹&lt;code&gt;models&lt;/code&gt;，用于存放训练好的模型文件；&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;/font&gt; 神经网络&lt;code&gt;model.py&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;/font&gt; 训练脚本&lt;code&gt;train.py&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/strong&gt;&lt;/font&gt; 预测脚本&lt;code&gt;predict.py&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── data_set&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	├── data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	     ├── train&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	     │    ├── 00001.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	     │    ├── 00002.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	     │    ├── 00003.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	     │    ├── ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	     │    └── 10000.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	     └── val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	          ├── 00001.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	          ├── 00002.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	          ├── 00003.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	          ├── ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	          └── 01000.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── class_j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	├── class_indices.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── models&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	├── model.pth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── model.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── train.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── predict.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;封装结构&quot;&gt;&lt;a href=&quot;#封装结构&quot; class=&quot;headerlink&quot; title=&quot;封装结构&quot;&gt;&lt;/a&gt;封装结构&lt;/h3&gt;&lt;p&gt;以&lt;code&gt;GoogLeNet&lt;/code&gt;神经网络为例：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; GoogLeNet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── class_j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	├── class_indices.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│── weights&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│	├── GoogLeNet_GPU_v1.pth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── model.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="深度学习" scheme="http://yoursite.com/categories/深度学习/"/>
    
    
    <category term="VGG" scheme="http://yoursite.com/tags/VGG/"/>
    
    <category term="AlexNet" scheme="http://yoursite.com/tags/AlexNet/"/>
    
    <category term="LeNet" scheme="http://yoursite.com/tags/LeNet/"/>
    
    <category term="GoogLeNet" scheme="http://yoursite.com/tags/GoogLeNet/"/>
    
    <category term="ResNet" scheme="http://yoursite.com/tags/ResNet/"/>
    
    <category term="卷积神经网络" scheme="http://yoursite.com/tags/卷积神经网络/"/>
    
  </entry>
  
  <entry>
    <title>CentOS-LibreOffice工具包安装</title>
    <link href="http://yoursite.com/2023/12/28/CentOS-LibreOffice%E5%B7%A5%E5%85%B7%E5%8C%85%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2023/12/28/CentOS-LibreOffice%E5%B7%A5%E5%85%B7%E5%8C%85%E5%AE%89%E8%A3%85/</id>
    <published>2023-12-28T06:43:49.000Z</published>
    <updated>2023-12-28T07:05:48.623Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><strong>·</strong> <font color="gold">系统：</font> CentOS7</p><p><strong>·</strong> <font color="gold">LibreOffice：</font> 7.4.5.1 稳定版</p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><p><strong>·</strong> 官方网站： <a href="https://zh-cn.libreoffice.org/download/libreoffice/" target="_blank" rel="noopener">https://zh-cn.libreoffice.org/download/libreoffice/</a></p><p><strong>·</strong> 下载地址：<a href="https://downloadarchive.documentfoundation.org/libreoffice/old/7.4.5.1/rpm/x86_64/" target="_blank" rel="noopener">https://downloadarchive.documentfoundation.org/libreoffice/old/7.4.5.1/rpm/x86_64/</a></p><p>选择<code>LibreOffice_7.4.5.1_Linux_x86-64_rpm.tar.gz</code>安装包和<code>LibreOffice_7.4.5.1_Linux_x86-64_rpm_langpack_zh-CN.tar.gz</code>中文语言包并下载</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>进入安装包下载目录进行解压，这里为<code>/usr/local/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/   进入目录</span><br><span class="line">tar -zxvf LibreOffice_7.4.6.1_Linux_x86-64_rpm.tar.gz   解压libreoffice</span><br><span class="line">tar -zxvf LibreOffice7.4.6.1_Linux_x86-64_rpm_langpack_zh-CN.tar.gz   解压中文语言包</span><br></pre></td></tr></table></figure><p>安装<code>libreoffice</code>和语言包的rpm包，默认安装目录为<code>/opt/libreoffice7.4</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/LibreOffice_7.4.6.1_Linux_x86-64_rpm/RPMS/</span><br><span class="line">yum -y install *.rpm</span><br><span class="line">cd /usr/local/LibreOffice_7.4.6.1_Linux_x86-64_rpm_langpack_zh-CN/RPMS</span><br><span class="line">yum -y install *.rpm</span><br></pre></td></tr></table></figure><p>安装<code>soffice</code>，进入<code>/opt/libreoffice7.4/program</code>目录执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/libreoffice7.4/program/</span><br><span class="line">yum install cairo </span><br><span class="line">yum install cups-libs</span><br><span class="line">yum install libSM</span><br></pre></td></tr></table></figure><p>检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/libreoffice7.4/program/soffice -help</span><br></pre></td></tr></table></figure><p>正常输出，安装成功，接下来将<code>soffice</code>添加到环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> libreoffice</span><br><span class="line">export LibreOffice_PATH=/opt/libreoffice7.4/program</span><br><span class="line">export PATH=$LibreOffice_PATH:$PATH</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="安装中文字体包"><a href="#安装中文字体包" class="headerlink" title="安装中文字体包"></a>安装中文字体包</h2><p>windows系统字体包位于路径<code>C:\Windows\Font</code>下</p><p>centos系统字体包位于路径<code>/usr/share/fonts</code>下</p><p>进入<code>/usr/share/fonts</code>创建windows系统字体包目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/fonts/</span><br><span class="line">mkdir windowsFont</span><br></pre></td></tr></table></figure><p>将windows字体文件全部拷贝进该路径下，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkfontscale</span><br><span class="line">mkfontdir</span><br><span class="line">fc-cache</span><br></pre></td></tr></table></figure><p>完成！可以在linux系统下顺利操作<code>.docs</code>、<code>.pdf</code>等文档文件，在langchain-chatchat中添加文档形知识库。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;font color=&quot;gold&quot;&gt;系统：&lt;/font&gt; CentOS7&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;font color=&quot;gold&quot;&gt;LibreOffice：&lt;/font&gt; 7.4.5.1 稳定版&lt;/p&gt;
&lt;h2 id=&quot;资源下载&quot;&gt;&lt;a href=&quot;#资源下载&quot; class=&quot;headerlink&quot; title=&quot;资源下载&quot;&gt;&lt;/a&gt;资源下载&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 官方网站： &lt;a href=&quot;https://zh-cn.libreoffice.org/download/libreoffice/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zh-cn.libreoffice.org/download/libreoffice/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 下载地址：&lt;a href=&quot;https://downloadarchive.documentfoundation.org/libreoffice/old/7.4.5.1/rpm/x86_64/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://downloadarchive.documentfoundation.org/libreoffice/old/7.4.5.1/rpm/x86_64/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择&lt;code&gt;LibreOffice_7.4.5.1_Linux_x86-64_rpm.tar.gz&lt;/code&gt;安装包和&lt;code&gt;LibreOffice_7.4.5.1_Linux_x86-64_rpm_langpack_zh-CN.tar.gz&lt;/code&gt;中文语言包并下载&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;进入安装包下载目录进行解压，这里为&lt;code&gt;/usr/local/&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/local/   进入目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf LibreOffice_7.4.6.1_Linux_x86-64_rpm.tar.gz   解压libreoffice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf LibreOffice7.4.6.1_Linux_x86-64_rpm_langpack_zh-CN.tar.gz   解压中文语言包&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装&lt;code&gt;libreoffice&lt;/code&gt;和语言包的rpm包，默认安装目录为&lt;code&gt;/opt/libreoffice7.4&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/local/LibreOffice_7.4.6.1_Linux_x86-64_rpm/RPMS/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum -y install *.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/local/LibreOffice_7.4.6.1_Linux_x86-64_rpm_langpack_zh-CN/RPMS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum -y install *.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装&lt;code&gt;soffice&lt;/code&gt;，进入&lt;code&gt;/opt/libreoffice7.4/program&lt;/code&gt;目录执行&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /opt/libreoffice7.4/program/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install cairo &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install cups-libs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install libSM&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;检查&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/opt/libreoffice7.4/program/soffice -help&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正常输出，安装成功，接下来将&lt;code&gt;soffice&lt;/code&gt;添加到环境变量&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; libreoffice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export LibreOffice_PATH=/opt/libreoffice7.4/program&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$LibreOffice_PATH:$PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source /etc/profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
    <category term="linux工具" scheme="http://yoursite.com/tags/linux工具/"/>
    
    <category term="LibreOffice" scheme="http://yoursite.com/tags/LibreOffice/"/>
    
  </entry>
  
  <entry>
    <title>LangChain + ChatGLM2-6B的本地知识问答库</title>
    <link href="http://yoursite.com/2023/10/24/LangChain%20+%20ChatGLM2-6B%E7%9A%84%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E9%97%AE%E7%AD%94%E5%BA%93/"/>
    <id>http://yoursite.com/2023/10/24/LangChain%20+%20ChatGLM2-6B%E7%9A%84%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E9%97%AE%E7%AD%94%E5%BA%93/</id>
    <published>2023-10-24T01:14:34.000Z</published>
    <updated>2023-11-06T08:31:28.442Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>原项目Github：<a href="https://github.com/imClumsyPanda/langchain-ChatGLM" target="_blank" rel="noopener">https://github.com/imClumsyPanda/langchain-ChatGLM</a></p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p><strong>·</strong> <font color="gold">v 0.2.6</font></p><h3 id="机器配置："><a href="#机器配置：" class="headerlink" title="机器配置："></a>机器配置：</h3><p><strong>·</strong> <font color="gold">python 环境：anaconda3 + python3.10.12</font></p><p><strong>·</strong> <font color="gold">GPU：RTX3090*2 + CUDA11.7</font></p><p><strong>·</strong> <font color="gold">torch：2.0.1（CUDA未升至12）</font></p><p><strong>·</strong> <font color="gold">conda：py310_dtglm</font></p><h3 id="模型下载"><a href="#模型下载" class="headerlink" title="模型下载"></a>模型下载</h3><p><strong>·</strong> <font color="gold">m3e</font> <a href="https://huggingface.co/moka-ai/m3e-base/tree/main" target="_blank" rel="noopener">https://huggingface.co/moka-ai/m3e-base/tree/main</a></p><p><strong>·</strong> <font color="gold">chatglm2-6b</font> <a href="https://huggingface.co/THUDM/chatglm2-6b/tree/main" target="_blank" rel="noopener">https://huggingface.co/THUDM/chatglm2-6b/tree/main</a></p><p>chatglm清华源 <a href="https://cloud.tsinghua.edu.cn/d/674208019e314311ab5c/?p=%2F&amp;mode=list" target="_blank" rel="noopener">https://cloud.tsinghua.edu.cn/d/674208019e314311ab5c/?p=%2F&amp;mode=list</a></p><p>(这里将模型全部下载至<code>/root/huggingface</code>下)</p><h3 id="创建虚拟环境，安装依赖"><a href="#创建虚拟环境，安装依赖" class="headerlink" title="创建虚拟环境，安装依赖"></a>创建虚拟环境，安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py310_dtglm python=3.10.12</span><br><span class="line">conda activate py310_dtglm</span><br><span class="line"></span><br><span class="line">pip install --use-pep517 -r requirements.txt -i https://mirror.baidu.com/pypi/simple</span><br><span class="line">pip install --use-pep517 -r requirements_api.txt -i https://mirror.baidu.com/pypi/simple</span><br><span class="line">pip install --use-pep517 -r requirements_webui.txt -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><h3 id="修改配置、模型路径"><a href="#修改配置、模型路径" class="headerlink" title="修改配置、模型路径"></a>修改配置、模型路径</h3><p>复制配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python copy_config_example.py</span><br></pre></td></tr></table></figure><p>修改配置文件</p><p><strong>·</strong> <font color="gold">model_config.py</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MODEL_ROOT_PATH = <span class="string">"/root/huggingface"</span></span><br><span class="line"></span><br><span class="line">MODEL_PATH = &#123;</span><br><span class="line">    <span class="string">"embed_model"</span>: &#123;</span><br><span class="line">...</span><br><span class="line">        <span class="string">"m3e-base"</span>: <span class="string">"/root/huggingface/m3e-base"</span>, <span class="comment"># 修改m3e模型路径</span></span><br><span class="line">...</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> add all supported llm models</span></span><br><span class="line">    <span class="string">"llm_model"</span>: &#123;</span><br><span class="line">...</span><br><span class="line">        <span class="string">"chatglm2-6b"</span>: <span class="string">"/root/huggingface/chatglm2-6b"</span>, <span class="comment"># 修改chatglm2-6b模型路径</span></span><br><span class="line">...</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EMBEDDING_MODEL = <span class="string">"m3e-base"</span> <span class="comment"># 可以尝试最新的嵌入式sota模型：bge-large-zh-v1.5</span></span><br><span class="line">LLM_MODEL = <span class="string">"chatglm2-6b"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>·</strong> <font color="gold">server_config.py</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># webui.py server</span></span><br><span class="line">WEBUI_SERVER = &#123;</span><br><span class="line">    <span class="string">"host"</span>: DEFAULT_BIND_HOST,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">8501</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># api.py server</span></span><br><span class="line">API_SERVER = &#123;</span><br><span class="line">    <span class="string">"host"</span>: DEFAULT_BIND_HOST,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">7861</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastchat openai_api server</span></span><br><span class="line">FSCHAT_OPENAI_API = &#123;</span><br><span class="line">    <span class="string">"host"</span>: DEFAULT_BIND_HOST,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">20000</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FSCHAT_MODEL_WORKERS = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"host"</span>: DEFAULT_BIND_HOST,</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">20002</span>,</span><br><span class="line">        <span class="string">"device"</span>: LLM_DEVICE,</span><br><span class="line">        <span class="string">"infer_turbo"</span>: <span class="literal">False</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment"># model_worker多卡加载需要配置的参数</span></span><br><span class="line">        <span class="string">"gpus"</span>: <span class="string">"0,1"</span>, <span class="comment"># 使用的GPU，以str的格式指定，如"0,1"，如失效请使用CUDA_VISIBLE_DEVICES="0,1"等形式指定</span></span><br><span class="line">        <span class="string">"num_gpus"</span>: <span class="number">2</span>, <span class="comment"># 使用GPU的数量</span></span><br><span class="line">        <span class="string">"max_gpu_memory"</span>: <span class="string">"20GiB"</span>, <span class="comment"># 每个GPU占用的最大显存</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">"zhipu-api"</span>: &#123; <span class="comment"># 请为每个要运行的在线API设置不同的端口</span></span><br><span class="line">        <span class="string">"port"</span>: <span class="number">21001</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastchat controller server</span></span><br><span class="line">FSCHAT_CONTROLLER = &#123;</span><br><span class="line">    <span class="string">"host"</span>: DEFAULT_BIND_HOST,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">20001</span>,</span><br><span class="line">    <span class="string">"dispatch_method"</span>: <span class="string">"shortest_queue"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化默认知识库"><a href="#初始化默认知识库" class="headerlink" title="初始化默认知识库"></a>初始化默认知识库</h3><p>样例知识库文件位置：<code>knowledge_base/samples/content/test.txt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python init_database.py --recreate-vs</span><br></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python startup.py -a</span><br></pre></td></tr></table></figure><p><img src="/2023/10/24/LangChain + ChatGLM2-6B的本地知识问答库/A.png" alt></p><h3 id="通过fastapi接口添加知识库"><a href="#通过fastapi接口添加知识库" class="headerlink" title="通过fastapi接口添加知识库"></a>通过fastapi接口添加知识库</h3><p><code>http://host:7861/knowledge_base/upload_docs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl -X 'POST' \</span><br><span class="line">  'http://host:7861/knowledge_base/upload_docs' \</span><br><span class="line">  -H 'accept: application/json' \</span><br><span class="line">  -H 'Content-Type: multipart/form-data' \</span><br><span class="line">  -F 'to_vector_store=true' \</span><br><span class="line">  -F 'override=false' \</span><br><span class="line">  -F 'not_refresh_vs_cache=false' \</span><br><span class="line">  -F 'chunk_size=250' \</span><br><span class="line">  -F 'chunk_overlap=50' \</span><br><span class="line">  -F 'zh_title_enhance=true' \</span><br><span class="line">  -F 'files=@分体式M录AI智能分析设备建设方案.docx;type=application/vnd.openxmlformats-officedocument.wordprocessingml.document' \</span><br><span class="line">  -F 'knowledge_base_name=琅琊' \</span><br><span class="line">  -F 'docs='</span><br></pre></td></tr></table></figure><p><img src="/2023/10/24/LangChain + ChatGLM2-6B的本地知识问答库/B.png" alt></p><h3 id="选择知识库问答"><a href="#选择知识库问答" class="headerlink" title="选择知识库问答"></a>选择知识库问答</h3><p><img src="/2023/10/24/LangChain + ChatGLM2-6B的本地知识问答库/C.png" alt></p><p><img src="/2023/10/24/LangChain + ChatGLM2-6B的本地知识问答库/D.png" alt></p><h2 id="代码调整"><a href="#代码调整" class="headerlink" title="代码调整"></a>代码调整</h2><h3 id="百川大模型接入"><a href="#百川大模型接入" class="headerlink" title="百川大模型接入"></a>百川大模型接入</h3><p>调整<code>./configs/model_config.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"llm_model"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'baichuan-13b-chat'</span>:<span class="string">'/home/Baichuan2-main/baichuan-inc/Baichuan2-13B-Chat'</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># LLM 名称</span></span><br><span class="line">LLM_MODEL = <span class="string">"baichuan-13b-chat"</span></span><br></pre></td></tr></table></figure><h3 id="接口流式输出"><a href="#接口流式输出" class="headerlink" title="接口流式输出"></a>接口流式输出</h3><p>安装sse_starlette</p><p><code>pip install sse-starlette -i https://mirror.baidu.com/pypi/simple</code></p><p>进入<code>./chat/*.py</code>，修改接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sse_starlette.sse <span class="keyword">import</span> EventSourceResponse</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> EventSourceResponse(chat_iterator(query=query,</span><br><span class="line">                                         history=history,</span><br><span class="line">                                         model_name=model_name,</span><br><span class="line">                                         prompt_name=prompt_name))</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*注释内容 */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;原项目Github：&lt;a href=&quot;https://github.com/imClumsyPanda/langchain-ChatGLM&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/imClumsyPanda/langchain-ChatGLM&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目部署&quot;&gt;&lt;a href=&quot;#项目部署&quot; class=&quot;headerlink&quot; title=&quot;项目部署&quot;&gt;&lt;/a&gt;项目部署&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;font color=&quot;gold&quot;&gt;v 0.2.6&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&quot;机器配置：&quot;&gt;&lt;a href=&quot;#机器配置：&quot; class=&quot;headerlink&quot; title=&quot;机器配置：&quot;&gt;&lt;/a&gt;机器配置：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;font color=&quot;gold&quot;&gt;python 环境：anaconda3 + python3.10.12&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;font color=&quot;gold&quot;&gt;GPU：RTX3090*2 + CUDA11.7&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;font color=&quot;gold&quot;&gt;torch：2.0.1（CUDA未升至12）&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;font color=&quot;gold&quot;&gt;conda：py310_dtglm&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&quot;模型下载&quot;&gt;&lt;a href=&quot;#模型下载&quot; class=&quot;headerlink&quot; title=&quot;模型下载&quot;&gt;&lt;/a&gt;模型下载&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;font color=&quot;gold&quot;&gt;m3e&lt;/font&gt; &lt;a href=&quot;https://huggingface.co/moka-ai/m3e-base/tree/main&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://huggingface.co/moka-ai/m3e-base/tree/main&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;font color=&quot;gold&quot;&gt;chatglm2-6b&lt;/font&gt; &lt;a href=&quot;https://huggingface.co/THUDM/chatglm2-6b/tree/main&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://huggingface.co/THUDM/chatglm2-6b/tree/main&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;chatglm清华源 &lt;a href=&quot;https://cloud.tsinghua.edu.cn/d/674208019e314311ab5c/?p=%2F&amp;amp;mode=list&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tsinghua.edu.cn/d/674208019e314311ab5c/?p=%2F&amp;amp;mode=list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(这里将模型全部下载至&lt;code&gt;/root/huggingface&lt;/code&gt;下)&lt;/p&gt;
&lt;h3 id=&quot;创建虚拟环境，安装依赖&quot;&gt;&lt;a href=&quot;#创建虚拟环境，安装依赖&quot; class=&quot;headerlink&quot; title=&quot;创建虚拟环境，安装依赖&quot;&gt;&lt;/a&gt;创建虚拟环境，安装依赖&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conda create -n py310_dtglm python=3.10.12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda activate py310_dtglm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install --use-pep517 -r requirements.txt -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install --use-pep517 -r requirements_api.txt -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install --use-pep517 -r requirements_webui.txt -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;修改配置、模型路径&quot;&gt;&lt;a href=&quot;#修改配置、模型路径&quot; class=&quot;headerlink&quot; title=&quot;修改配置、模型路径&quot;&gt;&lt;/a&gt;修改配置、模型路径&lt;/h3&gt;&lt;p&gt;复制配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python copy_config_example.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改配置文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; &lt;font color=&quot;gold&quot;&gt;model_config.py&lt;/font&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MODEL_ROOT_PATH = &lt;span class=&quot;string&quot;&gt;&quot;/root/huggingface&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MODEL_PATH = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;embed_model&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;m3e-base&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;/root/huggingface/m3e-base&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# 修改m3e模型路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; add all supported llm models&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;llm_model&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;chatglm2-6b&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;/root/huggingface/chatglm2-6b&quot;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# 修改chatglm2-6b模型路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EMBEDDING_MODEL = &lt;span class=&quot;string&quot;&gt;&quot;m3e-base&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 可以尝试最新的嵌入式sota模型：bge-large-zh-v1.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LLM_MODEL = &lt;span class=&quot;string&quot;&gt;&quot;chatglm2-6b&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="GPT" scheme="http://yoursite.com/categories/GPT/"/>
    
    
    <category term="langchain-chatchat" scheme="http://yoursite.com/tags/langchain-chatchat/"/>
    
    <category term="chat-glm" scheme="http://yoursite.com/tags/chat-glm/"/>
    
    <category term="baichuan" scheme="http://yoursite.com/tags/baichuan/"/>
    
  </entry>
  
  <entry>
    <title>Nebula3集群版新旧版本多开</title>
    <link href="http://yoursite.com/2023/09/28/Nebula3%E9%9B%86%E7%BE%A4%E7%89%88%E7%89%88%E6%9C%AC%E5%A4%9A%E5%BC%80/"/>
    <id>http://yoursite.com/2023/09/28/Nebula3%E9%9B%86%E7%BE%A4%E7%89%88%E7%89%88%E6%9C%AC%E5%A4%9A%E5%BC%80/</id>
    <published>2023-09-28T02:10:10.000Z</published>
    <updated>2023-11-03T09:32:18.875Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><font color="gold"><strong>·</strong> 系统：CentOS7</font><font color="gold"><strong>·</strong> 已有nebula版本：2.6.1（开源社区版）</font><font color="gold"><strong>·</strong> 已有nebula-console版本：2.6.0</font><font color="gold"><strong>·</strong> 已有nebula-graph-studio版本：3.2.3</font><font color="gold"><strong>·</strong> 多开nebula版本：3.6.0（开源社区版）</font><font color="gold"><strong>·</strong> 多开nebula-graph-studio版本：3.2.3</font><font color="gold"><strong>·</strong> 多开nebula-console版本：3.6.0</font><h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><p><strong>·</strong> 参考单机部署方式，对配置文件<code>--meta_server_addrs</code>做扩展，添加meta机器</p><p><strong>·</strong> 区分2.6.1版本已被占用的端口，找到配置文件默认的<code>9559</code>、<code>19559</code>、<code>9669</code>、<code>19669</code>、<code>9779</code>、<code>19779</code>端口，修改为<code>8559</code>、<code>18559</code>、<code>8669</code>、<code>18669</code>、<code>8779</code>、<code>18779</code></p><p><strong>·</strong> 启动集群</p><p><strong>·</strong> 配置nebula-graph-studio默认端口为<code>7002</code></p><p><font color="gold"><strong>·</strong> 注</font>：双开nebula后使用同版本nebula-graph-studio即使更换了端口，也不能同时运行，可以安装nebula-console来同时启动nebula控制台</p><p><code>chmod 111 nebula-console</code></p><p><code>./nebula-console --addr &lt;host&gt; --port 9669 -u root -p nebula</code></p><p><code>./nebula-console --addr &lt;host&gt; --port 8669 -u root -p nebula</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/strong&gt; 系统：CentOS7&lt;/font&gt;

&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/str</summary>
      
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
    <category term="nebula" scheme="http://yoursite.com/tags/nebula/"/>
    
  </entry>
  
  <entry>
    <title>Nebula3单机版快速安装</title>
    <link href="http://yoursite.com/2023/09/27/Nebula3%E5%8D%95%E6%9C%BA%E7%89%88%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2023/09/27/Nebula3%E5%8D%95%E6%9C%BA%E7%89%88%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/</id>
    <published>2023-09-27T08:12:31.000Z</published>
    <updated>2024-02-01T06:59:02.195Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><font color="gold"><strong>·</strong> 系统：CentOS7</font><font color="gold"><strong>·</strong> nebula版本：3.6.0（开源社区版）</font><font color="gold"><strong>·</strong> nebula-graph-studio版本：3.2.3</font><h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><h3 id="tar包源码下载"><a href="#tar包源码下载" class="headerlink" title="tar包源码下载"></a>tar包源码下载</h3><p><code>wget https://oss-cdn.nebula-graph.com.cn/package/3.6.0/nebula-graph-3.6.0.el7.x86_64.tar.gz</code></p><h3 id="解压并重命名"><a href="#解压并重命名" class="headerlink" title="解压并重命名"></a>解压并重命名</h3><p><code>tar -xvzf nebula-graph-3.6.0.el7.x86_64.tar.gz</code></p><p><code>mv nebula-graph-3.6.0.el7.x86_64 nebula</code></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p><code>cd nebula/etc</code></p><p><code>mv nebula-graphd.conf.default nebula-graphd.conf</code></p><p><code>mv nebula-metad.conf.default nebula-metad.conf</code></p><p><code>mv nebula-storaged.conf.default nebula-storaged.conf</code></p><p>修改对应文件存储位置、节点ip地址，集群同理</p><a id="more"></a><p><strong>示例：</strong></p><p><strong>·</strong> <code>nebula-graphd.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">########## basics ##########</span><br><span class="line"># Whether to run as a daemon process</span><br><span class="line">--daemonize=true</span><br><span class="line"># The file to host the process id</span><br><span class="line">--pid_file=pids/nebula-graphd.pid</span><br><span class="line"># Whether to enable optimizer</span><br><span class="line">--enable_optimizer=true</span><br><span class="line"># The default charset when a space is created</span><br><span class="line">--default_charset=utf8</span><br><span class="line"># The default collate when a space is created</span><br><span class="line">--default_collate=utf8_bin</span><br><span class="line"># Whether to use the configuration obtained from the configuration file</span><br><span class="line">--local_config=true</span><br><span class="line"></span><br><span class="line">########## logging ##########</span><br><span class="line"># The directory to host logging files</span><br><span class="line">--log_dir=/home/nebula/graph/logs</span><br><span class="line"># Log level, 0, 1, 2, 3 for INFO, WARNING, ERROR, FATAL respectively</span><br><span class="line">--minloglevel=0</span><br><span class="line"># Verbose log level, 1, 2, 3, 4, the higher of the level, the more verbose of the logging</span><br><span class="line">--v=0</span><br><span class="line"># Maximum seconds to buffer the log messages</span><br><span class="line">--logbufsecs=0</span><br><span class="line"># Whether to redirect stdout and stderr to separate output files</span><br><span class="line">--redirect_stdout=true</span><br><span class="line"># Destination filename of stdout and stderr, which will also reside in log_dir.</span><br><span class="line">--stdout_log_file=graphd-stdout.log</span><br><span class="line">--stderr_log_file=graphd-stderr.log</span><br><span class="line"># Copy log messages at or above this level to stderr in addition to logfiles. The numbers of severity levels INFO, WARNING, ERROR, and FATAL are 0, 1, 2, and 3, respectively.</span><br><span class="line">--stderrthreshold=3</span><br><span class="line"># wether logging files&apos; name contain time stamp.</span><br><span class="line">--timestamp_in_logfile_name=true</span><br><span class="line">########## query ##########</span><br><span class="line"># Whether to treat partial success as an error.</span><br><span class="line"># This flag is only used for Read-only access, and Modify access always treats partial success as an error.</span><br><span class="line">--accept_partial_success=false</span><br><span class="line"># Maximum sentence length, unit byte</span><br><span class="line">--max_allowed_query_size=4194304</span><br><span class="line"></span><br><span class="line">########## networking ##########</span><br><span class="line"># Comma separated Meta Server Addresses</span><br><span class="line">--meta_server_addrs=192.168.9.103:9559</span><br><span class="line"># Local IP used to identify the nebula-graphd process.</span><br><span class="line"># Change it to an address other than loopback if the service is distributed or</span><br><span class="line"># will be accessed remotely.</span><br><span class="line">--local_ip=192.168.9.103</span><br><span class="line"># Network device to listen on</span><br><span class="line">--listen_netdev=any</span><br><span class="line"># Port to listen on</span><br><span class="line">--port=9669</span><br><span class="line"># To turn on SO_REUSEPORT or not</span><br><span class="line">--reuse_port=false</span><br><span class="line"># Backlog of the listen socket, adjust this together with net.core.somaxconn</span><br><span class="line">--listen_backlog=1024</span><br><span class="line"># The number of seconds Nebula service waits before closing the idle connections</span><br><span class="line">--client_idle_timeout_secs=28800</span><br><span class="line"># The number of seconds before idle sessions expire</span><br><span class="line"># The range should be in [1, 604800]</span><br><span class="line">--session_idle_timeout_secs=28800</span><br><span class="line"># The number of threads to accept incoming connections</span><br><span class="line">--num_accept_threads=1</span><br><span class="line"># The number of networking IO threads, 0 for # of CPU cores</span><br><span class="line">--num_netio_threads=0</span><br><span class="line"># Max active connections for all networking threads. 0 means no limit.</span><br><span class="line"># Max connections for each networking thread = num_max_connections / num_netio_threads</span><br><span class="line">--num_max_connections=0</span><br><span class="line"># The number of threads to execute user queries, 0 for # of CPU cores</span><br><span class="line">--num_worker_threads=0</span><br><span class="line"># HTTP service ip</span><br><span class="line">--ws_ip=0.0.0.0</span><br><span class="line"># HTTP service port</span><br><span class="line">--ws_http_port=19669</span><br><span class="line"># storage client timeout</span><br><span class="line">--storage_client_timeout_ms=60000</span><br><span class="line"># slow query threshold in us</span><br><span class="line">--slow_query_threshold_us=200000</span><br><span class="line"># Port to listen on Meta with HTTP protocol, it corresponds to ws_http_port in metad&apos;s configuration file</span><br><span class="line">--ws_meta_http_port=19559</span><br><span class="line"></span><br><span class="line">########## authentication ##########</span><br><span class="line"># Enable authorization</span><br><span class="line">--enable_authorize=false</span><br><span class="line"># User login authentication type, password for nebula authentication, ldap for ldap authentication, cloud for cloud authentication</span><br><span class="line">--auth_type=password</span><br><span class="line"></span><br><span class="line">########## memory ##########</span><br><span class="line"># System memory high watermark ratio, cancel the memory checking when the ratio greater than 1.0</span><br><span class="line">--system_memory_high_watermark_ratio=0.8</span><br><span class="line"></span><br><span class="line">########## metrics ##########</span><br><span class="line">--enable_space_level_metrics=false</span><br><span class="line"></span><br><span class="line">########## experimental feature ##########</span><br><span class="line"># if use experimental features</span><br><span class="line">--enable_experimental_feature=false</span><br><span class="line"></span><br><span class="line"># if use balance data feature, only work if enable_experimental_feature is true</span><br><span class="line">--enable_data_balance=true</span><br><span class="line"></span><br><span class="line"># enable udf, written in c++ only for now</span><br><span class="line">--enable_udf=true</span><br><span class="line"></span><br><span class="line"># set the directory where the .so files of udf are stored, when enable_udf is true</span><br><span class="line">--udf_path=/home/nebula/dev/nebula/udf/</span><br><span class="line"></span><br><span class="line">########## session ##########</span><br><span class="line"># Maximum number of sessions that can be created per IP and per user</span><br><span class="line">--max_sessions_per_ip_per_user=300</span><br><span class="line"></span><br><span class="line">########## memory tracker ##########</span><br><span class="line"># trackable memory ratio (trackable_memory / (total_memory - untracked_reserved_memory) )</span><br><span class="line">--memory_tracker_limit_ratio=0.8</span><br><span class="line"># untracked reserved memory in Mib</span><br><span class="line">--memory_tracker_untracked_reserved_memory_mb=50</span><br><span class="line"></span><br><span class="line"># enable log memory tracker stats periodically</span><br><span class="line">--memory_tracker_detail_log=false</span><br><span class="line"># log memory tacker stats interval in milliseconds</span><br><span class="line">--memory_tracker_detail_log_interval_ms=60000</span><br><span class="line"></span><br><span class="line"># enable memory background purge (if jemalloc is used)</span><br><span class="line">--memory_purge_enabled=true</span><br><span class="line"># memory background purge interval in seconds</span><br><span class="line">--memory_purge_interval_seconds=10</span><br><span class="line"></span><br><span class="line">########## performance optimization ##########</span><br><span class="line"># The max job size in multi job mode</span><br><span class="line">--max_job_size=1</span><br><span class="line"># The min batch size for handling dataset in multi job mode, only enabled when max_job_size is greater than 1</span><br><span class="line">--min_batch_size=8192</span><br><span class="line"># if true, return directly without go through RPC</span><br><span class="line">--optimize_appendvertices=false</span><br><span class="line"># number of paths constructed by each thread</span><br><span class="line">--path_batch_size=10000</span><br></pre></td></tr></table></figure><p><strong>·</strong> <code>nebula-metad.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">########## basics ##########</span><br><span class="line"># Whether to run as a daemon process</span><br><span class="line">--daemonize=true</span><br><span class="line"># The file to host the process id</span><br><span class="line">--pid_file=pids/nebula-metad.pid</span><br><span class="line"></span><br><span class="line">########## logging ##########</span><br><span class="line"># The directory to host logging files</span><br><span class="line">--log_dir=/home/nebula/meta/logs</span><br><span class="line"># Log level, 0, 1, 2, 3 for INFO, WARNING, ERROR, FATAL respectively</span><br><span class="line">--minloglevel=0</span><br><span class="line"># Verbose log level, 1, 2, 3, 4, the higher of the level, the more verbose of the logging</span><br><span class="line">--v=0</span><br><span class="line"># Maximum seconds to buffer the log messages</span><br><span class="line">--logbufsecs=0</span><br><span class="line"># Whether to redirect stdout and stderr to separate output files</span><br><span class="line">--redirect_stdout=true</span><br><span class="line"># Destination filename of stdout and stderr, which will also reside in log_dir.</span><br><span class="line">--stdout_log_file=metad-stdout.log</span><br><span class="line">--stderr_log_file=metad-stderr.log</span><br><span class="line"># Copy log messages at or above this level to stderr in addition to logfiles. The numbers of severity levels INFO, WARNING, ERROR, and FATAL are 0, 1, 2, and 3, respectively.</span><br><span class="line">--stderrthreshold=3</span><br><span class="line"># wether logging files&apos; name contain time stamp, If Using logrotate to rotate logging files, than should set it to true.</span><br><span class="line">--timestamp_in_logfile_name=true</span><br><span class="line"></span><br><span class="line">########## networking ##########</span><br><span class="line"># Comma separated Meta Server addresses</span><br><span class="line">--meta_server_addrs=192.168.9.103:9559</span><br><span class="line"># Local IP used to identify the nebula-metad process.</span><br><span class="line"># Change it to an address other than loopback if the service is distributed or</span><br><span class="line"># will be accessed remotely.</span><br><span class="line">--local_ip=192.168.9.103</span><br><span class="line"># Meta daemon listening port</span><br><span class="line">--port=9559</span><br><span class="line"># HTTP service ip</span><br><span class="line">--ws_ip=0.0.0.0</span><br><span class="line"># HTTP service port</span><br><span class="line">--ws_http_port=19559</span><br><span class="line"># Port to listen on Storage with HTTP protocol, it corresponds to ws_http_port in storage&apos;s configuration file</span><br><span class="line">--ws_storage_http_port=19779</span><br><span class="line"></span><br><span class="line">########## storage ##########</span><br><span class="line"># Root data path, here should be only single path for metad</span><br><span class="line">--data_path=/home/nebula/data/meta</span><br><span class="line"></span><br><span class="line">########## Misc #########</span><br><span class="line"># The default number of parts when a space is created</span><br><span class="line">--default_parts_num=100</span><br><span class="line"># The default replica factor when a space is created</span><br><span class="line">--default_replica_factor=1</span><br><span class="line"></span><br><span class="line">--heartbeat_interval_secs=10</span><br><span class="line">--agent_heartbeat_interval_secs=60</span><br></pre></td></tr></table></figure><p><strong>·</strong> <code>nebula-metad.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">########## basics ##########</span><br><span class="line"># Whether to run as a daemon process</span><br><span class="line">--daemonize=true</span><br><span class="line"># The file to host the process id</span><br><span class="line">--pid_file=pids/nebula-storaged.pid</span><br><span class="line"># Whether to use the configuration obtained from the configuration file</span><br><span class="line">--local_config=true</span><br><span class="line"></span><br><span class="line">########## logging ##########</span><br><span class="line"># The directory to host logging files</span><br><span class="line">--log_dir=/home/nebula/storage/logs</span><br><span class="line"># Log level, 0, 1, 2, 3 for INFO, WARNING, ERROR, FATAL respectively</span><br><span class="line">--minloglevel=0</span><br><span class="line"># Verbose log level, 1, 2, 3, 4, the higher of the level, the more verbose of the logging</span><br><span class="line">--v=0</span><br><span class="line"># Maximum seconds to buffer the log messages</span><br><span class="line">--logbufsecs=0</span><br><span class="line"># Whether to redirect stdout and stderr to separate output files</span><br><span class="line">--redirect_stdout=true</span><br><span class="line"># Destination filename of stdout and stderr, which will also reside in log_dir.</span><br><span class="line">--stdout_log_file=storaged-stdout.log</span><br><span class="line">--stderr_log_file=storaged-stderr.log</span><br><span class="line"># Copy log messages at or above this level to stderr in addition to logfiles. The numbers of severity levels INFO, WARNING, ERROR, and FATAL are 0, 1, 2, and 3, respectively.</span><br><span class="line">--stderrthreshold=3</span><br><span class="line"># Wether logging files&apos; name contain time stamp.</span><br><span class="line">--timestamp_in_logfile_name=true</span><br><span class="line"></span><br><span class="line">########## networking ##########</span><br><span class="line"># Comma separated Meta server addresses</span><br><span class="line">--meta_server_addrs=192.168.9.103:9559</span><br><span class="line"># Local IP used to identify the nebula-storaged process.</span><br><span class="line"># Change it to an address other than loopback if the service is distributed or</span><br><span class="line"># will be accessed remotely.</span><br><span class="line">--local_ip=192.168.9.103</span><br><span class="line"># Storage daemon listening port</span><br><span class="line">--port=9779</span><br><span class="line"># HTTP service ip</span><br><span class="line">--ws_ip=0.0.0.0</span><br><span class="line"># HTTP service port</span><br><span class="line">--ws_http_port=19779</span><br><span class="line"># heartbeat with meta service</span><br><span class="line">--heartbeat_interval_secs=10</span><br><span class="line"></span><br><span class="line">######### Raft #########</span><br><span class="line"># Raft election timeout</span><br><span class="line">--raft_heartbeat_interval_secs=30</span><br><span class="line"># RPC timeout for raft client (ms)</span><br><span class="line">--raft_rpc_timeout_ms=500</span><br><span class="line">## recycle Raft WAL</span><br><span class="line">--wal_ttl=14400</span><br><span class="line"></span><br><span class="line">########## Disk ##########</span><br><span class="line"># Root data path. Split by comma. e.g. --data_path=/disk1/path1/,/disk2/path2/</span><br><span class="line"># One path per Rocksdb instance.</span><br><span class="line">--data_path=/home/nebula/data/storage</span><br><span class="line"></span><br><span class="line"># Minimum reserved bytes of each data path</span><br><span class="line">--minimum_reserved_bytes=268435456</span><br><span class="line"></span><br><span class="line"># The default reserved bytes for one batch operation</span><br><span class="line">--rocksdb_batch_size=4096</span><br><span class="line"># The default block cache size used in BlockBasedTable.</span><br><span class="line"># The unit is MB.</span><br><span class="line">--rocksdb_block_cache=4</span><br><span class="line"># The type of storage engine, `rocksdb&apos;, `memory&apos;, etc.</span><br><span class="line">--engine_type=rocksdb</span><br><span class="line"></span><br><span class="line"># Compression algorithm, options: no,snappy,lz4,lz4hc,zlib,bzip2,zstd</span><br><span class="line"># For the sake of binary compatibility, the default value is snappy.</span><br><span class="line"># Recommend to use:</span><br><span class="line">#   * lz4 to gain more CPU performance, with the same compression ratio with snappy</span><br><span class="line">#   * zstd to occupy less disk space</span><br><span class="line">#   * lz4hc for the read-heavy write-light scenario</span><br><span class="line">--rocksdb_compression=lz4</span><br><span class="line"></span><br><span class="line"># Set different compressions for different levels</span><br><span class="line"># For example, if --rocksdb_compression is snappy,</span><br><span class="line"># &quot;no:no:lz4:lz4::zstd&quot; is identical to &quot;no:no:lz4:lz4:snappy:zstd:snappy&quot;</span><br><span class="line"># In order to disable compression for level 0/1, set it to &quot;no:no&quot;</span><br><span class="line">--rocksdb_compression_per_level=</span><br><span class="line"></span><br><span class="line"># Whether or not to enable rocksdb&apos;s statistics, disabled by default</span><br><span class="line">--enable_rocksdb_statistics=false</span><br><span class="line"></span><br><span class="line"># Statslevel used by rocksdb to collection statistics, optional values are</span><br><span class="line">#   * kExceptHistogramOrTimers, disable timer stats, and skip histogram stats</span><br><span class="line">#   * kExceptTimers, Skip timer stats</span><br><span class="line">#   * kExceptDetailedTimers, Collect all stats except time inside mutex lock AND time spent on compression.</span><br><span class="line">#   * kExceptTimeForMutex, Collect all stats except the counters requiring to get time inside the mutex lock.</span><br><span class="line">#   * kAll, Collect all stats</span><br><span class="line">--rocksdb_stats_level=kExceptHistogramOrTimers</span><br><span class="line"></span><br><span class="line"># Whether or not to enable rocksdb&apos;s prefix bloom filter, enabled by default.</span><br><span class="line">--enable_rocksdb_prefix_filtering=true</span><br><span class="line"># Whether or not to enable rocksdb&apos;s whole key bloom filter, disabled by default.</span><br><span class="line">--enable_rocksdb_whole_key_filtering=false</span><br><span class="line"></span><br><span class="line">############## rocksdb Options ##############</span><br><span class="line"># rocksdb DBOptions in json, each name and value of option is a string, given as &quot;option_name&quot;:&quot;option_value&quot; separated by comma</span><br><span class="line">--rocksdb_db_options=&#123;&#125;</span><br><span class="line"># rocksdb ColumnFamilyOptions in json, each name and value of option is string, given as &quot;option_name&quot;:&quot;option_value&quot; separated by comma</span><br><span class="line">--rocksdb_column_family_options=&#123;&quot;write_buffer_size&quot;:&quot;67108864&quot;,&quot;max_write_buffer_number&quot;:&quot;4&quot;,&quot;max_bytes_for_level_base&quot;:&quot;268435456&quot;&#125;</span><br><span class="line"># rocksdb BlockBasedTableOptions in json, each name and value of option is string, given as &quot;option_name&quot;:&quot;option_value&quot; separated by comma</span><br><span class="line">--rocksdb_block_based_table_options=&#123;&quot;block_size&quot;:&quot;8192&quot;&#125;</span><br><span class="line"></span><br><span class="line">############### misc ####################</span><br><span class="line"># Whether turn on query in multiple thread</span><br><span class="line">--query_concurrently=true</span><br><span class="line"># Whether remove outdated space data</span><br><span class="line">--auto_remove_invalid_space=true</span><br><span class="line"># Network IO threads number</span><br><span class="line">--num_io_threads=16</span><br><span class="line"># Max active connections for all networking threads. 0 means no limit.</span><br><span class="line"># Max connections for each networking thread = num_max_connections / num_netio_threads</span><br><span class="line">--num_max_connections=0</span><br><span class="line"># Worker threads number to handle request</span><br><span class="line">--num_worker_threads=32</span><br><span class="line"># Maximum subtasks to run admin jobs concurrently</span><br><span class="line">--max_concurrent_subtasks=10</span><br><span class="line"># The rate limit in bytes when leader synchronizes snapshot data</span><br><span class="line">--snapshot_part_rate_limit=10485760</span><br><span class="line"># The amount of data sent in each batch when leader synchronizes snapshot data</span><br><span class="line">--snapshot_batch_size=1048576</span><br><span class="line"># The rate limit in bytes when leader synchronizes rebuilding index</span><br><span class="line">--rebuild_index_part_rate_limit=4194304</span><br><span class="line"># The amount of data sent in each batch when leader synchronizes rebuilding index</span><br><span class="line">--rebuild_index_batch_size=1048576</span><br><span class="line"></span><br><span class="line">########## memory tracker ##########</span><br><span class="line"># trackable memory ratio (trackable_memory / (total_memory - untracked_reserved_memory) )</span><br><span class="line">--memory_tracker_limit_ratio=0.8</span><br><span class="line"># untracked reserved memory in Mib</span><br><span class="line">--memory_tracker_untracked_reserved_memory_mb=50</span><br><span class="line"></span><br><span class="line"># enable log memory tracker stats periodically</span><br><span class="line">--memory_tracker_detail_log=false</span><br><span class="line"># log memory tacker stats interval in milliseconds</span><br><span class="line">--memory_tracker_detail_log_interval_ms=60000</span><br><span class="line"></span><br><span class="line"># enable memory background purge (if jemalloc is used)</span><br><span class="line">--memory_purge_enabled=true</span><br><span class="line"># memory background purge interval in seconds</span><br><span class="line">--memory_purge_interval_seconds=10</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>回到nebula根目录</p><p><code>cd ..</code></p><p>执行启动脚本</p><p><code>./scripts/nebula.service start all</code></p><p>查看服务状态</p><p><code>./scripts/nebula.service status all</code></p><p>重启服务</p><p><code>./scripts/nebula.service restart all</code></p><p>关闭服务</p><p><code>./scripts/nebula.service stop all</code></p><h2 id="nebula-graph-studio部署"><a href="#nebula-graph-studio部署" class="headerlink" title="nebula-graph-studio部署"></a>nebula-graph-studio部署</h2><p>v3.2.3下载地址（免费使用图探索的最高社区版本）</p><p><a href="https://github.com/vesoft-inc/nebula-studio/releases/tag/v3.2.3" target="_blank" rel="noopener">https://github.com/vesoft-inc/nebula-studio/releases/tag/v3.2.3</a></p><p>源码安装后，进入对应目录，执行启动脚本</p><p><code>./service</code></p><p><img src="/2023/09/27/Nebula3单机版快速安装/A.png" alt></p><p><img src="/2023/09/27/Nebula3单机版快速安装/B.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/strong&gt; 系统：CentOS7&lt;/font&gt;

&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/strong&gt; nebula版本：3.6.0（开源社区版）&lt;/font&gt;

&lt;font color=&quot;gold&quot;&gt;&lt;strong&gt;·&lt;/strong&gt; nebula-graph-studio版本：3.2.3&lt;/font&gt;

&lt;h2 id=&quot;单机部署&quot;&gt;&lt;a href=&quot;#单机部署&quot; class=&quot;headerlink&quot; title=&quot;单机部署&quot;&gt;&lt;/a&gt;单机部署&lt;/h2&gt;&lt;h3 id=&quot;tar包源码下载&quot;&gt;&lt;a href=&quot;#tar包源码下载&quot; class=&quot;headerlink&quot; title=&quot;tar包源码下载&quot;&gt;&lt;/a&gt;tar包源码下载&lt;/h3&gt;&lt;p&gt;&lt;code&gt;wget https://oss-cdn.nebula-graph.com.cn/package/3.6.0/nebula-graph-3.6.0.el7.x86_64.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;解压并重命名&quot;&gt;&lt;a href=&quot;#解压并重命名&quot; class=&quot;headerlink&quot; title=&quot;解压并重命名&quot;&gt;&lt;/a&gt;解压并重命名&lt;/h3&gt;&lt;p&gt;&lt;code&gt;tar -xvzf nebula-graph-3.6.0.el7.x86_64.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mv nebula-graph-3.6.0.el7.x86_64 nebula&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;修改配置文件&quot;&gt;&lt;a href=&quot;#修改配置文件&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件&quot;&gt;&lt;/a&gt;修改配置文件&lt;/h3&gt;&lt;p&gt;&lt;code&gt;cd nebula/etc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mv nebula-graphd.conf.default nebula-graphd.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mv nebula-metad.conf.default nebula-metad.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mv nebula-storaged.conf.default nebula-storaged.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改对应文件存储位置、节点ip地址，集群同理&lt;/p&gt;</summary>
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
    <category term="nebula" scheme="http://yoursite.com/tags/nebula/"/>
    
  </entry>
  
  <entry>
    <title>基于VGG16神经网络实现图像艺术风格转换</title>
    <link href="http://yoursite.com/2023/09/07/%E5%9F%BA%E4%BA%8EVGG16%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E8%89%BA%E6%9C%AF%E9%A3%8E%E6%A0%BC%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2023/09/07/%E5%9F%BA%E4%BA%8EVGG16%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E8%89%BA%E6%9C%AF%E9%A3%8E%E6%A0%BC%E8%BD%AC%E6%8D%A2/</id>
    <published>2023-09-07T07:04:43.000Z</published>
    <updated>2024-04-18T10:07:42.612Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>通过vgg16或其他神经网络提取图像特征，并使用格拉姆矩阵（Gram matrix）进行图像风格的迁移。</p><h3 id="VGG16"><a href="#VGG16" class="headerlink" title="VGG16"></a>VGG16</h3><p>不必多说，2014年ImageNet图像分类竞赛亚军，定位竞赛冠军；VGG网络采用连续的小卷积核（3x3）和池化层构建深度神经网络，网络深度可以达到16层或19层，其中VGG16和VGG19最为著名。VGG16和VGG19网络架构非常相似，都由多个卷积层和池化层交替堆叠而成，最后使用全连接层进行分类。两者的区别在于网络的深度和参数量，VGG19相对于VGG16增加了3个卷积层和一个全连接层，参数量也更多。</p><p>可在keras直接使用vgg16/19源码，自动下载相关预训练模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.applications.vgg16 <span class="keyword">import</span> VGG16</span><br><span class="line"><span class="keyword">from</span> keras.applications.vgg19 <span class="keyword">import</span> VGG19</span><br></pre></td></tr></table></figure><p>这里结合transform，在torch中构建神经网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># VGG16神经网络定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VGG16</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"""Vgg16 Net"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, requires_grad=False)</span>:</span></span><br><span class="line">        super(VGG16, self).__init__()</span><br><span class="line">        vgg_pretrained_features = models.vgg16(pretrained=<span class="literal">True</span>).features</span><br><span class="line">        self.slice1 = torch.nn.Sequential()</span><br><span class="line">        self.slice2 = torch.nn.Sequential()</span><br><span class="line">        self.slice3 = torch.nn.Sequential()</span><br><span class="line">        self.slice4 = torch.nn.Sequential()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            self.slice1.add_module(str(x), vgg_pretrained_features[x])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>, <span class="number">9</span>):</span><br><span class="line">            self.slice2.add_module(str(x), vgg_pretrained_features[x])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>, <span class="number">16</span>):</span><br><span class="line">            self.slice3.add_module(str(x), vgg_pretrained_features[x])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">16</span>, <span class="number">23</span>):</span><br><span class="line">            self.slice4.add_module(str(x), vgg_pretrained_features[x])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> requires_grad:</span><br><span class="line">            <span class="keyword">for</span> param <span class="keyword">in</span> self.parameters():</span><br><span class="line">                param.requires_grad = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, X)</span>:</span></span><br><span class="line">        h = self.slice1(X)</span><br><span class="line">        h_relu1_2 = h</span><br><span class="line">        h = self.slice2(h)</span><br><span class="line">        h_relu2_2 = h</span><br><span class="line">        h = self.slice3(h)</span><br><span class="line">        h_relu3_3 = h</span><br><span class="line">        h = self.slice4(h)</span><br><span class="line">        h_relu4_3 = h</span><br><span class="line"></span><br><span class="line">        vgg_outputs = namedtuple(<span class="string">"VggOutputs"</span>, [<span class="string">"relu1_2"</span>, <span class="string">"relu2_2"</span>, <span class="string">"relu3_3"</span>, <span class="string">"relu4_3"</span>])</span><br><span class="line">        output = vgg_outputs(h_relu1_2, h_relu2_2, h_relu3_3, h_relu4_3)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransformerNet</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(TransformerNet, self).__init__()</span><br><span class="line">        self.model = nn.Sequential(</span><br><span class="line">            ConvBlock(<span class="number">3</span>, <span class="number">32</span>, kernel_size=<span class="number">9</span>, stride=<span class="number">1</span>),</span><br><span class="line">            ConvBlock(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">            ConvBlock(<span class="number">64</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">            ResidualBlock(<span class="number">128</span>),</span><br><span class="line">            ResidualBlock(<span class="number">128</span>),</span><br><span class="line">            ResidualBlock(<span class="number">128</span>),</span><br><span class="line">            ResidualBlock(<span class="number">128</span>),</span><br><span class="line">            ResidualBlock(<span class="number">128</span>),</span><br><span class="line">            ConvBlock(<span class="number">128</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, upsample=<span class="literal">True</span>),</span><br><span class="line">            ConvBlock(<span class="number">64</span>, <span class="number">32</span>, kernel_size=<span class="number">3</span>, upsample=<span class="literal">True</span>),</span><br><span class="line">            ConvBlock(<span class="number">32</span>, <span class="number">3</span>, kernel_size=<span class="number">9</span>, stride=<span class="number">1</span>, normalize=<span class="literal">False</span>, relu=<span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.model(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResidualBlock</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, channels)</span>:</span></span><br><span class="line">        super(ResidualBlock, self).__init__()</span><br><span class="line">        self.block = nn.Sequential(</span><br><span class="line">            ConvBlock(channels, channels, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, normalize=<span class="literal">True</span>, relu=<span class="literal">True</span>),</span><br><span class="line">            ConvBlock(channels, channels, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, normalize=<span class="literal">True</span>, relu=<span class="literal">False</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.block(x) + x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvBlock</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, upsample=False, normalize=True, relu=True)</span>:</span></span><br><span class="line">        super(ConvBlock, self).__init__()</span><br><span class="line">        self.upsample = upsample</span><br><span class="line">        self.block = nn.Sequential(</span><br><span class="line">            nn.ReflectionPad2d(kernel_size // <span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(in_channels, out_channels, kernel_size, (stride,))</span><br><span class="line">        )</span><br><span class="line">        self.norm = nn.InstanceNorm2d(out_channels, affine=<span class="literal">True</span>) <span class="keyword">if</span> normalize <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        self.relu = relu</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.upsample:</span><br><span class="line">            x = F.interpolate(x, scale_factor=<span class="number">2</span>)</span><br><span class="line">        x = self.block(x)</span><br><span class="line">        <span class="keyword">if</span> self.norm <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            x = self.norm(x)</span><br><span class="line">        <span class="keyword">if</span> self.relu:</span><br><span class="line">            x = F.relu(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">测试模型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    input1 = torch.rand([<span class="number">224</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>])</span><br><span class="line">    model_x = VGG16()</span><br><span class="line">    print(model_x)</span><br></pre></td></tr></table></figure><h3 id="格拉姆矩阵"><a href="#格拉姆矩阵" class="headerlink" title="格拉姆矩阵"></a>格拉姆矩阵</h3><p>格拉姆矩阵（Gram matrix）即n维欧式空间中任意k个向量之间两两的内积所组成的矩阵，是一个对称矩阵。</p><p><img src="/2023/09/07/基于VGG16神经网络实现图像艺术风格转换/A.png" alt></p><p>更直观的理解：</p><p><img src="/2023/09/07/基于VGG16神经网络实现图像艺术风格转换/B.png" alt></p><p>输入图像的feature map为[ ch, h, w]。我们经过flatten（即是将h<em>w进行平铺成一维向量）和矩阵转置操作，可以变形为[ ch, h</em>w]和[ h*w, ch]的矩阵。再对两个作内积得到格拉姆矩阵。</p><p>使用格拉姆矩阵进行风格迁移：</p><p>1.准备目标图像和目标风格图像；</p><p>2.使用深层网络加白噪声提取目标图像和风格目标的特征向量。对两个图像的特征向量计算格拉姆矩阵，以矩阵差异最小化为优化目标，不断调整目标图像，使风格不断相似。</p><p>torch中格拉姆矩阵代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gram_matrix</span><span class="params">(y)</span>:</span></span><br><span class="line">    (b, c, h, w) = y.size()</span><br><span class="line">    features = y.view(b, c, w * h)</span><br><span class="line">    features_t = features.transpose(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    gram = features.bmm(features_t) / (c * h * w)</span><br><span class="line">    <span class="keyword">return</span> gram</span><br></pre></td></tr></table></figure><h2 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h2><p>准备训练文件和风格图片，例如随机图像*20和梵高名作星月夜</p><p><img src="/2023/09/07/基于VGG16神经网络实现图像艺术风格转换/C.png" alt></p><p><img src="/2023/09/07/基于VGG16神经网络实现图像艺术风格转换/D.png" alt></p><h3 id="utils-py工具"><a href="#utils-py工具" class="headerlink" title="utils.py工具"></a>utils.py工具</h3><p>配置训练参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">parser = argparse.ArgumentParser(description=<span class="string">"Parser 4 Training"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--style"</span>, type=str, default=<span class="string">"images/styles/the_starry_night.jpg"</span>, help=<span class="string">"Path 2 style image"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--dataset"</span>, type=str, help=<span class="string">"path 2 training dataset"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--epochs"</span>, type=int, default=<span class="number">1</span>, help=<span class="string">"Number of training epochs"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--batch_size"</span>, type=int, default=<span class="number">4</span>, help=<span class="string">"Batch size 4 training"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--image_size"</span>, type=int, default=<span class="number">256</span>, help=<span class="string">"Size of training images"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--style_size"</span>, type=int, help=<span class="string">"Size of style image"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--lr"</span>, type=float, default=<span class="number">1e-3</span>, help=<span class="string">"Learning rate"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--lambda_img"</span>, type=float, default=<span class="number">1e5</span>, help=<span class="string">"Weight 4 image loss"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--lambda_style"</span>, type=float, default=<span class="number">1e10</span>, help=<span class="string">"Weight 4 style loss"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--model_path"</span>, type=str, help=<span class="string">"Optional path 2 checkpoint model"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--model_checkpoint"</span>, type=int, default=<span class="number">1000</span>, help=<span class="string">"Batches 4 saving model"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--result_checkpoint"</span>, type=int, default=<span class="number">1000</span>, help=<span class="string">"Batches 4 saving image result"</span>)</span><br></pre></td></tr></table></figure><p>使用神经网络进行风格训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_transform</span><span class="params">(image_size)</span>:</span></span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">        [</span><br><span class="line">            transforms.Resize(int(image_size * <span class="number">1.15</span>)),</span><br><span class="line">            transforms.RandomCrop(image_size),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize(mean, std),</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> transform</span><br></pre></td></tr></table></figure><p>使用神经网络进行风格转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">style_transform</span><span class="params">(image_size=None)</span>:</span></span><br><span class="line">    resize = [transforms.Resize(image_size)] <span class="keyword">if</span> image_size <span class="keyword">else</span> []</span><br><span class="line">    transform = transforms.Compose(resize + [transforms.ToTensor(), transforms.Normalize(mean, std)])</span><br><span class="line">    <span class="keyword">return</span> transform</span><br></pre></td></tr></table></figure><p>使用均值和标准对图像张量进行反规范化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">denormalize</span><span class="params">(tensors)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        tensors[:, c].mul_(std[c]).add_(mean[c])</span><br><span class="line">    <span class="keyword">return</span> tensors</span><br></pre></td></tr></table></figure><h3 id="train-py训练脚本"><a href="#train-py训练脚本" class="headerlink" title="train.py训练脚本"></a>train.py训练脚本</h3><p>训练配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">train_args = TrainArgs()</span><br><span class="line">args = train_args.initialize().parse_args()</span><br><span class="line"></span><br><span class="line">args.dataset = <span class="string">'./dataset'</span></span><br><span class="line">args.style = <span class="string">'./images/styles/the_starry_night.jpg'</span></span><br><span class="line">args.epochs = <span class="number">2400</span> <span class="comment"># epochs*(数据集/batch_size)是1000的公倍数</span></span><br><span class="line">args.batch_size = <span class="number">4</span></span><br><span class="line">args.image_size = <span class="number">256</span></span><br></pre></td></tr></table></figure><p>训练流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">style_name = args.style.split(<span class="string">"/"</span>)[<span class="number">-1</span>].split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">os.makedirs(<span class="string">f"images/train/<span class="subst">&#123;style_name&#125;</span>_training"</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(<span class="string">f"checkpoints"</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line">train_dataset = datasets.ImageFolder(args.dataset, train_transform(args.image_size))</span><br><span class="line">dataloader = DataLoader(train_dataset, batch_size=args.batch_size)</span><br><span class="line">transformer = TransformerNet().to(device)</span><br><span class="line">vgg = VGG16(requires_grad=<span class="literal">False</span>).to(device)</span><br><span class="line"><span class="keyword">if</span> args.model_path:</span><br><span class="line">    transformer.load_state_dict(torch.load(args.model_path))</span><br><span class="line">optimizer = Adam(transformer.parameters(), args.lr)</span><br><span class="line">l2_loss = torch.nn.MSELoss().to(device)</span><br><span class="line">style = style_transform(args.style_size)(Image.open(args.style))</span><br><span class="line">style = style.repeat(args.batch_size, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>).to(device)</span><br><span class="line">features_style = vgg(style)</span><br><span class="line">gram_style = [gram_matrix(y) <span class="keyword">for</span> y <span class="keyword">in</span> features_style]</span><br><span class="line">image_samples = []</span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> random.sample(glob.glob(<span class="string">f"<span class="subst">&#123;args.dataset&#125;</span>/*/*"</span>), len(train_dataset)):</span><br><span class="line">    image_samples += [style_transform(args.image_size)(Image.open(path).resize((<span class="number">224</span>, <span class="number">224</span>)))]</span><br><span class="line">image_samples = torch.stack(image_samples)</span><br></pre></td></tr></table></figure><p>启动训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_result</span><span class="params">(sample)</span>:</span></span><br><span class="line">    transformer.eval()</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        output = transformer(image_samples.to(device))</span><br><span class="line">    image_rgb = denormalize(torch.cat((image_samples.cpu(), output.cpu()), <span class="number">2</span>))</span><br><span class="line">    save_image(image_rgb, <span class="string">f"images/train/<span class="subst">&#123;style_name&#125;</span>_training/<span class="subst">&#123;sample&#125;</span>.jpg"</span>, nrow=<span class="number">4</span>)</span><br><span class="line">    transformer.train()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(sample)</span>:</span></span><br><span class="line">    torch.save(transformer.state_dict(), <span class="string">f"checkpoints/<span class="subst">&#123;style_name&#125;</span>_<span class="subst">&#123;sample&#125;</span>.pth"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(args.epochs):</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> range(len(dataloader)):</span><br><span class="line">        batch_i = line</span><br><span class="line">        batches_done = epoch * len(dataloader) + batch_i + <span class="number">1</span></span><br><span class="line">        images = list(dataloader)[line][<span class="number">0</span>]</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        images_original = images.to(device)</span><br><span class="line">        images_transformed = transformer(images_original)</span><br><span class="line"></span><br><span class="line">        features_original = vgg(images_original)</span><br><span class="line">        features_transformed = vgg(images_transformed)</span><br><span class="line"></span><br><span class="line">        img_loss = args.lambda_img * l2_loss(features_transformed.relu2_2, features_original.relu2_2)</span><br><span class="line"></span><br><span class="line">        style_loss = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ft_y, gm_s <span class="keyword">in</span> zip(features_transformed, gram_style):</span><br><span class="line">            gm_y = gram_matrix(ft_y)</span><br><span class="line">            style_loss += l2_loss(gm_y, gm_s[: images.size(<span class="number">0</span>), :, :])</span><br><span class="line">        style_loss *= args.lambda_style</span><br><span class="line"></span><br><span class="line">        total_loss = img_loss + style_loss</span><br><span class="line">        total_loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span> batches_done % args.result_checkpoint == <span class="number">0</span>:</span><br><span class="line">            save_result(batches_done)</span><br><span class="line">        <span class="keyword">if</span> args.model_checkpoint &gt; <span class="number">0</span> <span class="keyword">and</span> batches_done % args.model_checkpoint == <span class="number">0</span>:</span><br><span class="line">            save_model(batches_done)</span><br></pre></td></tr></table></figure><p>第1000次迭代</p><p><img src="/2023/09/07/基于VGG16神经网络实现图像艺术风格转换/1000.jpg" alt></p><p>第12000次迭代（2400epoch * (20/batch_size)），效果明显</p><p><img src="/2023/09/07/基于VGG16神经网络实现图像艺术风格转换/12000.jpg" alt></p><p>到这一步，训练结束，可以预测结果</p><h2 id="预测："><a href="#预测：" class="headerlink" title="预测："></a>预测：</h2><p>配置预测参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">predict_args = PredictArgs()</span><br><span class="line">args = predict_args.initialize().parse_args()</span><br><span class="line">args.image_path = <span class="string">'./images/input/001.jpg'</span></span><br><span class="line">args.model_path = <span class="string">'./checkpoints/the_starry_night_12000.pth'</span></span><br></pre></td></tr></table></figure><p>预测代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">os.makedirs(<span class="string">"images/output"</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">   device = torch.device(<span class="string">'cpu'</span>)<span class="comment">#("cuda" if torch.cuda.is_available() else "cpu")</span></span><br><span class="line">   transform = style_transform()</span><br><span class="line">   transformer = TransformerNet().to(device)</span><br><span class="line">   transformer.load_state_dict(torch.load(mod_path))</span><br><span class="line">   transformer.eval()</span><br><span class="line">   image_tensor = Variable(transform(Image.open(img_path))).to(device)</span><br><span class="line">   image_tensor = image_tensor.unsqueeze(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">       output_image = denormalize(transformer(image_tensor)).cpu()</span><br><span class="line">       </span><br><span class="line">   name = img_path.split(<span class="string">"/"</span>)[<span class="number">-1</span>]</span><br><span class="line">   save_image(output_image, <span class="string">f"images/output/output_<span class="subst">&#123;name&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h2 id="思路·参考"><a href="#思路·参考" class="headerlink" title="思路·参考"></a>思路·参考</h2><p><a href="https://github.com/elleryqueenhomels/fast_neural_style_transfer/tree/master" target="_blank" rel="noopener">https://github.com/elleryqueenhomels/fast_neural_style_transfer/tree/master</a></p><p><a href="https://github.com/AaronJny/DeepLearningExamples/tree/master/tf2-neural-style-transfer" target="_blank" rel="noopener">https://github.com/AaronJny/DeepLearningExamples/tree/master/tf2-neural-style-transfer</a></p><p><a href="https://github.com/Huage001/PaintTransformer" target="_blank" rel="noopener">https://github.com/Huage001/PaintTransformer</a></p><p><a href="https://github.com/eriklindernoren/Fast-Neural-Style-Transfer/tree/master" target="_blank" rel="noopener">https://github.com/eriklindernoren/Fast-Neural-Style-Transfer/tree/master</a></p><p><a href="https://github.com/NeverGiveU/PaintTransformer-Pytorch-master" target="_blank" rel="noopener">https://github.com/NeverGiveU/PaintTransformer-Pytorch-master</a></p><p><a href="https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix" target="_blank" rel="noopener">https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h2&gt;&lt;p&gt;通过vgg16或其他神经</summary>
      
    
    
    
    <category term="深度学习" scheme="http://yoursite.com/categories/深度学习/"/>
    
    
    <category term="VGG" scheme="http://yoursite.com/tags/VGG/"/>
    
    <category term="卷积神经网络" scheme="http://yoursite.com/tags/卷积神经网络/"/>
    
  </entry>
  
  <entry>
    <title>paddleDetection Demo</title>
    <link href="http://yoursite.com/2023/08/31/paddleDetection%20Demo/"/>
    <id>http://yoursite.com/2023/08/31/paddleDetection%20Demo/</id>
    <published>2023-08-31T04:20:20.000Z</published>
    <updated>2024-01-25T09:14:54.938Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="PPHuman"><a href="#PPHuman" class="headerlink" title="PPHuman"></a>PPHuman</h2><h3 id="行人属性识别"><a href="#行人属性识别" class="headerlink" title="行人属性识别"></a>行人属性识别</h3><h4 id="行人属性"><a href="#行人属性" class="headerlink" title="行人属性"></a>行人属性</h4><p>cfg：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">attr_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">kpt_thresh:</span> <span class="number">0.2</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">DET:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_l_36e_pipeline.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MOT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_l_36e_pipeline.zip</span></span><br><span class="line">  <span class="attr">tracker_config:</span> <span class="string">/exp/work/video/PaddleDetection/deploy/pipeline/config/tracker_config.yml</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">skip_frame_num:</span> <span class="number">-1</span> <span class="comment"># preferably no more than 3</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">KPT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/dark_hrnet_w32_256x192.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ATTR:</span></span><br><span class="line">  <span class="attr">model_dir:</span>  <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/PPLCNet_x1_0_person_attribute_945_infer.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">8</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_human.yml --device=gpu --video_file=demo_input/human.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/行人属性.gif" alt></p><a id="more"></a><h3 id="行人行为识别"><a href="#行人行为识别" class="headerlink" title="行人行为识别"></a>行人行为识别</h3><h4 id="跌倒"><a href="#跌倒" class="headerlink" title="跌倒"></a>跌倒</h4><p>cfg：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">kpt_thresh:</span> <span class="number">0.2</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MOT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_s_36e_pipeline.zip</span></span><br><span class="line">  <span class="attr">tracker_config:</span> <span class="string">/exp/work/video/PaddleDetection/deploy/pipeline/config/tracker_config.yml</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">KPT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/dark_hrnet_w32_256x192.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">SKELETON_ACTION:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/STGCN.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">max_frames:</span> <span class="number">50</span></span><br><span class="line">  <span class="attr">display_frames:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">coord_size:</span> <span class="string">[384,</span> <span class="number">512</span><span class="string">]</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_fall.yml --device=gpu --video_file=demo_input/fall.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/跌倒.gif" alt></p><h4 id="接打电话"><a href="#接打电话" class="headerlink" title="接打电话"></a>接打电话</h4><p>cfg：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">kpt_thresh:</span> <span class="number">0.2</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MOT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_s_36e_pipeline.zip</span></span><br><span class="line">  <span class="attr">tracker_config:</span> <span class="string">/exp/work/video/PaddleDetection/deploy/pipeline/config/tracker_config.yml</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ID_BASED_CLSACTION:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/PPHGNet_tiny_calling_halfbody.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">8</span></span><br><span class="line">  <span class="attr">threshold:</span> <span class="number">0.8</span></span><br><span class="line">  <span class="attr">display_frames:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">skip_frame_num:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">KPT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/dark_hrnet_w32_256x192.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_call.yml --device=gpu --video_file=demo_input/call.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/接打电话.gif" alt></p><h4 id="吸烟"><a href="#吸烟" class="headerlink" title="吸烟"></a>吸烟</h4><p>cfg：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">kpt_thresh:</span> <span class="number">0.2</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MOT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_s_36e_pipeline.zip</span></span><br><span class="line">  <span class="attr">tracker_config:</span> <span class="string">/exp/work/video/PaddleDetection/deploy/pipeline/config/tracker_config.yml</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ID_BASED_DETACTION:</span></span><br><span class="line">  <span class="attr">model_dir:</span>  <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/ppyoloe_crn_s_80e_smoking_visdrone.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">8</span></span><br><span class="line">  <span class="attr">threshold:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">display_frames:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">skip_frame_num:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">KPT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/dark_hrnet_w32_256x192.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_smoke.yml --device=gpu --video_file=demo_input/smoke.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/吸烟.gif" style="zoom:150%;"></p><h4 id="打架"><a href="#打架" class="headerlink" title="打架"></a>打架</h4><p>cfg：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">kpt_thresh:</span> <span class="number">0.2</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MOT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_s_36e_pipeline.zip</span></span><br><span class="line">  <span class="attr">tracker_config:</span> <span class="string">/exp/work/video/PaddleDetection/deploy/pipeline/config/tracker_config.yml</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">KPT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/dark_hrnet_w32_256x192.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">VIDEO_ACTION:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://videotag.bj.bcebos.com/PaddleVideo-release2.3/ppTSM_fight.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">frame_len:</span> <span class="number">8</span></span><br><span class="line">  <span class="attr">sample_freq:</span> <span class="number">7</span></span><br><span class="line">  <span class="attr">short_size:</span> <span class="number">340</span></span><br><span class="line">  <span class="attr">target_size:</span> <span class="number">320</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_fight.yml --device=gpu --video_file=demo_input/fight.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/打架.gif" alt></p><h4 id="行人进入"><a href="#行人进入" class="headerlink" title="行人进入"></a>行人进入</h4><p>cfg：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MOT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_l_36e_pipeline.zip</span></span><br><span class="line">  <span class="attr">tracker_config:</span> <span class="string">/exp/work/video/PaddleDetection/backend/pp_config/tracker_config.yml</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">skip_frame_num:</span> <span class="number">-1</span> <span class="comment"># preferably no more than 3</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_entrance.yml --region_type=bottom --do_entrance_counting --device=gpu --video_file=demo_input/entrance.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/行人进入.gif" alt></p><h4 id="禁区"><a href="#禁区" class="headerlink" title="禁区"></a>禁区</h4><p>cfg：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MOT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_l_36e_pipeline.zip</span></span><br><span class="line">  <span class="attr">tracker_config:</span> <span class="string">/exp/work/video/PaddleDetection/backend/pp_config/tracker_config.yml</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">skip_frame_num:</span> <span class="number">-1</span> <span class="comment"># preferably no more than 3</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_entrance.yml --do_break_in_counting=true --region_type=custom --region_polygon 355 700 1100 700 915 900 50 900 --device=gpu --video_file=demo_input/forb.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/禁区.gif" alt></p><h2 id="PPVehicle"><a href="#PPVehicle" class="headerlink" title="PPVehicle"></a>PPVehicle</h2><h3 id="车辆属性识别"><a href="#车辆属性识别" class="headerlink" title="车辆属性识别"></a>车辆属性识别</h3><h4 id="车辆属性"><a href="#车辆属性" class="headerlink" title="车辆属性"></a>车辆属性</h4><p>cfg：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">DET:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_s_36e_ppvehicle.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MOT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_s_36e_ppvehicle.zip</span></span><br><span class="line">  <span class="attr">tracker_config:</span> <span class="string">/exp/work/video/PaddleDetection/backend/pp_config/tracker_config.yml</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">skip_frame_num:</span> <span class="number">3</span> <span class="comment"># preferably no more than 3</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">VEHICLE_PLATE:</span></span><br><span class="line">  <span class="attr">det_model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/ch_PP-OCRv3_det_infer.tar.gz</span></span><br><span class="line">  <span class="attr">det_limit_side_len:</span> <span class="number">736</span></span><br><span class="line">  <span class="attr">det_limit_type:</span> <span class="string">"min"</span></span><br><span class="line">  <span class="attr">rec_model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/ch_PP-OCRv3_rec_infer.tar.gz</span></span><br><span class="line">  <span class="attr">rec_image_shape:</span> <span class="string">[3,</span> <span class="number">48</span><span class="string">,</span> <span class="number">320</span><span class="string">]</span></span><br><span class="line">  <span class="attr">rec_batch_num:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">word_dict_path:</span> <span class="string">/exp/work/video/PaddleDetection/deploy/pipeline/ppvehicle/rec_word_dict.txt</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">VEHICLE_ATTR:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/vehicle_attribute_model.zip</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">8</span></span><br><span class="line">  <span class="attr">color_threshold:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">type_threshold:</span> <span class="number">0.5</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">LANE_SEG:</span></span><br><span class="line">  <span class="attr">lane_seg_config:</span> <span class="string">deploy/pipeline/config/lane_seg_config.yml</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/pp_lite_stdc2_bdd100k.zip</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_car.yml --device=gpu --video_file=demo_input/car.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/车辆属性.gif" alt></p><h3 id="车辆行为识别"><a href="#车辆行为识别" class="headerlink" title="车辆行为识别"></a>车辆行为识别</h3><h4 id="禁止停车"><a href="#禁止停车" class="headerlink" title="禁止停车"></a>禁止停车</h4><p>cfg：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MOT:</span></span><br><span class="line">  <span class="attr">model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_s_36e_ppvehicle.zip</span></span><br><span class="line">  <span class="attr">tracker_config:</span> <span class="string">/exp/work/video/PaddleDetection/deploy/pipeline/config/tracker_config.yml</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">VEHICLE_PLATE:</span></span><br><span class="line">  <span class="attr">det_model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/ch_PP-OCRv3_det_infer.tar.gz</span></span><br><span class="line">  <span class="attr">det_limit_side_len:</span> <span class="number">736</span></span><br><span class="line">  <span class="attr">det_limit_type:</span> <span class="string">"min"</span></span><br><span class="line">  <span class="attr">rec_model_dir:</span> <span class="string">https://bj.bcebos.com/v1/paddledet/models/pipeline/ch_PP-OCRv3_rec_infer.tar.gz</span></span><br><span class="line">  <span class="attr">rec_image_shape:</span> <span class="string">[3,</span> <span class="number">48</span><span class="string">,</span> <span class="number">320</span><span class="string">]</span></span><br><span class="line">  <span class="attr">rec_batch_num:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">word_dict_path:</span> <span class="string">/exp/work/video/PaddleDetection/deploy/pipeline/ppvehicle/rec_word_dict.txt</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_park.yml --region_type=custom --FLAGS.illegal_parking_time=5 --region_polygon 600 200 1400 200 1400 900 600 900 --device=gpu --video_file=demo_input/park.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/禁止停车.gif" alt></p><h2 id="人脸识别"><a href="#人脸识别" class="headerlink" title="人脸识别"></a>人脸识别</h2><h4 id="人脸识别-1"><a href="#人脸识别-1" class="headerlink" title="人脸识别"></a>人脸识别</h4><p>cfg（需paddleDetection集成arcface）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">attr_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">kpt_thresh:</span> <span class="number">0.2</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">FACE_DET:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">FACE_REC:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_face.yml --device=gpu --video_file=demo_input/face.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/人脸识别.gif" style="zoom: 200%;"></p><h2 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h2><h3 id="视频OCR"><a href="#视频OCR" class="headerlink" title="视频OCR"></a>视频OCR</h3><p>cfg（需paddleDetection集成paddleOCR）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">attr_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">kpt_thresh:</span> <span class="number">0.2</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="attr">OCR:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_ocr.yml --device=gpu --video_file=demo_input/ocr.mp4 --output_dir=demo_output/</span><br></pre></td></tr></table></figure><p><img src="/2023/08/31/paddleDetection Demo/OCR.gif" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;PPHuman&quot;&gt;&lt;a href=&quot;#PPHuman&quot; class=&quot;headerlink&quot; title=&quot;PPHuman&quot;&gt;&lt;/a&gt;PPHuman&lt;/h2&gt;&lt;h3 id=&quot;行人属性识别&quot;&gt;&lt;a href=&quot;#行人属性识别&quot; class=&quot;headerlink&quot; title=&quot;行人属性识别&quot;&gt;&lt;/a&gt;行人属性识别&lt;/h3&gt;&lt;h4 id=&quot;行人属性&quot;&gt;&lt;a href=&quot;#行人属性&quot; class=&quot;headerlink&quot; title=&quot;行人属性&quot;&gt;&lt;/a&gt;行人属性&lt;/h4&gt;&lt;p&gt;cfg：&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;crop_thresh:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;attr_thresh:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kpt_thresh:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;visual:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;warmup_frame:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;DET:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;model_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_l_36e_pipeline.zip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;batch_size:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;MOT:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;model_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;https://bj.bcebos.com/v1/paddledet/models/pipeline/mot_ppyoloe_l_36e_pipeline.zip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;tracker_config:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/exp/work/video/PaddleDetection/deploy/pipeline/config/tracker_config.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;batch_size:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;skip_frame_num:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# preferably no more than 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;enable:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;KPT:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;model_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;https://bj.bcebos.com/v1/paddledet/models/pipeline/dark_hrnet_w32_256x192.zip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;batch_size:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ATTR:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;model_dir:&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;https://bj.bcebos.com/v1/paddledet/models/pipeline/PPLCNet_x1_0_person_attribute_945_infer.zip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;batch_size:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;enable:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;cli：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python deploy/pipeline/pipeline.py --config deploy/pipeline/config/cache/cfg_human.yml --device=gpu --video_file=demo_input/human.mp4 --output_dir=demo_output/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/2023/08/31/paddleDetection Demo/行人属性.gif&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="http://yoursite.com/categories/深度学习/"/>
    
    
    <category term="paddlepaddle" scheme="http://yoursite.com/tags/paddlepaddle/"/>
    
    <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>LiveGBS国标GB/T28181视频流媒体平台</title>
    <link href="http://yoursite.com/2023/08/18/LiveGBS%E5%9B%BD%E6%A0%87GB-T28181%E8%A7%86%E9%A2%91%E6%B5%81%E5%AA%92%E4%BD%93%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/2023/08/18/LiveGBS%E5%9B%BD%E6%A0%87GB-T28181%E8%A7%86%E9%A2%91%E6%B5%81%E5%AA%92%E4%BD%93%E5%B9%B3%E5%8F%B0/</id>
    <published>2023-08-18T08:34:45.000Z</published>
    <updated>2023-08-18T08:35:21.653Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="软件包下载"><a href="#软件包下载" class="headerlink" title="软件包下载"></a>软件包下载</h2><p>LiveGBS GB28181流媒体服务下载地址：<a href="https://www.liveqing.com/docs/download/LiveGBS.html#%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">https://www.liveqing.com/docs/download/LiveGBS.html#%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD</a></p><p>选择windows版本的<code>LiveGBS 信令服务</code>和<code>LiveGBS</code>流媒体服务，免费版授权周期为26天，届时需要手动更新软件服务</p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/A.png" style="zoom:80%;"></p><h2 id="安装LiveGBS-GB28281"><a href="#安装LiveGBS-GB28281" class="headerlink" title="安装LiveGBS GB28281"></a>安装LiveGBS GB28281</h2><p>解压下载好的软件包，分别启动<code>LiveCMS.exe</code>和<code>LiveSMS.exe</code>，如果有默认端口被占用的情况可以修改对应的<code>livecms.ini</code>或<code>livesms.ini</code>配置文件，这里我将LiveGBS的默认端口从10000修改为10005</p><p>成功启动后后台出现livecms和livesms的图标</p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/B.png" alt></p><a id="more"></a><h3 id="配置LiveGBS"><a href="#配置LiveGBS" class="headerlink" title="配置LiveGBS"></a>配置LiveGBS</h3><p>进入<code>&lt;host&gt;:10005</code>，点击基础配置，修改信令服务配置和流媒体服务配置</p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/C.png" alt></p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/D.png" alt></p><h3 id="配置视频设备"><a href="#配置视频设备" class="headerlink" title="配置视频设备"></a>配置视频设备</h3><p>进入网络连接，选择对应的以太网，右键<code>属性</code>，选择<code>Internet 协议版本 4 (TCP/IPv4)</code>，选择<code>高级</code>，添加近端设备和摄像头的网段</p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/E.png" alt></p><p>进入设备IP，修改对应的网络配置、近端配置和摄像头配置</p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/F.png" alt></p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/G.png" alt></p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/H.png" alt></p><p>配置完成以后点击用户<code>admin</code>，选择重启设备</p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/I.png" alt></p><h2 id="视频拉流"><a href="#视频拉流" class="headerlink" title="视频拉流"></a>视频拉流</h2><p>回到<code>&lt;host&gt;:10005</code>，此时已经可以访问摄像头</p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/J.png" alt></p><p>点击国标设备，查看通道</p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/K.png" alt></p><p>看到已经配置好的摄像头信息</p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/L.png" alt></p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/M.png" alt></p><p>可从右下角获取视频拉流</p><p><img src="/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/N.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;软件包下载&quot;&gt;&lt;a href=&quot;#软件包下载&quot; class=&quot;headerlink&quot; title=&quot;软件包下载&quot;&gt;&lt;/a&gt;软件包下载&lt;/h2&gt;&lt;p&gt;LiveGBS GB28181流媒体服务下载地址：&lt;a href=&quot;https://www.liveqing.com/docs/download/LiveGBS.html#%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.liveqing.com/docs/download/LiveGBS.html#%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择windows版本的&lt;code&gt;LiveGBS 信令服务&lt;/code&gt;和&lt;code&gt;LiveGBS&lt;/code&gt;流媒体服务，免费版授权周期为26天，届时需要手动更新软件服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/A.png&quot; style=&quot;zoom:80%;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装LiveGBS-GB28281&quot;&gt;&lt;a href=&quot;#安装LiveGBS-GB28281&quot; class=&quot;headerlink&quot; title=&quot;安装LiveGBS GB28281&quot;&gt;&lt;/a&gt;安装LiveGBS GB28281&lt;/h2&gt;&lt;p&gt;解压下载好的软件包，分别启动&lt;code&gt;LiveCMS.exe&lt;/code&gt;和&lt;code&gt;LiveSMS.exe&lt;/code&gt;，如果有默认端口被占用的情况可以修改对应的&lt;code&gt;livecms.ini&lt;/code&gt;或&lt;code&gt;livesms.ini&lt;/code&gt;配置文件，这里我将LiveGBS的默认端口从10000修改为10005&lt;/p&gt;
&lt;p&gt;成功启动后后台出现livecms和livesms的图标&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/08/18/LiveGBS国标GB-T28181视频流媒体平台/B.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机视觉" scheme="http://yoursite.com/categories/计算机视觉/"/>
    
    
    <category term="LiveGBS" scheme="http://yoursite.com/tags/LiveGBS/"/>
    
  </entry>
  
  <entry>
    <title>paddleDetection-视频OCR</title>
    <link href="http://yoursite.com/2023/08/14/paddleDetection-%E8%A7%86%E9%A2%91OCR/"/>
    <id>http://yoursite.com/2023/08/14/paddleDetection-%E8%A7%86%E9%A2%91OCR/</id>
    <published>2023-08-14T03:15:55.000Z</published>
    <updated>2023-08-29T09:18:54.671Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="PPOCR-V4"><a href="#PPOCR-V4" class="headerlink" title="PPOCR_V4"></a>PPOCR_V4</h2><p>安装百度最新ppocr_v4库，使用虚拟环境为py39_vio，本虚拟环境不可与人脸识别（py38_arcface）兼容（opencv版本不兼容）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paddleocr --user -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>cfg_utils.py</code>新增cfg<code>--ocr</code>，设置True为开启，默认False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(</span><br><span class="line">    <span class="string">"--ocr"</span>,</span><br><span class="line">    type=bool,</span><br><span class="line">    default=<span class="literal">False</span>,</span><br><span class="line">    help=<span class="string">"use paddlepaddle-ocr"</span>)</span><br></pre></td></tr></table></figure><p><code>pipeline.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> python.visualize <span class="keyword">import</span> visualize_box_mask, visualize_attr, visualize_pose, visualize_action, visualize_vehicleplate, visualize_vehiclepress, visualize_lane, visualize_vehicle_retrograde, visualize_ocr</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PipePredictor</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, args, cfg, is_video=True, multi_camera=False)</span>:</span></span><br><span class="line">    self.ocr = args.ocr</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_video</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">                    image_rgb,</span></span></span><br><span class="line"><span class="function"><span class="params">                    result,</span></span></span><br><span class="line"><span class="function"><span class="params">                    collector,</span></span></span><br><span class="line"><span class="function"><span class="params">                    frame_id,</span></span></span><br><span class="line"><span class="function"><span class="params">                    fps,</span></span></span><br><span class="line"><span class="function"><span class="params">                    entrance=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                    records=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                    center_traj=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                    do_illegal_parking_recognition=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                    illegal_parking_dict=None)</span>:</span></span><br><span class="line">    image = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2BGR)</span><br><span class="line">    mot_res = copy.deepcopy(result.get(<span class="string">'mot'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.ocr:</span><br><span class="line">        lock.acquire() <span class="comment"># 加锁，paddleOCR是线程不安全的</span></span><br><span class="line">        ocr_result = ocr.ocr(image, cls=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">        lock.release()</span><br><span class="line">        ocr_boxes = [line[<span class="number">0</span>] <span class="keyword">for</span> line <span class="keyword">in</span> ocr_result]</span><br><span class="line">        ocr_txts = [line[<span class="number">1</span>][<span class="number">0</span>] <span class="keyword">for</span> line <span class="keyword">in</span> ocr_result]</span><br><span class="line">        ocr_scores = [line[<span class="number">1</span>][<span class="number">1</span>] <span class="keyword">for</span> line <span class="keyword">in</span> ocr_result]</span><br><span class="line">        </span><br><span class="line">        image = visualize_ocr(image, ocr_boxes, ocr_txts, ocr_scores)</span><br></pre></td></tr></table></figure><p><code>visualize.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_ocr</span><span class="params">(im, boxes, texts, score)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(im, str):</span><br><span class="line">        im = Image.open(im)</span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">        im = cv2.cvtColor(im, cv2.COLOR_RGB2BGR)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建透明图层，为图像添加文字水印</span></span><br><span class="line">    im = Image.fromarray(im)</span><br><span class="line">    im = im.convert(<span class="string">'RGBA'</span>)</span><br><span class="line">    im_canvas = Image.new(<span class="string">'RGBA'</span>, im.size, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, res <span class="keyword">in</span> enumerate(texts):</span><br><span class="line">        <span class="keyword">if</span> boxes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            box = boxes[i]</span><br><span class="line">            text = res</span><br><span class="line">            <span class="keyword">if</span> text == <span class="string">""</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            text_scale = max(<span class="number">1.0</span>, int(box[<span class="number">2</span>][<span class="number">1</span>] - box[<span class="number">1</span>][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">            draw = ImageDraw.Draw(im_canvas)</span><br><span class="line">            draw.text(</span><br><span class="line">                (box[<span class="number">0</span>][<span class="number">0</span>], box[<span class="number">0</span>][<span class="number">1</span>]),</span><br><span class="line">                text,</span><br><span class="line">                font=ImageFont.truetype(font_file, size=int(text_scale)),</span><br><span class="line">                fill=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">85</span>)) <span class="comment"># 第四位是透明度</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                draw.rectangle(</span><br><span class="line">                    ((box[<span class="number">0</span>][<span class="number">0</span>], box[<span class="number">0</span>][<span class="number">1</span>]), (box[<span class="number">2</span>][<span class="number">0</span>], box[<span class="number">2</span>][<span class="number">1</span>])),</span><br><span class="line">                    fill=<span class="literal">None</span>,</span><br><span class="line">                    outline=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>),</span><br><span class="line">                    width=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复合图层</span></span><br><span class="line">    im = Image.alpha_composite(im, im_canvas)</span><br><span class="line">    im = im.convert(<span class="string">'RGB'</span>)</span><br><span class="line">    <span class="comment"># 还原连续存储数组</span></span><br><span class="line">    im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">    <span class="keyword">return</span> im</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在<code>deploy/pipeline/config</code>下创建视频ocr的yml文件<code>infer_cfg_ppocr.yml</code>，写入基本参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">crop_thresh:</span> <span class="number">0.5</span></span><br><span class="line"><span class="attr">visual:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">warmup_frame:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/infer_cfg_ppocr.yml --device=gpu --video_file=demo_input/car_t1.mp4 --output_dir=demo_output --ocr=True</span><br></pre></td></tr></table></figure><p><img src="/2023/08/14/paddleDetection-视频OCR/A.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;PPOCR-V4&quot;&gt;&lt;a href=&quot;#PPOCR-V4&quot; class=&quot;headerlink&quot; title=&quot;PPOCR_V4&quot;&gt;&lt;/a&gt;PPOCR_V4&lt;/h2&gt;&lt;p&gt;安装百度最新ppocr_v4库，使用虚拟环境为py39_vio，本虚拟环境不可与人脸识别（py38_arcface）兼容（opencv版本不兼容）&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install paddleocr --user -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cfg_utils.py&lt;/code&gt;新增cfg&lt;code&gt;--ocr&lt;/code&gt;，设置True为开启，默认False&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;parser.add_argument(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;--ocr&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type=bool,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    default=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    help=&lt;span class=&quot;string&quot;&gt;&quot;use paddlepaddle-ocr&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;pipeline.py&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; python.visualize &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; visualize_box_mask, visualize_attr, visualize_pose, visualize_action, visualize_vehicleplate, visualize_vehiclepress, visualize_lane, visualize_vehicle_retrograde, visualize_ocr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PipePredictor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, args, cfg, is_video=True, multi_camera=False)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	self.ocr = args.ocr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;visualize_video&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                    image_rgb,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                    result,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                    collector,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                    frame_id,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                    fps,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                    entrance=None,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                    records=None,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                    center_traj=None,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                    do_illegal_parking_recognition=False,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                    illegal_parking_dict=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    image = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2BGR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mot_res = copy.deepcopy(result.get(&lt;span class=&quot;string&quot;&gt;&#39;mot&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.ocr:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.acquire() &lt;span class=&quot;comment&quot;&gt;# 加锁，paddleOCR是线程不安全的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ocr_result = ocr.ocr(image, cls=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.release()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ocr_boxes = [line[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ocr_result]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ocr_txts = [line[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ocr_result]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ocr_scores = [line[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ocr_result]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        image = visualize_ocr(image, ocr_boxes, ocr_txts, ocr_scores)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;visualize.py&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;visualize_ocr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(im, boxes, texts, score)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isinstance(im, str):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        im = Image.open(im)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        im = np.ascontiguousarray(np.copy(im))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        im = cv2.cvtColor(im, cv2.COLOR_RGB2BGR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        im = np.ascontiguousarray(np.copy(im))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 创建透明图层，为图像添加文字水印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    im = Image.fromarray(im)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    im = im.convert(&lt;span class=&quot;string&quot;&gt;&#39;RGBA&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    im_canvas = Image.new(&lt;span class=&quot;string&quot;&gt;&#39;RGBA&#39;&lt;/span&gt;, im.size, (&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, res &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(texts):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; boxes &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            box = boxes[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text = res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; text == &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text_scale = max(&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, int(box[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - box[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            draw = ImageDraw.Draw(im_canvas)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            draw.text(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (box[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], box[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                font=ImageFont.truetype(font_file, size=int(text_scale)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                fill=(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;85&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;# 第四位是透明度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                draw.rectangle(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ((box[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], box[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]), (box[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], box[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    fill=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    outline=(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    width=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 复合图层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    im = Image.alpha_composite(im, im_canvas)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    im = im.convert(&lt;span class=&quot;string&quot;&gt;&#39;RGB&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 还原连续存储数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    im = np.ascontiguousarray(np.copy(im))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; im&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="OCR" scheme="http://yoursite.com/tags/OCR/"/>
    
    <category term="paddlepaddle" scheme="http://yoursite.com/tags/paddlepaddle/"/>
    
  </entry>
  
  <entry>
    <title>paddleDetection:OpenCV检测框转中文</title>
    <link href="http://yoursite.com/2023/08/09/paddleDetection-OpenCV%E6%A3%80%E6%B5%8B%E6%A1%86%E8%BD%AC%E4%B8%AD%E6%96%87/"/>
    <id>http://yoursite.com/2023/08/09/paddleDetection-OpenCV%E6%A3%80%E6%B5%8B%E6%A1%86%E8%BD%AC%E4%B8%AD%E6%96%87/</id>
    <published>2023-08-09T08:29:45.000Z</published>
    <updated>2024-01-25T09:20:13.155Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><font color="gold">注：OpenCV不能直接显示中文，通过PIL转换会损失一部分算力性能</font><p><img src="/2023/08/09/paddleDetection-OpenCV检测框转中文/A.png" alt></p><h2 id="修改源码（可视化）"><a href="#修改源码（可视化）" class="headerlink" title="修改源码（可视化）"></a>修改源码（可视化）</h2><p><code>./deploy/python/visualize.py</code></p><h3 id="增加导入字体库和字体文件"><a href="#增加导入字体库和字体文件" class="headerlink" title="增加导入字体库和字体文件"></a>增加导入字体库和字体文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFile, ImageFont</span><br><span class="line"></span><br><span class="line">font_file = <span class="string">'/exp/work/video/PaddleDetection/deploy/pipeline/SourceHanSansCN-Medium.otf'</span></span><br></pre></td></tr></table></figure><h3 id="visualize-attr"><a href="#visualize-attr" class="headerlink" title="visualize_attr"></a>visualize_attr</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_attr</span><span class="params">(im, results, boxes=None, is_mtmct=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(im, str):</span><br><span class="line">        im = Image.open(im)</span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">        im = cv2.cvtColor(im, cv2.COLOR_RGB2BGR)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line"></span><br><span class="line">    line_inter = im.shape[<span class="number">0</span>] / <span class="number">40.</span></span><br><span class="line">    text_scale = max(<span class="number">0.5</span>, im.shape[<span class="number">0</span>] / <span class="number">100.</span>)</span><br><span class="line">    <span class="comment"># 将nparray图像转PIL图像</span></span><br><span class="line">    im = Image.fromarray(im)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, res <span class="keyword">in</span> enumerate(results):</span><br><span class="line">        print(i, res)</span><br><span class="line">        <span class="keyword">if</span> boxes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            text_w = <span class="number">3</span></span><br><span class="line">            text_h = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> is_mtmct:</span><br><span class="line">            box = boxes[i]  <span class="comment"># multi camera, bbox shape is x,y, w,h</span></span><br><span class="line">            text_w = int(box[<span class="number">0</span>]) + <span class="number">3</span></span><br><span class="line">            text_h = int(box[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            box = boxes[i]  <span class="comment"># single camera, bbox shape is 0, 0, x,y, w,h</span></span><br><span class="line">            text_w = int(box[<span class="number">2</span>]) + <span class="number">3</span></span><br><span class="line">            text_h = int(box[<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">for</span> text <span class="keyword">in</span> res:</span><br><span class="line">            text_h += int(line_inter)</span><br><span class="line">            text_loc = (text_w, text_h)</span><br><span class="line">            <span class="comment"># 写入</span></span><br><span class="line">            draw = ImageDraw.Draw(im)</span><br><span class="line">            draw.text(</span><br><span class="line">                text_loc,</span><br><span class="line">                text,</span><br><span class="line">                font=ImageFont.truetype(font_file, size=int(text_scale)), <span class="comment"># 字体位置</span></span><br><span class="line">                fill=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">    <span class="comment"># 还原连续存储数组</span></span><br><span class="line">    im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">    <span class="keyword">return</span> im</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="visualize-vehicleplate"><a href="#visualize-vehicleplate" class="headerlink" title="visualize_vehicleplate"></a>visualize_vehicleplate</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_vehicleplate</span><span class="params">(im, results, boxes=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(im, str):</span><br><span class="line">        im = Image.open(im)</span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">        im = cv2.cvtColor(im, cv2.COLOR_RGB2BGR)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        im = np.ascontiguousarray(np.copy(im))</span><br><span class="line"></span><br><span class="line">    text_scale = max(<span class="number">1.0</span>, im.shape[<span class="number">0</span>] / <span class="number">400.</span>)</span><br><span class="line">    line_inter = im.shape[<span class="number">0</span>] / <span class="number">40.</span></span><br><span class="line">    <span class="comment"># 将nparray图像转PIL图像</span></span><br><span class="line">    im = Image.fromarray(im)</span><br><span class="line">    <span class="keyword">for</span> i, res <span class="keyword">in</span> enumerate(results):</span><br><span class="line">        <span class="keyword">if</span> boxes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            text_w = <span class="number">3</span></span><br><span class="line">            text_h = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            box = boxes[i]</span><br><span class="line">            text = res</span><br><span class="line">            <span class="keyword">if</span> text == <span class="string">""</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            text_w = int(box[<span class="number">2</span>])</span><br><span class="line">            text_h = int(box[<span class="number">5</span>] + box[<span class="number">3</span>])</span><br><span class="line">            text_loc = (text_w, text_h)</span><br><span class="line">            <span class="comment"># 写入</span></span><br><span class="line">            draw = ImageDraw.Draw(im)</span><br><span class="line">            draw.text(</span><br><span class="line">                text_loc,</span><br><span class="line">                text,</span><br><span class="line">                font=ImageFont.truetype(font_file, size=int(text_scale)), <span class="comment"># 字体位置</span></span><br><span class="line">                fill=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">    <span class="comment"># 还原连续存储数组</span></span><br><span class="line">    im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">    <span class="keyword">return</span> im</span><br></pre></td></tr></table></figure><h3 id="visualize-action"><a href="#visualize-action" class="headerlink" title="visualize_action"></a>visualize_action</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_action</span><span class="params">(im,</span></span></span><br><span class="line"><span class="function"><span class="params">                     mot_boxes,</span></span></span><br><span class="line"><span class="function"><span class="params">                     action_visual_collector=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                     action_text=<span class="string">""</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                     video_action_score=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                     video_action_text=<span class="string">""</span>)</span>:</span></span><br><span class="line">    im = cv2.imread(im) <span class="keyword">if</span> isinstance(im, str) <span class="keyword">else</span> im</span><br><span class="line">    im_h, im_w = im.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    text_scale = max(<span class="number">1</span>, im.shape[<span class="number">1</span>] / <span class="number">40.</span>)</span><br><span class="line">    text_thickness = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 将nparray图像转PIL图像</span></span><br><span class="line">    im = Image.fromarray(im)</span><br><span class="line">    <span class="keyword">if</span> action_visual_collector:</span><br><span class="line">        id_action_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> collector, action_type <span class="keyword">in</span> zip(action_visual_collector, action_text):</span><br><span class="line">            id_detected = collector.get_visualize_ids()</span><br><span class="line">            <span class="keyword">for</span> pid <span class="keyword">in</span> id_detected:</span><br><span class="line">                id_action_dict[pid] = id_action_dict.get(pid, [])</span><br><span class="line">                id_action_dict[pid].append(action_type)</span><br><span class="line">        <span class="keyword">for</span> mot_box <span class="keyword">in</span> mot_boxes:</span><br><span class="line">            <span class="comment"># mot_box is a format with [mot_id, class, score, xmin, ymin, w, h] </span></span><br><span class="line">            <span class="keyword">if</span> mot_box[<span class="number">0</span>] <span class="keyword">in</span> id_action_dict:</span><br><span class="line">                text_position = (int(mot_box[<span class="number">3</span>] + mot_box[<span class="number">5</span>] * <span class="number">0.75</span>),</span><br><span class="line">                                 int(mot_box[<span class="number">4</span>] - <span class="number">10</span>))</span><br><span class="line">                display_text = <span class="string">', '</span>.join(id_action_dict[mot_box[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">                draw = ImageDraw.Draw(im)</span><br><span class="line">                draw.text(</span><br><span class="line">                    text_position,</span><br><span class="line">                    display_text,</span><br><span class="line">                    font=ImageFont.truetype(size=int(text_scale)),  <span class="comment"># 字体位置</span></span><br><span class="line">                    fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> video_action_score:</span><br><span class="line">        draw = ImageDraw.Draw(im)</span><br><span class="line">        draw.text(</span><br><span class="line">            (int(im_w / <span class="number">2</span>), int(<span class="number">15</span> * text_scale) + <span class="number">5</span>),</span><br><span class="line">            video_action_text + <span class="string">': %.2f'</span> % video_action_score,</span><br><span class="line">            font=ImageFont.truetype(font_file, size=int(text_scale)),  <span class="comment"># 字体位置</span></span><br><span class="line">            fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">    <span class="comment"># 还原连续存储数组</span></span><br><span class="line">    im = np.ascontiguousarray(np.copy(im))</span><br><span class="line">    <span class="keyword">return</span> im</span><br></pre></td></tr></table></figure><h2 id="修改源码（属性）"><a href="#修改源码（属性）" class="headerlink" title="修改源码（属性）"></a>修改源码（属性）</h2><p>修改对应中文模块</p><p><code>./deploy/pipeline/</code></p><ul><li>pipeline.py</li></ul><p><code>./deploy/pipeline/ppvehicle</code></p><ul><li>vehicle_attr.py</li><li>vehicle_plate.py</li></ul><p><code>./deploy/pipeline/pphuman</code></p><ul><li>attr_infer.py</li></ul><h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pphuman</span></span><br><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/infer_cfg_pphuman.yml --video_file=demo_input/act1.mp4 --device=gpu --output_dir=demo_output</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ppvehicle</span></span><br><span class="line">python deploy/pipeline/pipeline.py --config deploy/pipeline/config/infer_cfg_ppvehicle.yml --video_file=demo_input/car_t1.mp4 --device=gpu --output_dir=demo_output</span><br></pre></td></tr></table></figure><p><img src="/2023/08/09/paddleDetection-OpenCV检测框转中文/B.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;font color=&quot;gold&quot;&gt;注：OpenCV不能直接显示中文，通过PIL转换会损失一部分算力性能&lt;/font&gt;

&lt;p&gt;&lt;img src=&quot;/2023/08/09/paddleDetection-OpenCV检测框转中文/A.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;修改源码（可视化）&quot;&gt;&lt;a href=&quot;#修改源码（可视化）&quot; class=&quot;headerlink&quot; title=&quot;修改源码（可视化）&quot;&gt;&lt;/a&gt;修改源码（可视化）&lt;/h2&gt;&lt;p&gt;&lt;code&gt;./deploy/python/visualize.py&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;增加导入字体库和字体文件&quot;&gt;&lt;a href=&quot;#增加导入字体库和字体文件&quot; class=&quot;headerlink&quot; title=&quot;增加导入字体库和字体文件&quot;&gt;&lt;/a&gt;增加导入字体库和字体文件&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; PIL &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Image, ImageDraw, ImageFile, ImageFont&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;font_file = &lt;span class=&quot;string&quot;&gt;&#39;/exp/work/video/PaddleDetection/deploy/pipeline/SourceHanSansCN-Medium.otf&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;visualize-attr&quot;&gt;&lt;a href=&quot;#visualize-attr&quot; class=&quot;headerlink&quot; title=&quot;visualize_attr&quot;&gt;&lt;/a&gt;visualize_attr&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;visualize_attr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(im, results, boxes=None, is_mtmct=False)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isinstance(im, str):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        im = Image.open(im)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        im = np.ascontiguousarray(np.copy(im))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        im = cv2.cvtColor(im, cv2.COLOR_RGB2BGR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        im = np.ascontiguousarray(np.copy(im))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    line_inter = im.shape[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] / &lt;span class=&quot;number&quot;&gt;40.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text_scale = max(&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, im.shape[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] / &lt;span class=&quot;number&quot;&gt;100.&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 将nparray图像转PIL图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    im = Image.fromarray(im)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, res &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(results):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(i, res)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; boxes &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text_w = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text_h = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; is_mtmct:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            box = boxes[i]  &lt;span class=&quot;comment&quot;&gt;# multi camera, bbox shape is x,y, w,h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text_w = int(box[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text_h = int(box[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            box = boxes[i]  &lt;span class=&quot;comment&quot;&gt;# single camera, bbox shape is 0, 0, x,y, w,h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text_w = int(box[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]) + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text_h = int(box[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; text &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; res:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text_h += int(line_inter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text_loc = (text_w, text_h)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 写入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            draw = ImageDraw.Draw(im)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            draw.text(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                text_loc,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                font=ImageFont.truetype(font_file, size=int(text_scale)), &lt;span class=&quot;comment&quot;&gt;# 字体位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                fill=(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 还原连续存储数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    im = np.ascontiguousarray(np.copy(im))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; im&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="深度学习" scheme="http://yoursite.com/categories/深度学习/"/>
    
    
    <category term="paddlepaddle" scheme="http://yoursite.com/tags/paddlepaddle/"/>
    
    <category term="opencv" scheme="http://yoursite.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>arcface_paddle</title>
    <link href="http://yoursite.com/2023/08/08/arcface-paddle/"/>
    <id>http://yoursite.com/2023/08/08/arcface-paddle/</id>
    <published>2023-08-08T09:12:11.000Z</published>
    <updated>2023-08-09T10:03:27.504Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="GPU（物理）"><a href="#GPU（物理）" class="headerlink" title="GPU（物理）"></a>GPU（物理）</h3><ul><li><p>NVIDIA 3090*2</p></li><li><p>显卡驱动 515.43.04</p></li><li><p>CUDA版本 11.7</p></li><li><p>CUDAtoolkit (cuda_11.7.0_515.43.04_linux)</p></li><li><p>cuDNN (v8.4.1)</p></li><li><p><font color="gold">paddlepaddle 多卡训练需要NCLL支持</font> (ncll v2.12.12 cuda11.7)</p></li></ul><h3 id="paddlepaddle版本"><a href="#paddlepaddle版本" class="headerlink" title="paddlepaddle版本"></a>paddlepaddle版本</h3><ul><li>paddlepaddle-gpu==2.2.0rc0（虚拟环境cuda11.2）</li></ul><h3 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h3><ul><li><p>CentOS7.9</p></li><li><p>anaconda3</p></li><li><p>python3.8</p></li></ul><h2 id="anaconda安装insightface"><a href="#anaconda安装insightface" class="headerlink" title="anaconda安装insightface"></a>anaconda安装insightface</h2><p><font color="gold">重要：pillow版本建议选择9.5 否则过高会导致安装insightface报错</font> （错误原因：pillow10移除了getsize方法，需要修改对应位置源码为<code>getbbox</code>或 <code>getlength</code>）</p><p>告警信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tools/test_recognition.py:<span class="number">627</span>: DeprecationWarning: getsize <span class="keyword">is</span> deprecated <span class="keyword">and</span> will be removed <span class="keyword">in</span> Pillow <span class="number">10</span> (<span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>). Use getbbox <span class="keyword">or</span> getlength instead.</span><br><span class="line">  tw = font.getsize(text)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> .</span></span><br><span class="line">conda install paddlepaddle-gpu==2.2.0rc0 cudatoolkit=11.2 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/Paddle/ -c conda-forge</span><br><span class="line"><span class="meta">#</span><span class="bash"> insightface</span></span><br><span class="line">pip install -r requirements.txt -i https://mirror.baidu.com/pypi/simple</span><br><span class="line"><span class="meta">#</span><span class="bash"> insightface/recongition/arcface_paddle/</span></span><br><span class="line">pip install -r requirement.txt -i https://mirror.baidu.com/pypi/simple</span><br><span class="line"><span class="meta">#</span><span class="bash"> insightface-paddle</span></span><br><span class="line">pip install insightface-paddle -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="获取数据集"><a href="#获取数据集" class="headerlink" title="获取数据集"></a>获取数据集</h4><p><a href="https://github.com/deepinsight/insightface/tree/master/recognition/_datasets_" target="_blank" rel="noopener">https://github.com/deepinsight/insightface/tree/master/recognition/_datasets_</a></p><ul><li>MS1M_v2: MS1M-ArcFace</li><li>MS1M_v3: MS1M-RetinaFace</li></ul><p>从 MXNet 格式数据集抽取图像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/mx_recordio_2_images.py --root_dir ms1m-retinaface-t1/ --output_dir MS1M_v3/</span><br></pre></td></tr></table></figure><p>数据抽取完成后，格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MS1M_v3</span><br><span class="line">|_ images</span><br><span class="line">|  |_ 00000001.jpg</span><br><span class="line">|  |_ ...</span><br><span class="line">|  |_ 05179510.jpg</span><br><span class="line">|_ label.txt</span><br><span class="line">|_ agedb_30.bin</span><br><span class="line">|_ cfp_ff.bin</span><br><span class="line">|_ cfp_fp.bin</span><br><span class="line">|_ lfw.bin</span><br></pre></td></tr></table></figure><p>标签数据格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 图像路径与标签的分隔符: &quot;\t&quot;</span><br><span class="line"># 以下是 label.txt 每行的格式</span><br><span class="line">images/00000001.jpg 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h4><p>使用双卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CUDA_VISIBLE_DEVICES=0,1</span><br></pre></td></tr></table></figure><p>训练脚本<code>scripts/train_static.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 降级scipy,scipy版本过高会报错</span></span><br><span class="line">pip install scipy==1.7.1 -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><p>训练静态模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">python -m paddle.distributed.launch --gpus=1 tools/train.py \</span><br><span class="line">    --config_file configs/ms1mv3_r50.py \</span><br><span class="line">    --is_static True \</span><br><span class="line">    --backbone FresResNet50 \</span><br><span class="line">    --classifier LargeScaleClassifier \</span><br><span class="line">    --embedding_size 512 \</span><br><span class="line">    --model_parallel True \</span><br><span class="line">    --dropout 0.0 \</span><br><span class="line">    --sample_ratio 0.1 \</span><br><span class="line">    --loss ArcFace \</span><br><span class="line">    --batch_size 64 \</span><br><span class="line">    --dataset MS1M_v3 \</span><br><span class="line">    --num_classes 93431 \</span><br><span class="line">    --data_dir MS1M_v3/ \</span><br><span class="line">    --label_file MS1M_v3/label.txt \</span><br><span class="line">    --is_bin False \</span><br><span class="line">    --log_interval_step 100 \</span><br><span class="line">    --validation_interval_step 2000 \</span><br><span class="line">    --fp16 True \</span><br><span class="line">    --use_dynamic_loss_scaling True \</span><br><span class="line">    --init_loss_scaling 27648.0 \</span><br><span class="line">    --num_workers 8 \</span><br><span class="line">    --train_unit 'epoch' \</span><br><span class="line">    --warmup_num 0 \</span><br><span class="line">    --train_num 25 \</span><br><span class="line">    --decay_boundaries "10,16,22" \</span><br><span class="line">    --output MS1M_v3_arcface_static_0.1</span><br></pre></td></tr></table></figure><p><font color="red">3090单卡容易爆显存</font> batch_size可由128调整至64，或开启多卡训练，需ncll</p><p>模型评价<code>sh scripts/validation_static.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python tools/validation.py \</span><br><span class="line">    --is_static True \</span><br><span class="line">    --backbone FresResNet50 \</span><br><span class="line">    --embedding_size 512 \</span><br><span class="line">    --checkpoint_dir MS1M_v3_arcface_static_0.1/FresResNet50/24 \</span><br><span class="line">    --data_dir MS1M_v3/ \</span><br><span class="line">    --val_targets lfw,cfp_fp,agedb_30 \</span><br><span class="line">    --batch_size 64</span><br></pre></td></tr></table></figure><p>模型导出<code>sh scripts/export_static.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python tools/export.py \</span><br><span class="line">    --is_static True \</span><br><span class="line">    --export_type paddle \</span><br><span class="line">    --backbone FresResNet50 \</span><br><span class="line">    --embedding_size 512 \</span><br><span class="line">    --checkpoint_dir MS1M_v3_arcface_static_0.1/FresResNet50/24 \</span><br><span class="line">    --output_dir MS1M_v3_arcface_static_0.1/FresResNet50/exported_model</span><br></pre></td></tr></table></figure><p>模型推理<code>sh scripts/inference.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python tools/inference.py \</span><br><span class="line">    --export_type paddle \</span><br><span class="line">    --model_file MS1M_v3_arcface_static_0.1/FresResNet50/exported_model/FresResNet50.pdmodel \</span><br><span class="line">    --params_file MS1M_v3_arcface_static_0.1/FresResNet50/exported_model/FresResNet50.pdiparams \</span><br><span class="line">    --image_path MS1M_v3/images/00000001.jpg</span><br></pre></td></tr></table></figure><h4 id="构建人像索引"><a href="#构建人像索引" class="headerlink" title="构建人像索引"></a>构建人像索引</h4><ul><li>建立图像文件夹</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fridends</span><br><span class="line">|_ gallery</span><br><span class="line">|  |_ Chandler</span><br><span class="line">|      |_ Chandler01.jpg</span><br><span class="line">|      |_ ...</span><br><span class="line">|      |_ Chandler50.jpg</span><br><span class="line">|  |_ ...</span><br><span class="line">|  |_ Ross</span><br><span class="line">|      |_ Ross01.jpg</span><br><span class="line">|      |_ ...</span><br><span class="line">|      |_ Ross50.jpg</span><br><span class="line">|_ label.txt</span><br></pre></td></tr></table></figure><ul><li>建立索引文件<code>label.txt</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">./Chandler/Chandler00037.jpgChandler</span><br><span class="line">./Chandler/Chandler00021.pngChandler</span><br><span class="line">./Chandler/Chandler00040.jpgChandler</span><br><span class="line">./Chandler/Chandler00041.jpgChandler</span><br><span class="line">./Chandler/Chandler00004.pngChandler</span><br><span class="line">./Chandler/Chandler00034.pngChandler</span><br><span class="line">./Chandler/Chandler00008.pngChandler</span><br><span class="line">...</span><br><span class="line">./Ross/Ross00016.jpgRoss</span><br><span class="line">./Ross/Ross00022.jpgRoss</span><br><span class="line">./Ross/Ross00019.jpgRoss</span><br><span class="line">./Ross/Ross00024.jpgRoss</span><br><span class="line">./Ross/Ross00001.jpgRoss</span><br><span class="line">./Ross/Ross00039.jpgRoss</span><br><span class="line">./Ross/Ross00038.jpgRoss</span><br><span class="line">./Ross/Ross00017.jpgRoss</span><br><span class="line">./Ross/Ross00034.jpgRoss</span><br><span class="line">./Ross/Ross00002.pngRoss</span><br></pre></td></tr></table></figure><ul><li>构建索引</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insightfacepaddle --build_index ./demo/friends/index.bin --img_dir ./demo/friends/gallery --label ./demo/friends/gallery/label.txt</span><br></pre></td></tr></table></figure><h4 id="检测图片"><a href="#检测图片" class="headerlink" title="检测图片"></a>检测图片</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/test_recognition.py --det --rec --index=./demo/friends/index.bin --input=./test/测试2.jpg --output=./output</span><br></pre></td></tr></table></figure><p><img src="/2023/08/08/arcface-paddle/A.png" alt></p><h4 id="预测图片"><a href="#预测图片" class="headerlink" title="预测图片"></a>预测图片</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/test_recognition.py --det --rec --index=./demo/friends/index.bin --input=./test/测试2.jpg --output=./output</span><br></pre></td></tr></table></figure><p><img src="/2023/08/08/arcface-paddle/B.png" alt></p><h4 id="预测视频"><a href="#预测视频" class="headerlink" title="预测视频"></a>预测视频</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/test_recognition.py --det --rec --index=./demo/friends/index.bin --input=./test/mp4v.mp4 --output=./output</span><br></pre></td></tr></table></figure><h4 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h4><p>脚本封装位置：arcface_paddle/python</p><ul><li>构建索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> insightface_paddle <span class="keyword">as</span> face</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">parser = face.parser()</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">args.build_index = <span class="string">"./demo/friends/index.bin"</span></span><br><span class="line">args.img_dir = <span class="string">"./demo/friends/gallery"</span></span><br><span class="line">args.label = <span class="string">"./demo/friends/gallery/label.txt"</span></span><br><span class="line">predictor = face.InsightFace(args)</span><br><span class="line">predictor.build_index()</span><br></pre></td></tr></table></figure><ul><li>视频</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> insightface_paddle <span class="keyword">as</span> face</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">PR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line">parser = face.parser()</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">args.det = <span class="literal">True</span></span><br><span class="line">args.rec = <span class="literal">True</span></span><br><span class="line">args.index = os.path.join(PR, <span class="string">"demo/friends/index.bin"</span>)</span><br><span class="line">args.output = os.path.join(PR, <span class="string">"output"</span>)</span><br><span class="line">input_path = os.path.join(PR, <span class="string">"test/MP4V.mp4"</span>)</span><br><span class="line"></span><br><span class="line">predictor = face.InsightFace(args)</span><br><span class="line">res = predictor.predict(input_path, print_info=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> res:</span><br><span class="line">    print(_.get(<span class="string">'labels'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;h3 id=&quot;GPU（物理）&quot;&gt;&lt;a href=&quot;#GPU（物理）&quot; class=&quot;headerlink&quot; title=&quot;GPU（物理）&quot;&gt;&lt;/a&gt;GPU（物理）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;NVIDIA 3090*2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显卡驱动 515.43.04&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CUDA版本 11.7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CUDAtoolkit (cuda_11.7.0_515.43.04_linux)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cuDNN (v8.4.1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;paddlepaddle 多卡训练需要NCLL支持&lt;/font&gt; (ncll v2.12.12 cuda11.7)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;paddlepaddle版本&quot;&gt;&lt;a href=&quot;#paddlepaddle版本&quot; class=&quot;headerlink&quot; title=&quot;paddlepaddle版本&quot;&gt;&lt;/a&gt;paddlepaddle版本&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;paddlepaddle-gpu==2.2.0rc0（虚拟环境cuda11.2）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;python环境&quot;&gt;&lt;a href=&quot;#python环境&quot; class=&quot;headerlink&quot; title=&quot;python环境&quot;&gt;&lt;/a&gt;python环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CentOS7.9&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;anaconda3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;python3.8&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;anaconda安装insightface&quot;&gt;&lt;a href=&quot;#anaconda安装insightface&quot; class=&quot;headerlink&quot; title=&quot;anaconda安装insightface&quot;&gt;&lt;/a&gt;anaconda安装insightface&lt;/h2&gt;&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;重要：pillow版本建议选择9.5 否则过高会导致安装insightface报错&lt;/font&gt; （错误原因：pillow10移除了getsize方法，需要修改对应位置源码为&lt;code&gt;getbbox&lt;/code&gt;或 &lt;code&gt;getlength&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;告警信息：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tools/test_recognition.py:&lt;span class=&quot;number&quot;&gt;627&lt;/span&gt;: DeprecationWarning: getsize &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; deprecated &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; will be removed &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Pillow &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;2023&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-07&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-01&lt;/span&gt;). Use getbbox &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; getlength instead.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tw = font.getsize(text)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;环境安装&quot;&gt;&lt;a href=&quot;#环境安装&quot; class=&quot;headerlink&quot; title=&quot;环境安装&quot;&gt;&lt;/a&gt;环境安装&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; .&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conda install paddlepaddle-gpu==2.2.0rc0 cudatoolkit=11.2 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/Paddle/ -c conda-forge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; insightface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install -r requirements.txt -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; insightface/recongition/arcface_paddle/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install -r requirement.txt -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; insightface-paddle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install insightface-paddle -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="深度学习" scheme="http://yoursite.com/categories/深度学习/"/>
    
    
    <category term="paddlepaddle" scheme="http://yoursite.com/tags/paddlepaddle/"/>
    
  </entry>
  
</feed>
