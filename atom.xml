<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青域</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-12-08T08:49:19.366Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>tianL.R</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark-Core</title>
    <link href="http://yoursite.com/2022/12/07/Spark-Core/"/>
    <id>http://yoursite.com/2022/12/07/Spark-Core/</id>
    <published>2022-12-07T08:58:49.000Z</published>
    <updated>2022-12-08T08:49:19.366Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a>广播变量</h2><p>本地对象被发送到同个Executor内每个分区的处理线程上使用，这样每个分区实际上存放了重复的数据。而Executor本质上是进程，进程内资源共享，没必要将本地对象分发给所有分区，造成内存浪费</p><p><strong>解决方案</strong>：将本地对象设置为广播变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.将本地对象标记为广播变量</span></span><br><span class="line">broadcast = sc.broadcast(var)</span><br><span class="line"><span class="comment"># 2.使用广播变量，从broadcast对象中取出本地对象</span></span><br><span class="line">value = broadcast.value</span><br><span class="line"><span class="comment"># 当传输的是广播对象时，spark会只给每个Executor分发一份数据</span></span><br></pre></td></tr></table></figure><p>当本地集合对象和分布式集合对象（RDD）进行关联时，需要将本地集合对象封装为广播变量</p><ul><li>节省网络IO次数</li><li>降低Executor内存占用</li></ul><h2 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h2><p>当执行累加操作时，各个分区累加自身的内容</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spark提供累加器变量，参数是初始值</span></span><br><span class="line">acmlt = sc.accumulator(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">acmlt = sc.accumulator(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counts</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> acmlt</span><br><span class="line">    acmlt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rdd1 = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">3</span>)</span><br><span class="line">rdd2 = rdd1.map(counts)</span><br><span class="line">print(rdd2.collect())</span><br><span class="line">print(acmlt)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3]</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><font color="gold">注</font>：累加器可能因血缘关系导致重复的累加，例如一个RDD被释放后累加已经完成，此时再使用该RDD将会导致重复累加。可通过cache缓存机制来解决</p><a id="more"></a> <h2 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h2><p>Spark的核心是根据RDD来实现的，Spark Scheduler（spark任务调度）是spark核心实现的重要一环，其功能是组织处理RDD中每个分区的数据，根据RDD的依赖关系构建DAG有向无环图，再基于DAG划分Stage，将每个Stage中的任务发送到指定节点运行，合理规划资源的利用</p><h3 id="DAG标准定义"><a href="#DAG标准定义" class="headerlink" title="DAG标准定义"></a>DAG标准定义</h3><p>有向无环图：有方向而没有形成闭环的执行流程图</p><ul><li>有向：具有执行方向</li><li>无环：没有闭环</li></ul><h3 id="Action算子和Job"><a href="#Action算子和Job" class="headerlink" title="Action算子和Job"></a>Action算子和Job</h3><p>一个Action会产生一个DAG，如果代码中存在3个Action则会产生3个DAG；</p><p>每个DAG在应用程序运行时产生一个Job（应用程序内的子任务）</p><p><strong><font color="orange">1个Action = 1个DAG = 1个Job</font></strong></p><p>这样的代码运行起来在spark中被称为<strong><font color="orange">Application</font></strong></p><h3 id="DAG和分区"><a href="#DAG和分区" class="headerlink" title="DAG和分区"></a>DAG和分区</h3><p>DAG的最终作用是为了构建spark详细执行的物理计划，由于spark是分布式多分区的，所以DAG和分区间也具有关联</p><h3 id="DAG的宽窄依赖和阶段划分"><a href="#DAG的宽窄依赖和阶段划分" class="headerlink" title="DAG的宽窄依赖和阶段划分"></a>DAG的宽窄依赖和阶段划分</h3><p>在Spark RDD前后之间的血缘关系，分为：</p><ul><li>窄依赖：父RDD的一个分区，将全部数据发送给子RDD的一个分区；</li><li>宽依赖：父RDD的一个分区，将数据发送给子RDD的多个分区，别名：shuffle</li></ul><p>对于spark，会根据DAG，按照宽依赖划分不同的DAG阶段。划分依据：从后向前，每遇到宽依赖就划分出一个阶段，称之为stage。在stage内部，一定是窄依赖</p><p><img src="/2022/12/07/Spark-Core/A.png" alt></p><h2 id="Spark的内存迭代计算"><a href="#Spark的内存迭代计算" class="headerlink" title="Spark的内存迭代计算"></a>Spark的内存迭代计算</h2><p>窄依赖同一线程内走管道交互，进入宽依赖走网络IO交互</p><p>Spark默认收到全局并行度的限制，除了个别算子有特殊分区的情况，大部分算子都会遵循全局并行度的要求来划分自己的分区数。例如全局并行度是3，大部分算子的默认分区都是3-&gt;不建议再独立通过arg来指定分区数</p><h2 id="Spark并行度"><a href="#Spark并行度" class="headerlink" title="Spark并行度"></a>Spark并行度</h2><p>Spark的并行：在同一时间内，有多少task在同时运行</p><p>Spark的并行度：并行能力，当设置为6，即共有6个task在并行运行，RDD的分区被规划为6个分区</p><p>Spark并行度设置（优先级由高到低）：</p><ul><li>代码</li><li>客户端参数</li><li>配置文件</li><li>默认值（1），并不会全部以1来运行，多数情况下基于读取文件的分片数量来作为默认并行度</li></ul><p>全局并行度配置参数：</p><p><code>spark.default.parallelism</code></p><ul><li>代码中设置：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conf = SparkConf()</span><br><span class="line">conf.set(<span class="string">"spark.default.parallelism"</span>, <span class="string">"100"</span>)</span><br></pre></td></tr></table></figure><ul><li><p>客户端提交参数中设置<code>bin/spark-submit --conf &quot;spark.default.parallelism=100&quot;</code></p></li><li><p>配置文件<font color="#008080">conf/spark-defaults.conf</font>中设置<code>spark.default.parallelism 100</code></p></li></ul><p><font color="gold">注</font>：全局并行度是推荐设置，不要针对RDD更改分区，可能会影响内存迭代管道的构建，或者产生额外的shuffle</p><p>针对RDD并行度的设置（不推荐）：</p><p><strong><font color="orange">·</font></strong> repartition算子</p><p><strong><font color="orange">·</font></strong> coalesce算子</p><p><strong><font color="orange">·</font></strong> partitionBy算子</p><h3 id="规划Spark集群并行度"><a href="#规划Spark集群并行度" class="headerlink" title="规划Spark集群并行度"></a>规划Spark集群并行度</h3><p>设置为CPU总核心的<strong><font color="orange">2~10倍</font></strong>（或更高）* </p><p>比如集群可用的CPU核心数量为100个，建议并行度200~1000（确保是CPU核心的整数倍）</p><ul><li><p>设置为最少2倍：</p><p>CPU的一个核心同一时间只能做一件事，当拥有100个核心的情况下，设置100并行度，能利用全部的CPU，但task的压力不均衡，一旦某个task先执行完毕，会导致某个CPU核心的空闲。所以将task并行分配的数量增多，例如设置1000并行度，同一时间内有100个task在运行，900个在等待，但可以确保某个task运行完毕后会不断有task补上，不让CPU处于空闲状态，最大程度利用集群的资源</p></li></ul><h2 id="Spark任务调度"><a href="#Spark任务调度" class="headerlink" title="Spark任务调度"></a>Spark任务调度</h2><h3 id="Spark任务由Driver进行调度"><a href="#Spark任务由Driver进行调度" class="headerlink" title="Spark任务由Driver进行调度"></a>Spark任务由Driver进行调度</h3><p>包括：</p><ul><li>逻辑DAG产生</li><li>分区DAG产生</li><li>基于分区DAG构建线程task并划分</li><li>将task分配给Executor并监控其工作</li></ul><h3 id="Spark程序调度流程"><a href="#Spark程序调度流程" class="headerlink" title="Spark程序调度流程"></a>Spark程序调度流程</h3><ul><li>构建Driver（<font color="orange">Driver</font>）</li><li>构建SparkContext执行环境入口对象（<font color="orange">Driver</font>）</li><li>基于DAG scheduler调度器构建逻辑task分配（<font color="orange">Driver</font>）</li><li>基于task scheduler调度器将逻辑task分配到各个Executor上执行并监控（<font color="orange">Driver</font>）</li><li>Worker（Executor）被task scheduler管理监控，遵从指令干活并汇报进度（<font color="orange">Worker</font>）</li></ul><h3 id="Driver内部组件"><a href="#Driver内部组件" class="headerlink" title="Driver内部组件"></a>Driver内部组件</h3><ul><li><p><strong>DAG调度器</strong></p><p>将逻辑DAG进行处理，最终得到逻辑上的task划分</p></li><li><p><strong>Task调度器</strong></p><p>基于DAG调度器的产出，来规划这些逻辑的task应该在哪些物理的Executor上运行，以及监控它们</p></li></ul><h3 id="层级关系梳理"><a href="#层级关系梳理" class="headerlink" title="层级关系梳理"></a>层级关系梳理</h3><ul><li>1个spark环境可运行多个Application；</li><li>1个代码成功运行生成一个Application；</li><li>1个Application内部有多个Job；</li><li>1个Action算子产生1个Job，每个Job有自己的DAG执行图；</li><li>1个Job的DAG基于宽窄依赖划分不同的阶段；</li><li>1个阶段里基于分区数量形成多个并行的内存迭代管道；</li><li>1个内存迭代管道形成1个task（DAG调度器划分将Job内划分出具体的task任务，1个Job被划分出的task在逻辑上被称为这个job的taskset）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;广播变量&quot;&gt;&lt;a href=&quot;#广播变量&quot; class=&quot;headerlink&quot; title=&quot;广播变量&quot;&gt;&lt;/a&gt;广播变量&lt;/h2&gt;&lt;p&gt;本地对象被发送到同个Executor内每个分区的处理线程上使用，这样每个分区实际上存放了重复的数据。而Executor本质上是进程，进程内资源共享，没必要将本地对象分发给所有分区，造成内存浪费&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;：将本地对象设置为广播变量&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 1.将本地对象标记为广播变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;broadcast = sc.broadcast(var)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 2.使用广播变量，从broadcast对象中取出本地对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value = broadcast.value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 当传输的是广播对象时，spark会只给每个Executor分发一份数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当本地集合对象和分布式集合对象（RDD）进行关联时，需要将本地集合对象封装为广播变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节省网络IO次数&lt;/li&gt;
&lt;li&gt;降低Executor内存占用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;累加器&quot;&gt;&lt;a href=&quot;#累加器&quot; class=&quot;headerlink&quot; title=&quot;累加器&quot;&gt;&lt;/a&gt;累加器&lt;/h2&gt;&lt;p&gt;当执行累加操作时，各个分区累加自身的内容&lt;/p&gt;
 &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# spark提供累加器变量，参数是初始值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;acmlt = sc.accumulator(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyspark &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SparkConf, SparkContext&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conf = SparkConf().setAppName(&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;).setMaster(&lt;span class=&quot;string&quot;&gt;&quot;local[*]&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sc = SparkContext(conf=conf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;acmlt = sc.accumulator(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; acmlt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    acmlt += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdd1 = sc.parallelize([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdd2 = rdd1.map(counts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(rdd2.collect())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(acmlt)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;注&lt;/font&gt;：累加器可能因血缘关系导致重复的累加，例如一个RDD被释放后累加已经完成，此时再使用该RDD将会导致重复累加。可通过cache缓存机制来解决&lt;/p&gt;</summary>
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
    <category term="pyspark" scheme="http://yoursite.com/tags/pyspark/"/>
    
  </entry>
  
  <entry>
    <title>Pyspark-RDD</title>
    <link href="http://yoursite.com/2022/12/07/Pyspark-RDD/"/>
    <id>http://yoursite.com/2022/12/07/Pyspark-RDD/</id>
    <published>2022-12-07T05:45:49.000Z</published>
    <updated>2022-12-08T06:09:52.881Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h2><p>RDD（Resilient Distributed Dataset）弹性分布式数据集，是spark中最基本的数据抽象，代表一个不可变、可分区、其中元素可并行计算的集合</p><ul><li>Resilient：RDD中的数据可存储再内存或磁盘中</li><li>Distributed：分布式存储数据（跨机器/跨进程），用于分布式计算</li><li>Dataset：一个用于存放数据的数据集合</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p>RDD分区是RDD数据存储的最小单位，一份RDD数据本质上分隔成了多个分区</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储9个数字，设立三个分区</span></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], <span class="number">3</span>)</span><br><span class="line">rdd.glom().collect()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[1,2,3],[4,5,6],[7,8,9]]</span><br></pre></td></tr></table></figure><h4 id="RDD方法会作用在其所有方法上"><a href="#RDD方法会作用在其所有方法上" class="headerlink" title="RDD方法会作用在其所有方法上"></a>RDD方法会作用在其所有方法上</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.map(<span class="keyword">lambda</span> x: x * <span class="number">10</span>).collect()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[10,20,30,40,50,60,70,80,90]</span><br></pre></td></tr></table></figure><h4 id="RDD之间具有依赖关系"><a href="#RDD之间具有依赖关系" class="headerlink" title="RDD之间具有依赖关系"></a>RDD之间具有依赖关系</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line">rdd1 = sc.textFile(<span class="string">"../test.text"</span>)</span><br><span class="line">rdd2 = rdd1.flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">' '</span>))</span><br><span class="line">rdd3 = rdd2.map(<span class="keyword">lambda</span> x: (x, <span class="number">1</span>))</span><br><span class="line">rdd4 = rdd3.reduceByKey(<span class="keyword">lambda</span> a, b: a+b)</span><br><span class="line">print(rdd4.collect())</span><br></pre></td></tr></table></figure><h4 id="Key-Value型RDD可以有分区器"><a href="#Key-Value型RDD可以有分区器" class="headerlink" title="Key-Value型RDD可以有分区器"></a>Key-Value型RDD可以有分区器</h4><p>KV型RDD：RDD内存储的数据是只有两个元素的二元元组</p><p>默认分区器：Hash分区规则，也可手动设置分区器：rdd.partitionBy()方法</p><p><font color="gold">注</font>：不是所有RDD都是KV型</p><h4 id="RDD的分区规划：会尽量靠近数据所在的服务器"><a href="#RDD的分区规划：会尽量靠近数据所在的服务器" class="headerlink" title="RDD的分区规划：会尽量靠近数据所在的服务器"></a>RDD的分区规划：会尽量靠近数据所在的服务器</h4><p>在初始RDD读取数据规划阶段，分区会尽量规划到存储数据所在服务器，直接读取本地数据，避免从网络读取数据</p><p>Spark会在确保并行计算能力的前提下，尽量确保本地读取</p><h3 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h3><ul><li>通过并行化集合创建（本地对象转化为分布式RDD）</li><li>读取外部数据源（读文件）</li></ul><h4 id="并行化创建"><a href="#并行化创建" class="headerlink" title="并行化创建"></a>并行化创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arg1: 集合对象，如：list</span></span><br><span class="line"><span class="comment"># arg2：可选，指定分区数量</span></span><br><span class="line">rdd = SparkContext.parallelize(arg1, arg2)</span><br></pre></td></tr></table></figure><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>通过textFile API来读取本地或者hdfs的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arg1: 文件路径</span></span><br><span class="line"><span class="comment"># arg2：可选，最小分区数量</span></span><br><span class="line"><span class="comment"># 当arg2超出spark允许范围，参数失效</span></span><br><span class="line">SparkContext.textFile(arg1, arg2)</span><br></pre></td></tr></table></figure><p>通过wholeTextFile API来读取小文件，这个api偏向于少量分区读取数据，是pyspark基于小文件的优化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arg1：文件路径</span></span><br><span class="line"><span class="comment"># arg2：可选，最小分区数量</span></span><br><span class="line"><span class="comment"># 当arg2超出spark允许范围，参数失效</span></span><br><span class="line">SparkContext.wholeTextFiles(arg1, arg2)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="RDD算子"><a href="#RDD算子" class="headerlink" title="RDD算子"></a>RDD算子</h3><p>方法、函数：本地对象的API</p><p>算子：分布式集合对象的API</p><p>RDD的算子分为两类：</p><ul><li><p>Transformation：转换算子</p><p>返回值仍旧是RDD的算子，构建执行计划</p></li><li><p>Action：行动算子</p><p>返回值不再是RDD，使执行计划开始工作</p></li></ul><h3 id="Transformation算子"><a href="#Transformation算子" class="headerlink" title="Transformation算子"></a>Transformation算子</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>将RDD的数据一条条处理（处理逻辑基于map算子接收的处理函数），返回新的RDD</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.map(func)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"TEST"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> data * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(rdd.map(add).collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[10, 20, 30, 40, 50, 60]</span><br></pre></td></tr></table></figure><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>对RDD执行map操作，接着进行解除嵌套：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 嵌套</span></span><br><span class="line">lst = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="comment"># 解除嵌套</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="string">"hadoop spark hadoop"</span>, <span class="string">"spark hadoop hadoop"</span>, <span class="string">"hadoop flink spark"</span>])</span><br><span class="line"><span class="comment"># 得到所有的单词, 组成RDD, flatMap的传入参数 和map一致, 就是给map逻辑用的, 解除嵌套无需逻辑(传参)</span></span><br><span class="line">rdd2 = rdd.flatMap(<span class="keyword">lambda</span> line: line.split(<span class="string">" "</span>))</span><br><span class="line">print(rdd2.collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;hadoop&apos;, &apos;spark&apos;, &apos;hadoop&apos;, &apos;spark&apos;, &apos;hadoop&apos;, &apos;hadoop&apos;, &apos;hadoop&apos;, &apos;flink&apos;, &apos;spark&apos;]</span><br></pre></td></tr></table></figure><h4 id="reduceByKey"><a href="#reduceByKey" class="headerlink" title="reduceByKey"></a>reduceByKey</h4><p>针对KV型RDD自动按照key进行分组，然后根据提供的聚合逻辑完成组内数据（value）聚合操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接受两个类型一致的传入参数，返回聚合值</span></span><br><span class="line">rdd.reduceByKey(func)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># reduceByKey 对相同key 的数据执行聚合相加</span></span><br><span class="line">print(rdd.reduceByKey(<span class="keyword">lambda</span> a, b: a + b).collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;b&apos;, 2), (&apos;a&apos;, 3)]</span><br></pre></td></tr></table></figure><h4 id="mapValues"><a href="#mapValues" class="headerlink" title="mapValues"></a>mapValues</h4><p>针对二元元组RDD，对其内部的二元元组value值进行map</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传入二元元组的value值，func只对value进行处理</span></span><br><span class="line">rdd.mapValues(func)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># reduceByKey 对相同key 的数据执行聚合相加</span></span><br><span class="line">print(rdd.mapValues(<span class="keyword">lambda</span> x: x * <span class="number">10</span>).collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;a&apos;, 10), (&apos;a&apos;, 10), (&apos;b&apos;, 10), (&apos;b&apos;, 10), (&apos;a&apos;, 10)]</span><br></pre></td></tr></table></figure><h4 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h4><p>将RDD的数据进行分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func要求传入一个参数，返回一个值，类型不做要求。相同的返回值将被放入同一个组中。</span></span><br><span class="line"><span class="comment"># 分组完成后，每一个组是一个二元元组，key就是返回值，所有同组数据放入一个迭代器对象中作为value</span></span><br><span class="line">rdd.groupBy(func)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'b'</span>, <span class="number">3</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过groupBy对数据进行分组</span></span><br><span class="line"><span class="comment"># groupBy传入的函数的 意思是: 通过这个函数, 确定按照谁来分组(返回谁即可)</span></span><br><span class="line"><span class="comment"># 分组规则 和SQL是一致的, 也就是相同的在一个组(Hash分组)</span></span><br><span class="line">result = rdd.groupBy(<span class="keyword">lambda</span> t: t[<span class="number">0</span>])</span><br><span class="line">print(result.map(<span class="keyword">lambda</span> t:(t[<span class="number">0</span>], list(t[<span class="number">1</span>]))).collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;b&apos;, [(&apos;b&apos;, 1), (&apos;b&apos;, 2), (&apos;b&apos;, 3)]), (&apos;a&apos;, [(&apos;a&apos;, 1), (&apos;a&apos;, 1)])]</span><br></pre></td></tr></table></figure><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>过滤数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func返回值为True的参数保留，False丢弃</span></span><br><span class="line">rdd.filter(func)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过Filter算子, 过滤奇数</span></span><br><span class="line">result = rdd.filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(result.collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 3, 5]</span><br></pre></td></tr></table></figure><h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><p>对RDD数据进行去重</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arg：去重分区数量，一般省略</span></span><br><span class="line">rdd.distinct(arg)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># distinct 进行RDD数据去重操作</span></span><br><span class="line">print(rdd.distinct().collect())</span><br><span class="line"></span><br><span class="line">rdd2 = sc.parallelize([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">3</span>)])</span><br><span class="line">print(rdd2.distinct().collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2, 1, 3]</span><br><span class="line">[(&apos;a&apos;, 1), (&apos;a&apos;, 3)]</span><br></pre></td></tr></table></figure><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><p>将两个RDD合并成一个RDD返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅合并，不会去重</span></span><br><span class="line"><span class="comment"># 可以合并不同类型的RDD</span></span><br><span class="line">rdd.union(other_rdd)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd1 = sc.parallelize([<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">rdd2 = sc.parallelize([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>])</span><br><span class="line"></span><br><span class="line">rdd3 = rdd1.union(rdd2)</span><br><span class="line">print(rdd3.collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 1, 3, 3, &apos;a&apos;, &apos;b&apos;, &apos;a&apos;]</span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>对两个RDD执行JOIN操作（可实现SQL的内/外连接）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jion算子只能用于二元元组</span></span><br><span class="line">rdd.join(other_rdd)            <span class="comment"># 内连接</span></span><br><span class="line">rdd.leftOuterJoin(other_rdd)   <span class="comment"># 左外连接</span></span><br><span class="line">rdd.rightOuterJoin(other_rdd)  <span class="comment"># 右外连接</span></span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd1 = sc.parallelize([ (<span class="number">1001</span>, <span class="string">"zhangsan"</span>), (<span class="number">1002</span>, <span class="string">"lisi"</span>), (<span class="number">1003</span>, <span class="string">"wangwu"</span>), (<span class="number">1004</span>, <span class="string">"zhaoliu"</span>) ])</span><br><span class="line">rdd2 = sc.parallelize([ (<span class="number">1001</span>, <span class="string">"销售部"</span>), (<span class="number">1002</span>, <span class="string">"科技部"</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过join算子来进行rdd之间的关联</span></span><br><span class="line"><span class="comment"># 对于join算子来说 关联条件 按照二元元组的key来进行关联</span></span><br><span class="line">print(rdd1.join(rdd2).collect())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左外连接, 右外连接 可以更换一下rdd的顺序 或者调用rightOuterJoin即可</span></span><br><span class="line">print(rdd1.leftOuterJoin(rdd2).collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(1001, (&apos;zhangsan&apos;, &apos;销售部&apos;)), (1002, (&apos;lisi&apos;, &apos;科技部&apos;))]</span><br><span class="line">[(1004, (&apos;zhaoliu&apos;, None)), (1001, (&apos;zhangsan&apos;, &apos;销售部&apos;)), (1002, (&apos;lisi&apos;, &apos;科技部&apos;)), (1003, (&apos;wangwu&apos;, None))]</span><br></pre></td></tr></table></figure><h4 id="intersection"><a href="#intersection" class="headerlink" title="intersection"></a>intersection</h4><p>求两个RDD的交集，返回一个新RDD</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.intersection(other_rdd)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd1 = sc.parallelize([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">3</span>)])</span><br><span class="line">rdd2 = sc.parallelize([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">3</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过intersection算子求RDD之间的交集, 将交集取出 返回新RDD</span></span><br><span class="line">rdd3 = rdd1.intersection(rdd2)</span><br><span class="line"></span><br><span class="line">print(rdd3.collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;a&apos;, 1)]</span><br></pre></td></tr></table></figure><h4 id="glom"><a href="#glom" class="headerlink" title="glom"></a>glom</h4><p>将RDD的数据按照分区加上嵌套</p><p>例如RDD数据[1,2,3,4,5]有两个分区，经过glom处理后变成：[[1,2,3]],[4,5]]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.glom()</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(rdd.glom().collect())</span><br><span class="line">print(rdd.glom().flatMap(<span class="keyword">lambda</span> x: x).collect()) <span class="comment"># tips：解嵌套</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[1, 2, 3, 4], [5, 6, 7, 8, 9]]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><h4 id="groupByKey"><a href="#groupByKey" class="headerlink" title="groupByKey"></a>groupByKey</h4><p>针对KV型RDD自动按key分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.groupByKey()</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">rdd2 = rdd.groupByKey()</span><br><span class="line"></span><br><span class="line">print(rdd2.map(<span class="keyword">lambda</span> x: (x[<span class="number">0</span>], list(x[<span class="number">1</span>]))).collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;b&apos;, [1, 1, 1]), (&apos;a&apos;, [1, 1])]</span><br></pre></td></tr></table></figure><h4 id="sortBy"><a href="#sortBy" class="headerlink" title="sortBy"></a>sortBy</h4><p>基于指定的排序函数对RDD数据进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ascending：True-升序，False-降序</span></span><br><span class="line"><span class="comment"># numPartitions：用于排序的分区数量，要进行全局排序，设置为1</span></span><br><span class="line">rdd.sortBy(func, ascending=<span class="literal">False</span>, numPartitions=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([(<span class="string">'c'</span>, <span class="number">3</span>), (<span class="string">'f'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">11</span>), (<span class="string">'c'</span>, <span class="number">3</span>), (<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'c'</span>, <span class="number">5</span>), (<span class="string">'e'</span>, <span class="number">1</span>), (<span class="string">'n'</span>, <span class="number">9</span>), (<span class="string">'a'</span>, <span class="number">1</span>)], <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sortBy对rdd执行排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照value 数字进行排序</span></span><br><span class="line"><span class="comment"># 参数1函数，告知Spark 按照数据的哪个列进行排序</span></span><br><span class="line"><span class="comment"># 参数2: True表示升序 False表示降序</span></span><br><span class="line"><span class="comment"># 参数3: 排序的分区数</span></span><br><span class="line"><span class="string">"""注意: 如果要全局有序, 排序分区数需设置为1"""</span></span><br><span class="line">print(rdd.sortBy(<span class="keyword">lambda</span> x: x[<span class="number">1</span>], ascending=<span class="literal">True</span>, numPartitions=<span class="number">1</span>).collect())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照key来进行排序</span></span><br><span class="line">print(rdd.sortBy(<span class="keyword">lambda</span> x: x[<span class="number">0</span>], ascending=<span class="literal">False</span>, numPartitions=<span class="number">1</span>).collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;f&apos;, 1), (&apos;a&apos;, 1), (&apos;e&apos;, 1), (&apos;a&apos;, 1), (&apos;c&apos;, 3), (&apos;c&apos;, 3), (&apos;c&apos;, 5), (&apos;n&apos;, 9), (&apos;b&apos;, 11)]</span><br><span class="line">[(&apos;n&apos;, 9), (&apos;f&apos;, 1), (&apos;e&apos;, 1), (&apos;c&apos;, 3), (&apos;c&apos;, 3), (&apos;c&apos;, 5), (&apos;b&apos;, 11), (&apos;a&apos;, 1), (&apos;a&apos;, 1)]</span><br></pre></td></tr></table></figure><h4 id="sortByKey"><a href="#sortByKey" class="headerlink" title="sortByKey"></a>sortByKey</h4><p>针对KV型RDD按照key进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ascending：True-升序，False-降序</span></span><br><span class="line"><span class="comment"># numPartitions：用于排序的分区数量，要进行全局排序，设置为1</span></span><br><span class="line"><span class="comment"># keyfunc：在排序前对key进行的处理</span></span><br><span class="line">rdd.sortByKey(ascending=<span class="literal">True</span>, numPartitions=<span class="literal">None</span>, keyfunc=&lt;function RDD.&lt;<span class="keyword">lambda</span>&gt;&gt;)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'E'</span>, <span class="number">1</span>), (<span class="string">'C'</span>, <span class="number">1</span>), (<span class="string">'D'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">1</span>), (<span class="string">'g'</span>, <span class="number">1</span>), (<span class="string">'f'</span>, <span class="number">1</span>),</span><br><span class="line">                      (<span class="string">'y'</span>, <span class="number">1</span>), (<span class="string">'u'</span>, <span class="number">1</span>), (<span class="string">'i'</span>, <span class="number">1</span>), (<span class="string">'o'</span>, <span class="number">1</span>), (<span class="string">'p'</span>, <span class="number">1</span>),</span><br><span class="line">                      (<span class="string">'m'</span>, <span class="number">1</span>), (<span class="string">'n'</span>, <span class="number">1</span>), (<span class="string">'j'</span>, <span class="number">1</span>), (<span class="string">'k'</span>, <span class="number">1</span>), (<span class="string">'l'</span>, <span class="number">1</span>)], <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(rdd.sortByKey(ascending=<span class="literal">True</span>, numPartitions=<span class="number">1</span>, keyfunc=<span class="keyword">lambda</span> key: str(key).lower()).collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;a&apos;, 1), (&apos;b&apos;, 1), (&apos;C&apos;, 1), (&apos;D&apos;, 1), (&apos;E&apos;, 1), (&apos;f&apos;, 1), (&apos;g&apos;, 1), (&apos;i&apos;, 1), (&apos;j&apos;, 1), (&apos;k&apos;, 1), (&apos;l&apos;, 1), (&apos;m&apos;, 1), (&apos;n&apos;, 1), (&apos;o&apos;, 1), (&apos;p&apos;, 1), (&apos;u&apos;, 1), (&apos;y&apos;, 1)]</span><br></pre></td></tr></table></figure><h4 id="repartition-amp-coalesce"><a href="#repartition-amp-coalesce" class="headerlink" title="repartition &amp; coalesce"></a>repartition &amp; coalesce</h4><p>对RDD的分区执行重新分区（仅数量）</p><p><font color="gold">注</font>：尽量避免使用，影响并行计算性能。在合并到1个分区进行全局排序等场景下使用，尽可能避免增加分区，可能破坏内存迭代的计算管道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># n：决定新的分区数量</span></span><br><span class="line"><span class="comment"># coalesce中增加分区必须指定shuffle=True</span></span><br><span class="line">rdd.repartition(n)</span><br><span class="line">rdd.coalesce(n, shuffle)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># repartition 修改分区</span></span><br><span class="line">print(rdd.repartition(<span class="number">1</span>).getNumPartitions())</span><br><span class="line"></span><br><span class="line">print(rdd.repartition(<span class="number">5</span>).getNumPartitions())</span><br><span class="line"></span><br><span class="line"><span class="comment"># coalesce 修改分区</span></span><br><span class="line">print(rdd.coalesce(<span class="number">1</span>).getNumPartitions())</span><br><span class="line"></span><br><span class="line">print(rdd.coalesce(<span class="number">5</span>, shuffle=<span class="literal">True</span>).getNumPartitions())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="Action算子"><a href="#Action算子" class="headerlink" title="Action算子"></a>Action算子</h3><h4 id="countByKey"><a href="#countByKey" class="headerlink" title="countByKey"></a>countByKey</h4><p>用于统计key出现的次数（一般适用于KV型RDD）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.countByKey()</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.textFile(<span class="string">"hdfs://master:8020/input/words.txt"</span>)</span><br><span class="line">rdd2 = rdd.flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">" "</span>)).map(<span class="keyword">lambda</span> x: (x, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过countByKey来对key进行计数, 这是一个Action算子</span></span><br><span class="line">result = rdd2.countByKey()</span><br><span class="line"></span><br><span class="line">print(result)</span><br><span class="line">print(type(result))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaultdict(&lt;class &apos;int&apos;&gt;, &#123;&apos;hadoop&apos;: 7, &apos;spark&apos;: 5, &apos;flink&apos;: 3&#125;)</span><br><span class="line">&lt;class &apos;collections.defaultdict&apos;&gt;</span><br></pre></td></tr></table></figure><h4 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h4><p>将RDD各个分区内的数据统一收集到Driver中，形成一个list对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.collect()</span><br></pre></td></tr></table></figure><p><font color="gold">注</font>：数据集大小不能超过Driver内存</p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>对RDD数据集按照func逻辑进行聚合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对func：传入2个参数得到1个返回值，要求返回值和参数的类型保持一致</span></span><br><span class="line">rdd.reduce(func)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">print(rdd.reduce(<span class="keyword">lambda</span> a, b: a + b))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h4 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h4><p>同reduce，接受传入逻辑进行聚合，但是聚合是带有初始值的。这个初始值的聚合作用在：</p><ul><li>分区内聚合</li><li>分区间聚合</li></ul><p>例如：[[1, 2, 3], [4, 5, 6], [7, 8, 9]]</p><p>数据分布在三个<strong>分区</strong>上</p><p><strong><font color="orange">分区1</font></strong>：123聚合时带上10作为初始值得到16</p><p><strong><font color="orange">分区2</font></strong>：456聚合时带上10作为初始值得到25</p><p><strong><font color="orange">分区3</font></strong>：789聚合时带上10作为初始值得到34</p><p>最后再做3个分区间的聚合：16+25+34得到85</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.fold(src, func)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(rdd.fold(<span class="number">10</span>, <span class="keyword">lambda</span> a, b: a + b))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">85</span><br></pre></td></tr></table></figure><h4 id="first·take·count·top"><a href="#first·take·count·top" class="headerlink" title="first·take·count·top"></a>first·take·count·top</h4><p><strong><font color="orange">first</font></strong></p><p>取出RDD的第一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;sc.parallelize([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]).first()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong><font color="orange">take</font></strong></p><p>取出RDD的前n个元素，组合成list返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).take(<span class="number">5</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p> <strong><font color="orange">count</font></strong></p><p>计算RDD有多少条数据，返回值是一个数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;sc.parallelize([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).count()</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong><font color="orange">top</font></strong></p><p>对RDD数据集进行降序排序，取结果前n个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;sc.parallelize([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]).top(<span class="number">3</span>)</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="takeSample"><a href="#takeSample" class="headerlink" title="takeSample"></a>takeSample</h4><p>随机抽样RDD数据，可用于数据检查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arg1：True表示运行取同一个数据，False表示不允许取同一个数据（和数据内容无关，是否重复表示的是同一个位置的数据）</span></span><br><span class="line"><span class="comment"># arg2：抽样数目</span></span><br><span class="line"><span class="comment"># arg3：可选，随机数种子，随意传进一个数字</span></span><br><span class="line">takeSample(arg1：<span class="literal">True</span>/<span class="literal">False</span>, arg2:采样数, arg3:随机数种子)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(rdd.takeSample(<span class="literal">False</span>, <span class="number">5</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 7, 6, 6, 3]</span><br></pre></td></tr></table></figure><h4 id="takeOrdered"><a href="#takeOrdered" class="headerlink" title="takeOrdered"></a>takeOrdered</h4><p>对RDD进行排序，取结果前n个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arg1：需要几个数据</span></span><br><span class="line"><span class="comment"># arg2：对排序的数据进行更改（不会更改数据本身，仅在排序时使用）</span></span><br><span class="line">rdd.takeOrdered(arg1, arg2)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(rdd.takeOrdered(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(rdd.takeOrdered(<span class="number">3</span>, <span class="keyword">lambda</span> x: -x))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3]</span><br><span class="line">[9, 7, 6]</span><br></pre></td></tr></table></figure><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>对RDD的每一个元素执行提供的逻辑操作（同map），无返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.foreach(func)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">result = rdd.foreach(<span class="keyword">lambda</span> x: print(x * <span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">30</span><br><span class="line">20</span><br><span class="line">40</span><br><span class="line">70</span><br><span class="line">90</span><br><span class="line">60</span><br></pre></td></tr></table></figure><p>特性：由Executor直接输出</p><h4 id="saveAsTextFile"><a href="#saveAsTextFile" class="headerlink" title="saveAsTextFile"></a>saveAsTextFile</h4><p>将RDD数据写入文本文件</p><p>支持：本地写出或hdfs等文件系统</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.saveAsTextFile()</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>], <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">rdd.saveAsTextFile(<span class="string">"hdfs://master:8020/output/out_test1"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -ls /output/out_test1</span><br><span class="line">hadoop fs -cat /output/out_test1/*</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Found 4 items</span><br><span class="line">-rw-r--r--   3 root supergroup          0 2022-12-06 17:44 /output/out_test1/_SUCCESS</span><br><span class="line">-rw-r--r--   3 root supergroup          4 2022-12-06 17:44 /output/out_test1/part-00000</span><br><span class="line">-rw-r--r--   3 root supergroup          4 2022-12-06 17:44 /output/out_test1/part-00001</span><br><span class="line">-rw-r--r--   3 root supergroup          6 2022-12-06 17:44 /output/out_test1/part-00002</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">9</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>特性：由Executor直接写入文件</p><h4 id="mapPartitions"><a href="#mapPartitions" class="headerlink" title="mapPartitions"></a>mapPartitions</h4><p>不同于map每次操作一个分区的单一对象，mapPartitions一次操作一整个分区的数据，作为一个迭代器对象传入进来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.mapPartitions(func)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>], <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(iter)</span>:</span></span><br><span class="line">    result = list()</span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iter:</span><br><span class="line">        result.append(it * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">print(rdd.mapPartitions(process).collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[10, 20, 70]</span><br></pre></td></tr></table></figure><h4 id="foreachPartition"><a href="#foreachPartition" class="headerlink" title="foreachPartition"></a>foreachPartition</h4><p>和foreach一致，foreach一条条处理，而foreachPartition一次处理一整个分区的数据，类似于没有返回值的mapPartitions</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.foreachPartition(func)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">6</span>], <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(iter)</span>:</span></span><br><span class="line">    result = list()</span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iter:</span><br><span class="line">        result.append(it * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rdd.foreachPartition(process)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[20]</span><br><span class="line">[20, 40]</span><br><span class="line">[10]</span><br><span class="line">[10, 30]</span><br><span class="line">[70]</span><br><span class="line">[70, 90]</span><br><span class="line">[70, 90, 60]</span><br></pre></td></tr></table></figure><h4 id="partitionBy"><a href="#partitionBy" class="headerlink" title="partitionBy"></a>partitionBy</h4><p>对RDD进行自定义分区操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arg1：重新分区后的分区数量</span></span><br><span class="line"><span class="comment"># arg2：自定义分区规则，通过函数传入，函数返回值必须位int型（分区编号从0开始，不得超过分区数-1）</span></span><br><span class="line">rdd.partitionBy(arg1, arg2)</span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([(<span class="string">'hadoop'</span>, <span class="number">1</span>), (<span class="string">'spark'</span>, <span class="number">1</span>), (<span class="string">'hello'</span>, <span class="number">1</span>), (<span class="string">'flink'</span>, <span class="number">1</span>), (<span class="string">'hadoop'</span>, <span class="number">1</span>), (<span class="string">'spark'</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用partitionBy 自定义 分区</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(k)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'hadoop'</span> == k <span class="keyword">or</span> <span class="string">'hello'</span> == k: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'spark'</span> == k: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(rdd.partitionBy(<span class="number">3</span>, process).glom().collect())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[(&apos;hadoop&apos;, 1), (&apos;hello&apos;, 1), (&apos;hadoop&apos;, 1)], [(&apos;spark&apos;, 1), (&apos;spark&apos;, 1)], [(&apos;flink&apos;, 1)]]</span><br></pre></td></tr></table></figure><h2 id="RDD的数据是过程数据"><a href="#RDD的数据是过程数据" class="headerlink" title="RDD的数据是过程数据"></a>RDD的数据是过程数据</h2><p>RDD之间进行相互迭代计算（Transformation的转换），当执行开启以后，新RDD生成，旧RDD消失。所以RDD的数据是过程数据，仅在处理的过程中存在，一旦处理完成便会被释放，旨在最大化的合理利用系统资源</p><p>当RDD被释放后需要被重新使用，会从头开始执行</p><h3 id="RDD缓存"><a href="#RDD缓存" class="headerlink" title="RDD缓存"></a>RDD缓存</h3><p>防止当RDD被释放而又要被重新调用的情况下，避免从头执行代码，使用RDD缓存API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rdd.cache()                                  <span class="comment"># 缓存到内存中</span></span><br><span class="line">rdd.persist(StorageLevel.MEMORY_ONLY)        <span class="comment"># 仅在内存缓存</span></span><br><span class="line">rdd.persist(StorageLevel.MEMORY_ONLY_2)      <span class="comment"># 仅在内存缓存，生成2个副本</span></span><br><span class="line">rdd.persist(StorageLevel.DISK_ONLY)          <span class="comment"># 仅缓存到硬盘</span></span><br><span class="line">rdd.persist(StorageLevel.DISK_ONLY_2)        <span class="comment"># 仅缓存到硬盘，生成2个副本</span></span><br><span class="line">rdd.persist(StorageLevel.DISK_ONLY_3)        <span class="comment"># 仅缓存到硬盘，生成3个副本</span></span><br><span class="line">rdd.persist(StorageLevel.MEMORY_AND_DISK)    <span class="comment"># 先在内存缓存，内存不够缓存到硬盘</span></span><br><span class="line">rdd.persist(StorageLevel.MEMORY_AND_DISK_2)  <span class="comment"># 先在内存缓存，内存不够缓存到硬盘，生成2个副本</span></span><br><span class="line">rdd.persist(StorageLevel.OFF_HEAP)           <span class="comment"># 堆外内存</span></span><br><span class="line">rdd.unpersist()                              <span class="comment"># 主动清理缓存</span></span><br></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">from</span> pyspark.storagelevel <span class="keyword">import</span> StorageLevel</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd1 = sc.textFile(<span class="string">"hdfs://master:8020/input/words.txt"</span>)</span><br><span class="line">rdd2 = rdd1.flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">" "</span>))</span><br><span class="line">rdd3 = rdd2.map(<span class="keyword">lambda</span> x: (x, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">rdd3.cache()</span><br><span class="line">rdd3.persist(StorageLevel.MEMORY_AND_DISK_2)</span><br><span class="line"></span><br><span class="line">rdd4 = rdd3.reduceByKey(<span class="keyword">lambda</span> a, b: a + b)</span><br><span class="line">print(rdd4.collect())</span><br><span class="line"></span><br><span class="line">rdd5 = rdd3.groupByKey()</span><br><span class="line">rdd6 = rdd5.mapValues(<span class="keyword">lambda</span> x: sum(x))</span><br><span class="line">print(rdd6.collect())</span><br><span class="line"></span><br><span class="line">rdd3.unpersist()</span><br><span class="line">time.sleep(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;hadoop&apos;, 1), (&apos;hello&apos;, 3), (&apos;spark&apos;, 1), (&apos;flink&apos;, 1)]</span><br><span class="line">[(&apos;hadoop&apos;, 1), (&apos;hello&apos;, 3), (&apos;spark&apos;, 1), (&apos;flink&apos;, 1)]</span><br></pre></td></tr></table></figure><p><font color="gold">注</font>：缓存分散存储在各Executor所在服务器中。缓存从设计上来说是不安全的，缓存一旦丢失，需要重新计算缓存，必须保留被缓存RDD的前置血缘关系</p><h3 id="RDD-CheckPoint"><a href="#RDD-CheckPoint" class="headerlink" title="RDD CheckPoint"></a>RDD CheckPoint</h3><p>用于保存RDD数据，仅支持硬盘存储，且可以写入HDFS（cache不行），从设计上来说是安全的，不保留RDD的前置血缘关系</p><p>ChickPoint集中收集各个分区的数据进行存储，而非cache的分散存储</p><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">from</span> pyspark.storagelevel <span class="keyword">import</span> StorageLevel</span><br><span class="line"></span><br><span class="line">conf = SparkConf().setAppName(<span class="string">"test"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 告知spark, 开启CheckPoint功能</span></span><br><span class="line">sc.setCheckpointDir(<span class="string">"hdfs://master:8020/output/ckp"</span>)</span><br><span class="line">rdd1 = sc.textFile(<span class="string">"hdfs://master:8020/input/words.txt"</span>)</span><br><span class="line">rdd2 = rdd1.flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">" "</span>))</span><br><span class="line">rdd3 = rdd2.map(<span class="keyword">lambda</span> x: (x, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用checkpoint API 保存数据即可</span></span><br><span class="line">rdd3.checkpoint()</span><br><span class="line"></span><br><span class="line">rdd4 = rdd3.reduceByKey(<span class="keyword">lambda</span> a, b: a + b)</span><br><span class="line">print(rdd4.collect())</span><br><span class="line"></span><br><span class="line">rdd5 = rdd3.groupByKey()</span><br><span class="line">rdd6 = rdd5.mapValues(<span class="keyword">lambda</span> x: sum(x))</span><br><span class="line">print(rdd6.collect())</span><br><span class="line"></span><br><span class="line">rdd3.unpersist()</span><br><span class="line">time.sleep(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;hadoop&apos;, 1), (&apos;hello&apos;, 3), (&apos;spark&apos;, 1), (&apos;flink&apos;, 1)]</span><br><span class="line">[(&apos;hadoop&apos;, 1), (&apos;hello&apos;, 3), (&apos;spark&apos;, 1), (&apos;flink&apos;, 1)]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;RDD&quot;&gt;&lt;a href=&quot;#RDD&quot; class=&quot;headerlink&quot; title=&quot;RDD&quot;&gt;&lt;/a&gt;RDD&lt;/h2&gt;&lt;p&gt;RDD（Resilient Distributed Dataset）弹性分布式数据集，是spark中最基本的数据抽象，代表一个不可变、可分区、其中元素可并行计算的集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resilient：RDD中的数据可存储再内存或磁盘中&lt;/li&gt;
&lt;li&gt;Distributed：分布式存储数据（跨机器/跨进程），用于分布式计算&lt;/li&gt;
&lt;li&gt;Dataset：一个用于存放数据的数据集合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;h4 id=&quot;分区&quot;&gt;&lt;a href=&quot;#分区&quot; class=&quot;headerlink&quot; title=&quot;分区&quot;&gt;&lt;/a&gt;分区&lt;/h4&gt;&lt;p&gt;RDD分区是RDD数据存储的最小单位，一份RDD数据本质上分隔成了多个分区&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 存储9个数字，设立三个分区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdd = sc.parallelize([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdd.glom().collect()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[1,2,3],[4,5,6],[7,8,9]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;RDD方法会作用在其所有方法上&quot;&gt;&lt;a href=&quot;#RDD方法会作用在其所有方法上&quot; class=&quot;headerlink&quot; title=&quot;RDD方法会作用在其所有方法上&quot;&gt;&lt;/a&gt;RDD方法会作用在其所有方法上&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rdd.map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;).collect()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[10,20,30,40,50,60,70,80,90]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;RDD之间具有依赖关系&quot;&gt;&lt;a href=&quot;#RDD之间具有依赖关系&quot; class=&quot;headerlink&quot; title=&quot;RDD之间具有依赖关系&quot;&gt;&lt;/a&gt;RDD之间具有依赖关系&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sc = SparkContext(conf=conf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdd1 = sc.textFile(&lt;span class=&quot;string&quot;&gt;&quot;../test.text&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdd2 = rdd1.flatMap(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x.split(&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdd3 = rdd2.map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: (x, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdd4 = rdd3.reduceByKey(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; a, b: a+b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(rdd4.collect())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Key-Value型RDD可以有分区器&quot;&gt;&lt;a href=&quot;#Key-Value型RDD可以有分区器&quot; class=&quot;headerlink&quot; title=&quot;Key-Value型RDD可以有分区器&quot;&gt;&lt;/a&gt;Key-Value型RDD可以有分区器&lt;/h4&gt;&lt;p&gt;KV型RDD：RDD内存储的数据是只有两个元素的二元元组&lt;/p&gt;
&lt;p&gt;默认分区器：Hash分区规则，也可手动设置分区器：rdd.partitionBy()方法&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;注&lt;/font&gt;：不是所有RDD都是KV型&lt;/p&gt;
&lt;h4 id=&quot;RDD的分区规划：会尽量靠近数据所在的服务器&quot;&gt;&lt;a href=&quot;#RDD的分区规划：会尽量靠近数据所在的服务器&quot; class=&quot;headerlink&quot; title=&quot;RDD的分区规划：会尽量靠近数据所在的服务器&quot;&gt;&lt;/a&gt;RDD的分区规划：会尽量靠近数据所在的服务器&lt;/h4&gt;&lt;p&gt;在初始RDD读取数据规划阶段，分区会尽量规划到存储数据所在服务器，直接读取本地数据，避免从网络读取数据&lt;/p&gt;
&lt;p&gt;Spark会在确保并行计算能力的前提下，尽量确保本地读取&lt;/p&gt;
&lt;h3 id=&quot;RDD创建&quot;&gt;&lt;a href=&quot;#RDD创建&quot; class=&quot;headerlink&quot; title=&quot;RDD创建&quot;&gt;&lt;/a&gt;RDD创建&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通过并行化集合创建（本地对象转化为分布式RDD）&lt;/li&gt;
&lt;li&gt;读取外部数据源（读文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;并行化创建&quot;&gt;&lt;a href=&quot;#并行化创建&quot; class=&quot;headerlink&quot; title=&quot;并行化创建&quot;&gt;&lt;/a&gt;并行化创建&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# arg1: 集合对象，如：list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# arg2：可选，指定分区数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rdd = SparkContext.parallelize(arg1, arg2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;读取文件&quot;&gt;&lt;a href=&quot;#读取文件&quot; class=&quot;headerlink&quot; title=&quot;读取文件&quot;&gt;&lt;/a&gt;读取文件&lt;/h4&gt;&lt;p&gt;通过textFile API来读取本地或者hdfs的数据&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# arg1: 文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# arg2：可选，最小分区数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 当arg2超出spark允许范围，参数失效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SparkContext.textFile(arg1, arg2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过wholeTextFile API来读取小文件，这个api偏向于少量分区读取数据，是pyspark基于小文件的优化&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# arg1：文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# arg2：可选，最小分区数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 当arg2超出spark允许范围，参数失效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SparkContext.wholeTextFiles(arg1, arg2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
    <category term="pyspark" scheme="http://yoursite.com/tags/pyspark/"/>
    
  </entry>
  
  <entry>
    <title>Pyspark</title>
    <link href="http://yoursite.com/2022/12/05/Pyspark/"/>
    <id>http://yoursite.com/2022/12/05/Pyspark/</id>
    <published>2022-12-05T08:45:40.000Z</published>
    <updated>2022-12-07T05:47:29.586Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Pyspark库安装"><a href="#Pyspark库安装" class="headerlink" title="Pyspark库安装"></a>Pyspark库安装</h2><p>（本文基于上文spark基础）</p><h3 id="Python库安装"><a href="#Python库安装" class="headerlink" title="Python库安装"></a>Python库安装</h3><p>在三台机器分别安装pyspark</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate pyspark</span><br><span class="line">pip install pyspark -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><h3 id="Windows补丁"><a href="#Windows补丁" class="headerlink" title="Windows补丁"></a>Windows补丁</h3><p>将hadoop.dll置于C:/windows/system32/目录下，然后配置hadoop工具包的环境变量</p><p><img src="/2022/12/05/Pyspark/A.png" alt></p><p>安装相关python库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyspark pyhive pymysql jieba -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure><h3 id="为pycharm添加ssh解释器环境"><a href="#为pycharm添加ssh解释器环境" class="headerlink" title="为pycharm添加ssh解释器环境"></a>为pycharm添加ssh解释器环境</h3><p><img src="/2022/12/05/Pyspark/B.png" alt></p><p><img src="/2022/12/05/Pyspark/C.png" alt></p><p><img src="/2022/12/05/Pyspark/D.png" alt></p><a id="more"></a><h2 id="SparkContext对象"><a href="#SparkContext对象" class="headerlink" title="SparkContext对象"></a>SparkContext对象</h2><p>Spark Application程序的入口为SparkContext。任何一个spark应用都要先构建SparkContext对象：</p><ul><li>创建SparkConf对象</li><li>基于SparkConf创建SparkContext</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conf = SparkConf().setAppName(appName).setMaster(master)</span><br><span class="line">sc = SparkContext(conf=conf)</span><br></pre></td></tr></table></figure><h2 id="WorldCount测试程序"><a href="#WorldCount测试程序" class="headerlink" title="WorldCount测试程序"></a>WorldCount测试程序</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在pycharm中新建python脚本，通过解释器执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="comment"># 提交到yarn集群执行时，需配置环境变量</span></span><br><span class="line"><span class="comment"># import os</span></span><br><span class="line"><span class="comment"># os.environ["HADOOP_CONF_DIR"] = "/usr/local/hadoop/etc/hadoop"</span></span><br><span class="line"><span class="comment"># os.environ["YARN_CONF_DIR"] = "/usr/local/hadoop/etc/hadoop"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 通过脚本执行时无需在代码中指定Master</span></span><br><span class="line">    <span class="comment"># conf = SparkConf().setAppName("WordCountHelloWorld")</span></span><br><span class="line">    <span class="comment"># 直接在pycharm执行</span></span><br><span class="line">    conf = SparkConf().setAppName(<span class="string">"WordCountHelloWorld"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">    <span class="comment"># 通过SparkConf对象构建SparkContext对象</span></span><br><span class="line">    sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需求 : wordcount单词计数, 读取HDFS上的words.txt文件, 对其内部的单词统计出现 的数量</span></span><br><span class="line">    <span class="comment"># 读取hdfs文件</span></span><br><span class="line">    file_rdd = sc.textFile(<span class="string">"hdfs://master:8020/input/words.txt"</span>)</span><br><span class="line">    <span class="comment"># 读取本地文件</span></span><br><span class="line">    <span class="comment"># file_rdd = sc.textFile("/usr/local/words.txt")</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将单词进行切割, 得到一个存储全部单词的集合对象</span></span><br><span class="line">    words_rdd = file_rdd.flatMap(<span class="keyword">lambda</span> line: line.split(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将单词转换为元组对象, key是单词, value是数字1</span></span><br><span class="line">    words_with_one_rdd = words_rdd.map(<span class="keyword">lambda</span> x: (x, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将元组的value 按照key来分组, 对所有的value执行聚合操作(相加)</span></span><br><span class="line">    result_rdd = words_with_one_rdd.reduceByKey(<span class="keyword">lambda</span> a, b: a + b)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过collect方法收集RDD的数据打印输出结果</span></span><br><span class="line">    print(result_rdd.collect())</span><br></pre></td></tr></table></figure><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><p>在根目录创建一份py脚本，通过spark客户端执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/spark/bin/spark-submit --master local[*] /root/helloworld.py</span><br><span class="line">/usr/local/spark/bin/spark-submit --master yarn /root/helloworld.py</span><br></pre></td></tr></table></figure><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>构建SparkContext对象等非任务处理由Driver执行，RDD数据任务处理由Executor执行，再由Driver处理分布式计算结果</p><h3 id="Master-Node"><a href="#Master-Node" class="headerlink" title="Master Node"></a>Master Node</h3><p>spark自身的JVM框架JVM Driver和JVM Executor之间可以相互通讯，Python通过构建SparkContext对象与JVM Driver进行连接（Python的Driver代码翻译成JVM代码-py4j库，变成JVM Driver）</p><h3 id="Worker-Node"><a href="#Worker-Node" class="headerlink" title="Worker Node"></a>Worker Node</h3><p>Driver的操作指令发送给JVM Executor（RPC），JVM Executor再通过pyspark守护进程将指令发送给pyspark守护进程，pyspark守护进程将指令调度到运行的python进程中去。Executor端本质上是由python进程再工作</p><p>Driver段是直接由py4j直接翻译过去，Executor端则是转发</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Pyspark库安装&quot;&gt;&lt;a href=&quot;#Pyspark库安装&quot; class=&quot;headerlink&quot; title=&quot;Pyspark库安装&quot;&gt;&lt;/a&gt;Pyspark库安装&lt;/h2&gt;&lt;p&gt;（本文基于上文spark基础）&lt;/p&gt;
&lt;h3 id=&quot;Python库安装&quot;&gt;&lt;a href=&quot;#Python库安装&quot; class=&quot;headerlink&quot; title=&quot;Python库安装&quot;&gt;&lt;/a&gt;Python库安装&lt;/h3&gt;&lt;p&gt;在三台机器分别安装pyspark&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conda activate pyspark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install pyspark -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Windows补丁&quot;&gt;&lt;a href=&quot;#Windows补丁&quot; class=&quot;headerlink&quot; title=&quot;Windows补丁&quot;&gt;&lt;/a&gt;Windows补丁&lt;/h3&gt;&lt;p&gt;将hadoop.dll置于C:/windows/system32/目录下，然后配置hadoop工具包的环境变量&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/12/05/Pyspark/A.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;安装相关python库&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install pyspark pyhive pymysql jieba -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;为pycharm添加ssh解释器环境&quot;&gt;&lt;a href=&quot;#为pycharm添加ssh解释器环境&quot; class=&quot;headerlink&quot; title=&quot;为pycharm添加ssh解释器环境&quot;&gt;&lt;/a&gt;为pycharm添加ssh解释器环境&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2022/12/05/Pyspark/B.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/12/05/Pyspark/C.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/12/05/Pyspark/D.png&quot; alt&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
    <category term="pyspark" scheme="http://yoursite.com/tags/pyspark/"/>
    
  </entry>
  
  <entry>
    <title>Spark基础</title>
    <link href="http://yoursite.com/2022/12/01/Spark%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2022/12/01/Spark%E5%9F%BA%E7%A1%80/</id>
    <published>2022-12-01T07:40:17.000Z</published>
    <updated>2022-12-05T08:48:33.271Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><font color="gold">定义</font>：<font color="gold">Apache Spark是用于大规模数据处理的统一分析引擎。</font>其核心数据结构：弹性分布式数据集（RDD）能够在大规模集群中做内存运算，且具有一定容错方式。</p><h2 id="Spark框架"><a href="#Spark框架" class="headerlink" title="Spark框架"></a>Spark框架</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p><font color="orange"><strong>· Spark Core</strong></font>：以RDD为数据抽象，提供Python、Java、Scala、R语言的API和Spark的核心功能，是Spark运行的基础；</p><p><font color="orange"><strong>· SparkSQL</strong></font>：基于SparkCore，提供机构化数据处理模块，支持以SQL语言对数据进行处理；同时可以作为StructuredStreaming模块的基础，进行数据流式计算；</p><p><font color="orange"><strong>· SparkStreaming</strong></font>：基于SparkCore，提供数据流式计算；</p><p><font color="orange"><strong>· MLlib</strong></font>：基于SparkCore，内置大量机器学习库和算法API，进行机器学习计算；</p><p><font color="orange"><strong>· GraphX</strong></font>：基于SparkCore，提供了大量图计算API，用于分布式图计算</p><h3 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h3><p><strong>· 本地模式（单机/local）</strong>：以一个独立进程，通过内部的多线程模拟Spark运行环境</p><p><strong>· Standalone模式（集群）</strong>：Spark的各个角色以独立进程形式存在，组成集群环境</p><p><strong>· Hadoop YARN模式（集群）</strong>：Spark的各个角色运行在YARN容器内部，组成集群环境</p><p><strong>· Kubernetes模式（容器集群）</strong>：Spark的各个角色运行在Kubernetes容器内部，组成集群环境</p><p><strong>· 云服务模式</strong></p><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><ul><li><strong>资源</strong></li></ul><p><strong>· Master角色</strong>：集群资源管理</p><p><strong>· Worker角色</strong>：单机资源管理(所在服务器资源管理)</p><ul><li><strong>任务</strong></li></ul><p><strong>· Driver角色</strong>：单个任务管理</p><p><strong>· Executor角色</strong>：单个任务计算</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Hadoop伪分布式搭建"><a href="#Hadoop伪分布式搭建" class="headerlink" title="Hadoop伪分布式搭建"></a>Hadoop伪分布式搭建</h3><h4 id="准备master虚拟机"><a href="#准备master虚拟机" class="headerlink" title="准备master虚拟机"></a>准备master虚拟机</h4><ul><li>配置静态ip</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#修改</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line"></span><br><span class="line"># 新增</span><br><span class="line">IPADDR=&quot;192.168.80.129&quot;</span><br><span class="line">GATEWAY=&quot;192.168.80.2&quot;</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">DNS1=&quot;8.8.8.8&quot;</span><br><span class="line">DNS2=&quot;114.114.114.114&quot;</span><br><span class="line">IPV6_PRIVACY=&quot;no&quot;</span><br></pre></td></tr></table></figure><ul><li>重启网卡服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><ul><li>关闭防火墙，并禁止防火墙开机自启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><ul><li>关闭selinux</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX=disabled</span><br><span class="line"># SELINUXTYPE= can take one of three values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     minimum - Modification of targeted policy. Only selected processes are protected. </span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure><ul><li>重启master</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>重启完成后将相关软件包（jdk、hadoop、spark等）导入至/usr/local目录下并解压</p><ul><li>解压jdk</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u211-linux-x64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><p>配置jdk环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#set java environment </span><br><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_211</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib </span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH </span><br><span class="line">export JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure><p>重启环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>检查安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version &quot;1.8.0_211&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_211-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)</span><br></pre></td></tr></table></figure><h4 id="配置linux集群"><a href="#配置linux集群" class="headerlink" title="配置linux集群"></a>配置linux集群</h4><p>将master完整克隆两台node1、node2机器，配置静态ip</p><p>配置主机名，分别执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><p>将三台机器的主机名设置为master、node1、node2</p><p>配置三台虚拟机的域名映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">192.168.80.129 master</span><br><span class="line">192.168.80.130 node1</span><br><span class="line">192.168.80.131 node2</span><br></pre></td></tr></table></figure><p>此时三台机器已经可以互相ping通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ping master</span><br><span class="line">ping node1</span><br><span class="line">ping node2</span><br></pre></td></tr></table></figure><p>分别重启三台机器</p><p>生成三台机器的公钥和私钥，分别执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>反复回车，在/root/.ssh隐藏目录下生成私钥id_rsa和公钥id_rsa.pub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Created directory &apos;/root/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:/Vd3sEsHhz3CcxGwbRp5lj6+srZ7OpwAvyKS+qoTi9Q root@master</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|             ..o.|</span><br><span class="line">|            . +oo|</span><br><span class="line">|             B+Oo|</span><br><span class="line">|         o    @=.|</span><br><span class="line">|  .     S +  .oo=|</span><br><span class="line">| o E       + ..++|</span><br><span class="line">|o o   .     = +. |</span><br><span class="line">|.o   o . . . B ..|</span><br><span class="line">| .oo+.. . . .=O. |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>在三台虚拟机执行命令将公钥拷贝到master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;master (192.168.80.129)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:9UGNQgh5SWXh/1Z9iWTOzBSbqXf8kjbxc5SC73j9ct4.</span><br><span class="line">ECDSA key fingerprint is MD5:ee:b1:5d:3c:a5:2b:2e:08:cd:85:44:68:fe:c7:29:d9.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@master&apos;s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh &apos;master&apos;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p>将master的公钥拷贝到node上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /root/.ssh/authorized_keys node1:/root/.ssh</span><br><span class="line">scp /root/.ssh/authorized_keys node2:/root/.ssh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;node1 (192.168.80.130)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:9UGNQgh5SWXh/1Z9iWTOzBSbqXf8kjbxc5SC73j9ct4.</span><br><span class="line">ECDSA key fingerprint is MD5:ee:b1:5d:3c:a5:2b:2e:08:cd:85:44:68:fe:c7:29:d9.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;node1,192.168.80.130&apos; (ECDSA) to the list of known hosts.</span><br><span class="line">root@node1&apos;s password: </span><br><span class="line">authorized_keys                                      100% 1177     1.2MB/s   00:00</span><br></pre></td></tr></table></figure><p>测试ssh免密登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh node1</span><br><span class="line">ssh node2</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h4 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h4><p>解压安装包并重命名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-3.3.1.tar.gz -C /usr/local</span><br><span class="line">mv hadoop-3.3.1 hadoop</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/hadoop/etc/hadoop</span><br></pre></td></tr></table></figure><p>hadoop-env.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hadoop-env.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_211</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure><p>core-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置默认使用的文件系统 Hadoop支持file、HDFS、GFS、ali|Amazon云等文件系统 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置Hadoop本地保存数据路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/data/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置HDFS web UI用户身份 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 整合hive 用户代理设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hdfs-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置SNN进程运行机器位置信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mapred-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置MR程序默认运行模式： yarn集群模式 local本地模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MR程序历史服务器端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yarn-site.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置YARN集群主角色运行机器位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否将对容器实施物理内存限制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否将对容器实施虚拟内存限制。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启日志聚集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置yarn历史服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://master:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 保存的时间7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>workers</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim workers</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">node1</span><br><span class="line">node2</span><br></pre></td></tr></table></figure><p>将安装包分发至其他机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">scp -r hadoop root@node1:/usr/local</span><br><span class="line">scp -r hadoop root@node2:/usr/local</span><br></pre></td></tr></table></figure><p>配置hadoop环境变量，分发至其他机器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># set hadoop env</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/profile node1:/etc/</span><br><span class="line">scp /etc/profile node2:/etc/</span><br></pre></td></tr></table></figure><p>在三台机器分别重启环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>首次启动，先格式化namenode</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin hdfs namenode -format</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br><span class="line">mapred --daemon start historyserver</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-all.sh</span><br><span class="line">mapred --daemon start historyserver</span><br></pre></td></tr></table></figure><p>查看任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">61488 Jps</span><br><span class="line">60417 NameNode</span><br><span class="line">60597 DataNode</span><br><span class="line">60981 ResourceManager</span><br><span class="line">61133 NodeManager</span><br><span class="line">61567 JobHistoryServer</span><br></pre></td></tr></table></figure><p>查看web页面（hadoop3.0版本以后web端口跟改为9870）</p><p><code>master:9870</code></p><p><img src="/2022/12/01/Spark基础/A.png" alt></p><p>关闭任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop-dfs.sh</span><br><span class="line">stop-yarn.sh</span><br><span class="line">mapred --daemon stop historyserver</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop-all.sh</span><br><span class="line">mapred --daemon stop historyserver</span><br></pre></td></tr></table></figure><h3 id="Anaconda3安装"><a href="#Anaconda3安装" class="headerlink" title="Anaconda3安装"></a>Anaconda3安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ./Anaconda3-2021.05-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>配置清华源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.condarc</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure><p>创建pyspark虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n pyspark python=3.8</span><br></pre></td></tr></table></figure><h3 id="Spark-local模式搭建"><a href="#Spark-local模式搭建" class="headerlink" title="Spark local模式搭建"></a>Spark local模式搭建</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>解压spark安装包并重命名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf spark-3.2.0-bin-hadoop3.2.tgz -C /usr/local</span><br><span class="line">mv spark-3.2.0-bin-hadoop3.2 spark</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_HOME=/usr/local/spark</span><br><span class="line">export PYSPARK_PYTHON=/usr/local/anaconda3/envs/pyspark/bin/python3.8</span><br><span class="line">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span><br></pre></td></tr></table></figure><p><font color="gold">注</font>：查找pyspark虚拟环境位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/anaconda3/envs/pyspark/bin</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_211</span><br><span class="line">export PYSPARK_PYTHON=/usr/local/anaconda3/envs/pyspark/bin/python3.8</span><br></pre></td></tr></table></figure><h4 id="启动pyspark交互式解释器"><a href="#启动pyspark交互式解释器" class="headerlink" title="启动pyspark交互式解释器"></a>启动pyspark交互式解释器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/pyspark</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Python 3.8.8 (default, Apr 13 2021, 19:58:26) </span><br><span class="line">[GCC 7.3.0] :: Anaconda, Inc. on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">Using Spark&apos;s default log4j profile: org/apache/spark/log4j-defaults.properties</span><br><span class="line">Setting default log level to &quot;WARN&quot;.</span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><br><span class="line">22/12/02 17:38:56 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &apos;_/</span><br><span class="line">   /__ / .__/\_,_/_/ /_/\_\   version 3.2.0</span><br><span class="line">      /_/</span><br><span class="line"></span><br><span class="line">Using Python version 3.8.8 (default, Apr 13 2021 19:58:26)</span><br><span class="line">Spark context Web UI available at http://master:4040</span><br><span class="line">Spark context available as &apos;sc&apos; (master = local[*], app id = local-1669973937905).</span><br><span class="line">SparkSession available as &apos;spark&apos;.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>进入浏览器任务页面<code>master:4040</code>，可以查看信息</p><p><img src="/2022/12/01/Spark基础/B.png" alt></p><p>执行一条pyspark指令后：</p><p><img src="/2022/12/01/Spark基础/C.png" alt></p><h3 id="Spark-StandAlone模式搭建"><a href="#Spark-StandAlone模式搭建" class="headerlink" title="Spark StandAlone模式搭建"></a>Spark StandAlone模式搭建</h3><h4 id="StandAlone"><a href="#StandAlone" class="headerlink" title="StandAlone"></a>StandAlone</h4><p>StandAlone模式是Spark自带的集群模式，Master角色以Master进程形式存在，Worker角色以Worker进程形式存在。其中Driver角色运行在Master进程内，Executor角色运行在Worker进程内。此外，还可以开启第三个进程：历史服务器（HistoryServer），用于保存Spark app运行后的事件日志。</p><h4 id="环境分发"><a href="#环境分发" class="headerlink" title="环境分发"></a>环境分发</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp Anaconda3-2021.05-Linux-x86_64.sh node1:`pwd`/</span><br><span class="line">scp Anaconda3-2021.05-Linux-x86_64.sh node2:`pwd`/</span><br></pre></td></tr></table></figure><p>进入node1、node2安装anaconda，同master：配置conda源，创建虚拟环境</p><p>将master:/etc/profile和bashrc中的环境变量复制到node1、2中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/profile node1:/etc/profile</span><br><span class="line">scp /etc/profile node2:/etc/profile</span><br><span class="line">scp ~/.bashrc node1:~/</span><br><span class="line">scp ~/.bashrc node2:~/</span><br></pre></td></tr></table></figure><h4 id="创建hadoop用户（仅有root用户可跳过）"><a href="#创建hadoop用户（仅有root用户可跳过）" class="headerlink" title="创建hadoop用户（仅有root用户可跳过）"></a>创建hadoop用户（仅有root用户可跳过）</h4><p>hadoop用户拥有yarn的最高权限</p><p>新建用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser hadoop</span><br><span class="line">passwd hadoop</span><br></pre></td></tr></table></figure><p>添加用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G hadoop hadoop</span><br></pre></td></tr></table></figure><p>赋予root权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere </span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">hadoop    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>添加权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">chown -R hadoop:hadoop hadoop*</span><br><span class="line">chown -R hadoop:hadoop spark*</span><br></pre></td></tr></table></figure><h4 id="配置spark配置文件"><a href="#配置spark配置文件" class="headerlink" title="配置spark配置文件"></a>配置spark配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su - hadoop</span><br><span class="line">cd /usr/local/spark/conf</span><br><span class="line">mv workers.template workers</span><br><span class="line">vim workers</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">node1</span><br><span class="line">node2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv spark-env.sh.template spark-env.sh</span><br><span class="line">vim spark-env.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span># 设置JAVA安装目录</span><br><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_211</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</span><br><span class="line">HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop</span><br><span class="line">YARN_CONF_DIR=/usr/local/hadoop/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 指定spark master的IP和提交任务的通信端口</span><br><span class="line"><span class="meta">#</span> 告知spark的master运行在哪个机器上</span><br><span class="line">export SPARK_MASTER_HOST=master</span><br><span class="line"><span class="meta">#</span> 告知sparkmaster的通讯端口</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line"><span class="meta">#</span> 告知spark master的 webui端口</span><br><span class="line">SPARK_MASTER_WEBUI_PORT=8080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> worker cpu可用核数</span><br><span class="line">SPARK_WORKER_CORES=1</span><br><span class="line"><span class="meta">#</span> worker可用内存</span><br><span class="line">SPARK_WORKER_MEMORY=1g</span><br><span class="line"><span class="meta">#</span> worker的工作通讯地址</span><br><span class="line">SPARK_WORKER_PORT=7078</span><br><span class="line"><span class="meta">#</span> worker的 webui地址</span><br><span class="line">SPARK_WORKER_WEBUI_PORT=8081</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 设置历史服务器</span><br><span class="line"><span class="meta">#</span> 配置的意思是  将spark程序运行的历史日志 存到hdfs的/sparklog文件夹中</span><br><span class="line">SPARK_HISTORY_OPTS="-Dspark.history.fs.logDirectory=hdfs://master:8020/sparklog/ -Dspark.history.fs.cleaner.enabled=true"</span><br></pre></td></tr></table></figure><p>启动hadoop</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -ls /</span><br></pre></td></tr></table></figure><p>此时没有sparklog文件。创建sparklog文件,赋予权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir /sparklog</span><br><span class="line">hadoop fs -chmod 777 /sparklog</span><br></pre></td></tr></table></figure><p>继续配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv spark-defaults.conf.template spark-defaults.conf</span><br><span class="line">vim spark-defaults.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开启spark的日期记录功能</span><br><span class="line">spark.eventLog.enabled true</span><br><span class="line"># 设置spark日志记录的路径</span><br><span class="line">spark.eventLog.dir hdfs://master:8020/sparklog/ </span><br><span class="line"># 设置spark日志是否启动压缩</span><br><span class="line">spark.eventLog.compress true</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv log4j.properties.template log4j.properties</span><br><span class="line">vim log4j.properties</span><br></pre></td></tr></table></figure><p>将INFO改为WARN，减少冗余日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Set everything to be logged to the console</span><br><span class="line">log4j.rootCategory=WARN, console</span><br></pre></td></tr></table></figure><h4 id="分发spark配置文件"><a href="#分发spark配置文件" class="headerlink" title="分发spark配置文件"></a>分发spark配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">scp -r spark node1:`pwd`/</span><br><span class="line">scp -r spark node2:`pwd`/</span><br></pre></td></tr></table></figure><h3 id="启动spark集群"><a href="#启动spark集群" class="headerlink" title="启动spark集群"></a>启动spark集群</h3><p>启动历史服务器进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd spark</span><br><span class="line">sbin/start-history-server.sh</span><br><span class="line">jps</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">49297 JobHistoryServer</span><br><span class="line">49778 HistoryServer</span><br><span class="line">48296 DataNode</span><br><span class="line">49835 Jps</span><br><span class="line">48734 ResourceManager</span><br><span class="line">48910 NodeManager</span><br><span class="line">48127 NameNode</span><br></pre></td></tr></table></figure><p>启动集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-all.sh</span><br><span class="line">jps</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">49297 JobHistoryServer</span><br><span class="line">50162 Jps</span><br><span class="line">50020 Master</span><br><span class="line">48296 DataNode</span><br><span class="line">50107 Worker</span><br><span class="line">48734 ResourceManager</span><br><span class="line">48910 NodeManager</span><br><span class="line">48127 NameNode</span><br><span class="line">49903 HistoryServer</span><br></pre></td></tr></table></figure><p>进入<code>master:8080</code>web端口可以看到spark集群界面</p><p><img src="/2022/12/01/Spark基础/D.png" alt></p><h4 id="StandAlone集群测试"><a href="#StandAlone集群测试" class="headerlink" title="StandAlone集群测试"></a>StandAlone集群测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark/bin</span><br><span class="line">./pyspark --master spark://master:7077</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Python 3.8.15 (default, Nov 24 2022, 15:19:38) </span><br><span class="line">[GCC 11.2.0] :: Anaconda, Inc. on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">22/12/05 11:54:36 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &apos;_/</span><br><span class="line">   /__ / .__/\_,_/_/ /_/\_\   version 3.2.0</span><br><span class="line">      /_/</span><br><span class="line"></span><br><span class="line">Using Python version 3.8.15 (default, Nov 24 2022 15:19:38)</span><br><span class="line">Spark context Web UI available at http://master:4040</span><br><span class="line">Spark context available as &apos;sc&apos; (master = spark://master:7077, app id = app-20221205115438-0000).</span><br><span class="line">SparkSession available as &apos;spark&apos;.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/12/01/Spark基础/E.png" alt></p><p>在/usr/local下创建一个words.txt文件，写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop spark flink</span><br><span class="line">hadoop spark flink hadoop hadoop</span><br><span class="line">hadoop spark flink hadoop hadoop spark spark</span><br></pre></td></tr></table></figure><p>创建input文件夹，将文件上传至hdfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir /input/</span><br><span class="line">hdfs dfs -put /usr/local/words.txt /input/</span><br><span class="line">hadoop fs -ls /input</span><br><span class="line">hadoop fs -cat /input/words.txt</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(<span class="string">"hdfs://master:8020/input/words.txt"</span>).flatMap(<span class="keyword">lambda</span> line: line.split(<span class="string">" "</span>)).map(<span class="keyword">lambda</span> x:(x,<span class="number">1</span>)).reduceByKey(<span class="keyword">lambda</span> a,b:a+b).collect()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;hadoop&apos;, 7), (&apos;spark&apos;, 5), (&apos;flink&apos;, 3)]</span><br></pre></td></tr></table></figure><p><img src="/2022/12/01/Spark基础/F.png" alt></p><p><img src="/2022/12/01/Spark基础/G.png" alt></p><p><img src="/2022/12/01/Spark基础/H.png" alt></p><h2 id="Spark-on-YARN"><a href="#Spark-on-YARN" class="headerlink" title="Spark on YARN"></a>Spark on YARN</h2><ul><li><p>将spark部署到yarn集群中可以提高对资源的利用率，无需部署spark集群，只需要一台充当spark客户端的服务器即可提交任务到yarn集群运行</p></li><li><p>Master角色由yarn的ResourceManager担任</p></li><li>Worker角色由yarn的NodeManager担任</li><li>Driver角色运行在yarn容器内或提交任务的客户端进程中</li><li>Executor运行在yarn提供的容器内</li></ul><p>让spark计算任务运行在yarn容器内部，资源管理交友yarn的ResourceManager和NodeManager代替</p><h3 id="启动Spark-on-YARN"><a href="#启动Spark-on-YARN" class="headerlink" title="启动Spark on YARN"></a>启动Spark on YARN</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/spark</span><br><span class="line">./sbin/stop-all.sh #关闭standalone集群</span><br><span class="line">bin/pyspark --master yarn</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Python 3.8.15 (default, Nov 24 2022, 15:19:38) </span><br><span class="line">[GCC 11.2.0] :: Anaconda, Inc. on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">22/12/05 15:27:46 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">22/12/05 15:27:49 WARN Client: Neither spark.yarn.jars nor spark.yarn.archive is set, falling back to uploading libraries under SPARK_HOME.</span><br><span class="line"> Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &apos;_/</span><br><span class="line">   /__ / .__/\_,_/_/ /_/\_\   version 3.2.0</span><br><span class="line">      /_/</span><br><span class="line"></span><br><span class="line">Using Python version 3.8.15 (default, Nov 24 2022 15:19:38)</span><br><span class="line">Spark context Web UI available at http://master:4040</span><br><span class="line">Spark context available as &apos;sc&apos; (master = yarn, app id = application_1670210110128_0001).</span><br><span class="line">SparkSession available as &apos;spark&apos;.</span><br><span class="line">&gt;&gt;&gt; sc.parallelize([1,2,3,4,5]).map(lambda x:x*10).collect()</span><br><span class="line">[10, 20, 30, 40, 50]                                                            </span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>执行程序测试，或通过spark客户端spark-submit提交代码，spark‘算法会运行在容器中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/spark-submit --master yarn /usr/local/spark/examples/src/main/python/pi.py 100</span><br></pre></td></tr></table></figure><p><img src="/2022/12/01/Spark基础/I.png" alt></p><p><img src="/2022/12/01/Spark基础/J.png" alt></p><h3 id="Spark-on-YARN部署模式"><a href="#Spark-on-YARN部署模式" class="headerlink" title="Spark on YARN部署模式"></a>Spark on YARN部署模式</h3><ul><li><p>Cluster（集群模式）</p><p>Driver运行在yarn容器内部，和ApplicationMaster在同一个容器内</p></li><li><p>Client（客户端模式）</p><p>Driver运行在客户端进程中，例如Driver运行在spark-submit客户端的进程中</p></li></ul><p>其中集群模式在容器内进行通讯，效率高，但是日志同样存放于容器内部</p><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit --master yarn --deploy-mode client /usr/local/spark/examples/src/main/python/pi.py 100</span><br></pre></td></tr></table></figure><h4 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit --master yarn --deploy-mode cluster /usr/local/spark/examples/src/main/python/pi.py 100</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;font color=&quot;gold&quot;&gt;定义&lt;/font&gt;：&lt;font color=&quot;gold&quot;&gt;Apache Spark是用于大规模数据处理的统一分析引擎。&lt;/font&gt;其核心数据结构：弹性分布式数据集（RDD）能够在大规模集群中做内存运算，且具有一定容错方式。&lt;/p&gt;
&lt;h2 id=&quot;Spark框架&quot;&gt;&lt;a href=&quot;#Spark框架&quot; class=&quot;headerlink&quot; title=&quot;Spark框架&quot;&gt;&lt;/a&gt;Spark框架&lt;/h2&gt;&lt;h3 id=&quot;组成&quot;&gt;&lt;a href=&quot;#组成&quot; class=&quot;headerlink&quot; title=&quot;组成&quot;&gt;&lt;/a&gt;组成&lt;/h3&gt;&lt;p&gt;&lt;font color=&quot;orange&quot;&gt;&lt;strong&gt;· Spark Core&lt;/strong&gt;&lt;/font&gt;：以RDD为数据抽象，提供Python、Java、Scala、R语言的API和Spark的核心功能，是Spark运行的基础；&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;orange&quot;&gt;&lt;strong&gt;· SparkSQL&lt;/strong&gt;&lt;/font&gt;：基于SparkCore，提供机构化数据处理模块，支持以SQL语言对数据进行处理；同时可以作为StructuredStreaming模块的基础，进行数据流式计算；&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;orange&quot;&gt;&lt;strong&gt;· SparkStreaming&lt;/strong&gt;&lt;/font&gt;：基于SparkCore，提供数据流式计算；&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;orange&quot;&gt;&lt;strong&gt;· MLlib&lt;/strong&gt;&lt;/font&gt;：基于SparkCore，内置大量机器学习库和算法API，进行机器学习计算；&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;orange&quot;&gt;&lt;strong&gt;· GraphX&lt;/strong&gt;&lt;/font&gt;：基于SparkCore，提供了大量图计算API，用于分布式图计算&lt;/p&gt;
&lt;h3 id=&quot;运行模式&quot;&gt;&lt;a href=&quot;#运行模式&quot; class=&quot;headerlink&quot; title=&quot;运行模式&quot;&gt;&lt;/a&gt;运行模式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;· 本地模式（单机/local）&lt;/strong&gt;：以一个独立进程，通过内部的多线程模拟Spark运行环境&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;· Standalone模式（集群）&lt;/strong&gt;：Spark的各个角色以独立进程形式存在，组成集群环境&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;· Hadoop YARN模式（集群）&lt;/strong&gt;：Spark的各个角色运行在YARN容器内部，组成集群环境&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;· Kubernetes模式（容器集群）&lt;/strong&gt;：Spark的各个角色运行在Kubernetes容器内部，组成集群环境&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;· 云服务模式&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;角色&quot;&gt;&lt;a href=&quot;#角色&quot; class=&quot;headerlink&quot; title=&quot;角色&quot;&gt;&lt;/a&gt;角色&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;资源&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;· Master角色&lt;/strong&gt;：集群资源管理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;· Worker角色&lt;/strong&gt;：单机资源管理(所在服务器资源管理)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;任务&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;· Driver角色&lt;/strong&gt;：单个任务管理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;· Executor角色&lt;/strong&gt;：单个任务计算&lt;/p&gt;</summary>
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="Spark" scheme="http://yoursite.com/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Nebula-全文检索</title>
    <link href="http://yoursite.com/2022/11/25/Nebula-%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    <id>http://yoursite.com/2022/11/25/Nebula-%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/</id>
    <published>2022-11-25T06:17:41.000Z</published>
    <updated>2022-11-25T08:35:41.947Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="连接ES"><a href="#连接ES" class="headerlink" title="连接ES"></a>连接ES</h2><h3 id="添加Nebula全文索引模板文件"><a href="#添加Nebula全文索引模板文件" class="headerlink" title="添加Nebula全文索引模板文件"></a>添加Nebula全文索引模板文件</h3><p><code>http://localhost:5601/app/dev_tools#/console</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -H "Content-Type: application/json; charset=utf-8" -XPUT http://localhost:9200/_template/nebula_index_template -d '</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"template"</span>: <span class="string">"nebula*"</span>,</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;</span><br><span class="line">    <span class="attr">"index"</span>: &#123;</span><br><span class="line">      <span class="attr">"number_of_shards"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"number_of_replicas"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"properties"</span> : &#123;</span><br><span class="line">            <span class="attr">"tag_id"</span> : &#123; <span class="attr">"type"</span> : <span class="string">"long"</span> &#125;,</span><br><span class="line">            <span class="attr">"column_id"</span> : &#123; <span class="attr">"type"</span> : <span class="string">"text"</span> &#125;,</span><br><span class="line">            <span class="attr">"value"</span> :&#123; <span class="attr">"type"</span> : <span class="string">"keyword"</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><h3 id="登录ES客户端"><a href="#登录ES客户端" class="headerlink" title="登录ES客户端"></a>登录ES客户端</h3><p><code>SIGN IN TEXT SERVICE (localhost:9200,&quot;admin&quot;,&quot;123456&quot;)</code></p><h3 id="查看ES客户端详情"><a href="#查看ES客户端详情" class="headerlink" title="查看ES客户端详情"></a>查看ES客户端详情</h3><p><code>SHOW TEXT SEARCH CLIENTS;</code></p><h3 id="退出ES客户端"><a href="#退出ES客户端" class="headerlink" title="退出ES客户端"></a>退出ES客户端</h3><p><code>SIGN OUT TEXT SERVICE</code></p><h2 id="配置Nebula"><a href="#配置Nebula" class="headerlink" title="配置Nebula"></a>配置Nebula</h2><h3 id="安装storage服务"><a href="#安装storage服务" class="headerlink" title="安装storage服务"></a>安装storage服务</h3><p>进入/usr/local/nebula根目录下，进入/etc子目录，找到nebula-storaged-listener.conf.production文件，复制一份并去除.production后缀。将文件中的listenr地址改为真实地址。</p><p>随后启动listener：<code>./bin/nebula-storaged --flagfile etc/nebula-storaged-listener.conf</code></p><h3 id="添加listener"><a href="#添加listener" class="headerlink" title="添加listener"></a>添加listener</h3><p><code>ADD LISTENER ELASTICSEARCH 192.168.100.1:9789,192.168.100.2:9789;</code>(<font color="gold">注：如果有多台图库集群，都要配置</font>)</p><p>进入nebula-console，执行<code>SHOW LISTENER</code>可以查看图空间的所有listener。</p><p>要删除所有listener，执行：<code>REMOVE LISTENER ELASTICSEARCH</code>(<font color="gold">注：一个图空间仅可执行一次</font>)</p><a id="more"></a><h2 id="刷表"><a href="#刷表" class="headerlink" title="刷表"></a>刷表</h2><h3 id="创建图空间"><a href="#创建图空间" class="headerlink" title="创建图空间"></a>创建图空间</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SPACE</span> nebula_graph (partition_num = <span class="number">20</span>, replica_factor = <span class="number">2</span>, vid_type = FIXED_STRING(<span class="number">128</span>))</span><br></pre></td></tr></table></figure><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TAG <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> player(<span class="keyword">name</span> <span class="keyword">string</span>, age <span class="keyword">string</span>);</span><br><span class="line"><span class="keyword">CREATE</span> TAG <span class="keyword">INDEX</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">name</span> <span class="keyword">ON</span> player(<span class="keyword">name</span>(<span class="number">20</span>),age(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">CREATE</span> FULLTEXT TAG <span class="keyword">INDEX</span> nebula_index_1 <span class="keyword">ON</span> player(<span class="keyword">name</span>,age);</span><br></pre></td></tr></table></figure><h3 id="Edge-Type"><a href="#Edge-Type" class="headerlink" title="Edge Type"></a>Edge Type</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> EDGE <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> edge_player(created_time <span class="built_in">TIMESTAMP</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">now</span>());</span><br></pre></td></tr></table></figure><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p><font color="gold">注：</font>1.要将图库索引同步到es中去，需要在创建索引时将索引以nebula为开头命名。</p><p>2.执行<code>REBUILD FULLTEXT INDEX</code>将索引同步到es，此时es中还未完成索引的创建，需要在图库录入数据后自动同步到es（可能存在延迟，时间不定）</p><p>3.仅可使用<code>LOOKUP</code>语句进行模糊检索</p><p>4.删除图空间，全文索引不会自动删除，需要手动执行：<code>DROP FULLTEXT INDEX &lt;nebula_index*&gt;</code></p><h3 id="查看全文索引"><a href="#查看全文索引" class="headerlink" title="查看全文索引"></a>查看全文索引</h3><p><code>SHOW FULLTEXT INDEXES</code></p><h2 id="数据测试"><a href="#数据测试" class="headerlink" title="数据测试"></a>数据测试</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> VERTEX player(<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> \</span><br><span class="line">  <span class="string">"Russell Westbrook"</span>: (<span class="string">"Russell Westbrook"</span>, <span class="number">30</span>), \</span><br><span class="line">  <span class="string">"Chris Paul"</span>: (<span class="string">"Chris Paul"</span>, <span class="number">33</span>),\</span><br><span class="line">  <span class="string">"Boris Diaw"</span>: (<span class="string">"Boris Diaw"</span>, <span class="number">36</span>),\</span><br><span class="line">  <span class="string">"David West"</span>: (<span class="string">"David West"</span>, <span class="number">38</span>),\</span><br><span class="line">  <span class="string">"Danny Green"</span>: (<span class="string">"Danny Green"</span>, <span class="number">31</span>),\</span><br><span class="line">  <span class="string">"Tim Duncan"</span>: (<span class="string">"Tim Duncan"</span>, <span class="number">42</span>),\</span><br><span class="line">  <span class="string">"James Harden"</span>: (<span class="string">"James Harden"</span>, <span class="number">29</span>),\</span><br><span class="line">  <span class="string">"Tony Parker"</span>: (<span class="string">"Tony Parker"</span>, <span class="number">36</span>),\</span><br><span class="line">  <span class="string">"Aron Baynes"</span>: (<span class="string">"Aron Baynes"</span>, <span class="number">32</span>),\</span><br><span class="line">  <span class="string">"Ben Simmons"</span>: (<span class="string">"Ben Simmons"</span>, <span class="number">22</span>),\</span><br><span class="line">  <span class="string">"Blake Griffin"</span>: (<span class="string">"Blake Griffin"</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><h3 id="模糊检索"><a href="#模糊检索" class="headerlink" title="模糊检索"></a>模糊检索</h3><p><code>LOOKUP ON player WHERE PREFIX(player.name, &quot;B&quot;);</code></p><p><code>LOOKUP ON player WHERE WILDCARD(player.name, &quot;*ri*&quot;) YIELD player.name, player.age;</code></p><p><code>LOOKUP ON player WHERE WILDCARD(player.name, &quot;*ri*&quot;) | YIELD count(*);</code></p><p><code>LOOKUP ON player WHERE REGEXP(player.name, &quot;R.*&quot;) YIELD player.name, player.age;</code></p><p><code>LOOKUP ON player WHERE REGEXP(player.name, &quot;.*&quot;);</code></p><p><code>LOOKUP ON player WHERE FUZZY(player.name, &quot;Tim Dunncan&quot;, AUTO, OR, 100) YIELD player.name;</code></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;连接ES&quot;&gt;&lt;a href=&quot;#连接ES&quot; class=&quot;headerlink&quot; title=&quot;连接ES&quot;&gt;&lt;/a&gt;连接ES&lt;/h2&gt;&lt;h3 id=&quot;添加Nebula全文索引模板文件&quot;&gt;&lt;a href=&quot;#添加Nebula全文索引模板文件&quot; class=&quot;headerlink&quot; title=&quot;添加Nebula全文索引模板文件&quot;&gt;&lt;/a&gt;添加Nebula全文索引模板文件&lt;/h3&gt;&lt;p&gt;&lt;code&gt;http://localhost:5601/app/dev_tools#/console&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -H &quot;Content-Type: application/json; charset=utf-8&quot; -XPUT http://localhost:9200/_template/nebula_index_template -d &#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attr&quot;&gt;&quot;template&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;nebula*&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;index&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;number_of_shards&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;number_of_replicas&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;mappings&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;properties&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;tag_id&quot;&lt;/span&gt; : &amp;#123; &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;long&quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;column_id&quot;&lt;/span&gt; : &amp;#123; &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;value&quot;&lt;/span&gt; :&amp;#123; &lt;span class=&quot;attr&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;登录ES客户端&quot;&gt;&lt;a href=&quot;#登录ES客户端&quot; class=&quot;headerlink&quot; title=&quot;登录ES客户端&quot;&gt;&lt;/a&gt;登录ES客户端&lt;/h3&gt;&lt;p&gt;&lt;code&gt;SIGN IN TEXT SERVICE (localhost:9200,&amp;quot;admin&amp;quot;,&amp;quot;123456&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看ES客户端详情&quot;&gt;&lt;a href=&quot;#查看ES客户端详情&quot; class=&quot;headerlink&quot; title=&quot;查看ES客户端详情&quot;&gt;&lt;/a&gt;查看ES客户端详情&lt;/h3&gt;&lt;p&gt;&lt;code&gt;SHOW TEXT SEARCH CLIENTS;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;退出ES客户端&quot;&gt;&lt;a href=&quot;#退出ES客户端&quot; class=&quot;headerlink&quot; title=&quot;退出ES客户端&quot;&gt;&lt;/a&gt;退出ES客户端&lt;/h3&gt;&lt;p&gt;&lt;code&gt;SIGN OUT TEXT SERVICE&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置Nebula&quot;&gt;&lt;a href=&quot;#配置Nebula&quot; class=&quot;headerlink&quot; title=&quot;配置Nebula&quot;&gt;&lt;/a&gt;配置Nebula&lt;/h2&gt;&lt;h3 id=&quot;安装storage服务&quot;&gt;&lt;a href=&quot;#安装storage服务&quot; class=&quot;headerlink&quot; title=&quot;安装storage服务&quot;&gt;&lt;/a&gt;安装storage服务&lt;/h3&gt;&lt;p&gt;进入/usr/local/nebula根目录下，进入/etc子目录，找到nebula-storaged-listener.conf.production文件，复制一份并去除.production后缀。将文件中的listenr地址改为真实地址。&lt;/p&gt;
&lt;p&gt;随后启动listener：&lt;code&gt;./bin/nebula-storaged --flagfile etc/nebula-storaged-listener.conf&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加listener&quot;&gt;&lt;a href=&quot;#添加listener&quot; class=&quot;headerlink&quot; title=&quot;添加listener&quot;&gt;&lt;/a&gt;添加listener&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ADD LISTENER ELASTICSEARCH 192.168.100.1:9789,192.168.100.2:9789;&lt;/code&gt;(&lt;font color=&quot;gold&quot;&gt;注：如果有多台图库集群，都要配置&lt;/font&gt;)&lt;/p&gt;
&lt;p&gt;进入nebula-console，执行&lt;code&gt;SHOW LISTENER&lt;/code&gt;可以查看图空间的所有listener。&lt;/p&gt;
&lt;p&gt;要删除所有listener，执行：&lt;code&gt;REMOVE LISTENER ELASTICSEARCH&lt;/code&gt;(&lt;font color=&quot;gold&quot;&gt;注：一个图空间仅可执行一次&lt;/font&gt;)&lt;/p&gt;</summary>
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="-database -nebula" scheme="http://yoursite.com/tags/database-nebula/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://yoursite.com/2022/09/16/Docker/"/>
    <id>http://yoursite.com/2022/09/16/Docker/</id>
    <published>2022-09-16T07:15:39.000Z</published>
    <updated>2022-09-19T09:15:24.354Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="CentOS-Docker安装"><a href="#CentOS-Docker安装" class="headerlink" title="CentOS Docker安装"></a>CentOS Docker安装</h2><p>CentOS7要求64位，且内核版本高于3.10</p><p>查看CentOS内核版本：<code>uname -r</code></p><p><strong><font size="4" color="orange">·</font></strong> 安装Docker：卸载旧版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p><strong><font size="4" color="orange">·</font></strong> 安装所需软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><p><strong><font size="4" color="orange">·</font></strong> 设置Docker仓库（清华源）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><strong><font size="4" color="orange">·</font></strong> 安装Docker Engine-Community</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>通过运行自带的hello-world镜像来验证是否正确安装了Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h3><p>使用<code>docker run</code>命令在容器内运行一个脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run centos /bin/echo "hello docker"</span><br></pre></td></tr></table></figure><p><img src="/2022/09/16/Docker/A.png" alt></p><p>其中centos为指定要运行的镜像。Docker 会先从本地主机上查找镜像是否存在，如果不存在，则到Docker Hub镜像仓库下载公共镜像</p><h3 id="运行交互式容器"><a href="#运行交互式容器" class="headerlink" title="运行交互式容器"></a>运行交互式容器</h3><p>使用docker命令的两个参数 <font color="orange">-i</font> <font color="orange">-t</font> 实现对运行容器的交互</p><p><strong><font size="4" color="orange">·</font></strong>  <font color="orange">-t</font>：在新的容器内指定一个伪终端或终端</p><p><strong><font size="4" color="orange">·</font></strong>  <font color="orange">-i</font>：允许对容器内的标准输入（STDIN）进行交互</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -i -t centos /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/2022/09/16/Docker/B.png" alt></p><p>运行 <code>exit</code> 命令或者使用键盘CTRL+D退出该容器</p><h3 id="后台模式运行容器"><a href="#后台模式运行容器" class="headerlink" title="后台模式运行容器"></a>后台模式运行容器</h3><p>使用下列命令创建一个以进程方式运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -d centos /bin/sh -c "while true; do echo hello world; sleep 1; done"</span><br></pre></td></tr></table></figure><p><img src="/2022/09/16/Docker/C.png" alt></p><p>执行后并没有输出”hello world”，而是输出了一串字符（容器ID），可以通过该容器ID来查看对应的容器里执行了什么</p><p>执行<code>docker ps</code>命令查看运行的容器，其中：</p><p><strong>·</strong> <font color="orange">CONTAINER ID</font> ：容器ID</p><p><strong>·</strong> <font color="orange">IMAGE</font>：使用的镜像</p><p><strong>·</strong> <font color="orange">COMMAND</font>：启动容器时执行的命令</p><p><strong>·</strong> <font color="orange">CREATED</font>：容器创建时间</p><p><strong>·</strong> <font color="orange">STATUS</font>：容器状态（<font color="#008080">created</font>：已创建；<font color="#008080">restarting</font>：重启中；<font color="#008080">running/Up</font>：运行中；<font color="#008080">removing</font>：迁移中；<font color="#008080">paused</font>：暂停中；<font color="#008080">exited</font>：已停止；<font color="#008080">dead</font>：死亡）</p><p><strong>·</strong> <font color="orange">PORTS</font>：端口信息和使用的连接类型（tcp\udp）</p><p><strong>·</strong> <font color="orange">NAMES</font>：自动分配的容器名称</p><p><img src="/2022/09/16/Docker/D.png" alt></p><p>要查看容器内部的标准输出，执行<code>docker logs &lt;CONTAINER ID&gt;</code></p><p><img src="/2022/09/16/Docker/E.png" alt></p><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker stop &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h2 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p>假设本地没有ubuntu镜像，使用<code>docker pull</code>命令来载入一个ubuntu镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker pull ubuntu</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h3 id="查看全部容器"><a href="#查看全部容器" class="headerlink" title="查看全部容器"></a>查看全部容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker ps -a</span><br></pre></td></tr></table></figure><h3 id="启动停止运行的容器"><a href="#启动停止运行的容器" class="headerlink" title="启动停止运行的容器"></a>启动停止运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker ps -a # 获取容器ID</span><br><span class="line"><span class="meta">$</span> docker start &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h3 id="后台运行容器"><a href="#后台运行容器" class="headerlink" title="后台运行容器"></a>后台运行容器</h3><p><code>-d</code>可以指定容器的运行模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -itd --name ubuntu-test ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h3 id="停止容器-1"><a href="#停止容器-1" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker stop &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker restart &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>使用了<code>-d</code>参数后，容器进入后台运行，此时需要进入容器，需要指令<code>docker attach</code>或<code>docker exec</code></p><p>其中<code>docker attach</code>命令下如果容器退出，则容器会停止，而<code>docker exec</code>命令会退出容器终端，但不会导致容器的停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker attach &lt;CONTAINER ID&gt;</span><br><span class="line"><span class="meta">$</span> docker exec -it &lt;CONTAINER ID&gt; /bin/bash</span><br></pre></td></tr></table></figure><h3 id="导出与导入容器"><a href="#导出与导入容器" class="headerlink" title="导出与导入容器"></a>导出与导入容器</h3><p>导出容器：导出本地某个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker export &lt;CONTAINER ID&gt; &gt; centos.tar</span><br></pre></td></tr></table></figure><p>导入容器：将容器快照文件导入到镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat docker/centos.tar | docker import - test/centos:v1</span><br></pre></td></tr></table></figure><p>或通过指定URL/目录来导入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker rm -f &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><p>清理所有处于终止状态的容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker container prune</span><br></pre></td></tr></table></figure><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p>运行容器时，使用的镜像如果在本地中不存在，docker会自动从docker镜像仓库中下载。默认Docker Hub公共镜像源</p><h3 id="获取Docker镜像"><a href="#获取Docker镜像" class="headerlink" title="获取Docker镜像"></a>获取Docker镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker images</span><br></pre></td></tr></table></figure><p>其中：</p><p><strong>·</strong> <font color="orange">REPOSITORY</font> ：镜像仓库源</p><p><strong>·</strong> <font color="orange">TAG</font>：镜像标签</p><p><strong>·</strong> <font color="orange">IMAGE ID</font>：镜像ID</p><p><strong>·</strong> <font color="orange">CREATED</font>：镜像创建时间</p><p><strong>·</strong> <font color="orange">SIZE</font>：镜像大小</p><p><img src="/2022/09/16/Docker/K.png" alt></p><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如python仓库源里，有3.6.7、3.9.0两个不同的版本了。使用 &lt;REPOSITORY> : &lt;TAG> 来定义不同的镜像</p><p>例：使用3.9.0版本的pythob来运行容器，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -it python:3.9.0 /usr/bin/env python</span><br></pre></td></tr></table></figure><p>镜像后的/usr/bin/env python是具体的命令，这里的作用是启动交互式python IDLE。如果不指定镜像的版本标签，docker将默认使用python:latest镜像</p><p><img src="/2022/09/16/Docker/L.png" alt></p><h3 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker search centos</span><br></pre></td></tr></table></figure><p>其中：</p><p><strong>·</strong> <font color="orange">NAME</font> ：镜像仓库源名称</p><p><strong>·</strong> <font color="orange">DESCRIPTION</font>：镜像描述</p><p><strong>·</strong> <font color="orange">STARS</font>：点赞数</p><p><strong>·</strong> <font color="orange">OFFICIAL</font>：是否为Docker官方发布镜像</p><p><strong>·</strong> <font color="orange">AUTOMATED</font>：自动构建</p><h3 id="预加载镜像"><a href="#预加载镜像" class="headerlink" title="预加载镜像"></a>预加载镜像</h3><p>当在本地主机当中使用不存在的镜像时Docker将会自动下载镜像。如果要预加载镜像，可以使用<code>docker pull</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker pull centos:7</span><br></pre></td></tr></table></figure><p>下载完成后，就可以直接使用这个镜像运行容器</p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker rmi &lt;IMAGE ID&gt;</span><br></pre></td></tr></table></figure><h3 id="创建自己的镜像"><a href="#创建自己的镜像" class="headerlink" title="创建自己的镜像"></a>创建自己的镜像</h3><h4 id="·-从已创建容器当中更新镜像"><a href="#·-从已创建容器当中更新镜像" class="headerlink" title="· 从已创建容器当中更新镜像"></a><strong>·</strong> <font color="orange">从已创建容器当中更新镜像</font></h4><p>通过镜像进入一个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -it centos:7 bin/bash</span><br></pre></td></tr></table></figure><p>例：安装vim</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum install vim</span><br></pre></td></tr></table></figure><p><img src="/2022/09/16/Docker/M.png" alt></p><p>执行<code>exit</code>命令退出容器，接着使用<code>docker commit</code>命令提交容器副本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker commit -m="add vim" -a="9.9" &lt;CONTAINER ID&gt; centos7:vim</span><br></pre></td></tr></table></figure><p>其中：</p><p><strong>·</strong> <font color="orange">-m</font> ：镜像描述信息</p><p><strong>·</strong> <font color="orange">-a</font>：镜像作者</p><p><strong>·</strong> <font color="orange">CONTAINER ID</font>：容器ID</p><p><strong>·</strong> <font color="orange">centos7</font>：镜像名称</p><p><strong>·</strong> <font color="orange">vim</font>：镜像标签</p><p>启动安装vim的镜像容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -it centos:vim /bin/bash</span><br></pre></td></tr></table></figure><h4 id="·-使用Dockerfile构建镜像"><a href="#·-使用Dockerfile构建镜像" class="headerlink" title="· 使用Dockerfile构建镜像"></a><strong>·</strong> <font color="orange">使用Dockerfile构建镜像</font></h4><p>使用<code>docker build</code>命令，构建一个全新的镜像。需要在自定目录下创建Dockerfile文件，并添加构建指令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">ADD</span> fastapi /</span><br><span class="line"><span class="keyword">WORKDIR</span> /</span><br><span class="line"><span class="keyword">RUN</span> /usr/local/bin/python -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn</span><br><span class="line"><span class="keyword">RUN</span> pip install fastapi[all] -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8089</span></span><br><span class="line"><span class="keyword">CMD</span> ["python","main.py"]</span><br></pre></td></tr></table></figure><p><img src="/2022/09/16/Docker/N.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker images</span><br></pre></td></tr></table></figure><p><img src="/2022/09/16/Docker/O.png" alt></p><p>使用构建的镜像创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -it -p 8089:8089 fastapi:v1.0</span><br></pre></td></tr></table></figure><h3 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> dcoker tag &lt;IMAGE ID&gt; &lt;REPOSITORY&gt;:&lt;TAG&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> dcoker tag 8720FB78CF34 fastapi:v1.1</span><br></pre></td></tr></table></figure><p>为已有标签的镜像添加标签，该镜像将共用两个标签而不会被替换</p><h2 id="运行应用示例"><a href="#运行应用示例" class="headerlink" title="运行应用示例"></a>运行应用示例</h2><h3 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h3><p>载入并运行镜像，其中<code>-P</code>命令使容器内部使用的网络端口随机映射到主机上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker pull training/webapp</span><br><span class="line"><span class="meta">$</span> docker run -d -P training/webapp python app.py</span><br></pre></td></tr></table></figure><p><img src="/2022/09/16/Docker/F.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker ps</span><br></pre></td></tr></table></figure><p>可以通过-p参数来设置端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -d -p 5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><p><img src="/2022/09/16/Docker/G.png" alt></p><p><img src="/2022/09/16/Docker/I.png" alt></p><p><img src="/2022/09/16/Docker/H.png" alt></p><p>查看容器内端口的指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker port &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><p>查看应用程序日志/进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker logs -f &lt;CONTAINER ID&gt;</span><br><span class="line"><span class="meta">$</span> docker top &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><p>查看Docker应用底层信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker inspect</span><br></pre></td></tr></table></figure><h3 id="停止应用容器"><a href="#停止应用容器" class="headerlink" title="停止应用容器"></a>停止应用容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker stop &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><h3 id="重启应用容器"><a href="#重启应用容器" class="headerlink" title="重启应用容器"></a>重启应用容器</h3><p>对停止的应用：<code>docker start</code></p><p>对运行中的应用：<code>docker restart</code></p><p>查询最后一次创建的容器：<code>docker ps -l</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start 707a9f61dd9a</span><br><span class="line">docker ps -l</span><br></pre></td></tr></table></figure><h3 id="移除应用容器"><a href="#移除应用容器" class="headerlink" title="移除应用容器"></a>移除应用容器</h3><font color="gold">注</font>：容器必须是停止状态<br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>docker rm &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><br><br><img src="/2022/09/16/Docker/J.png" alt><br><br>### Docker网络端口映射<br><br>以fastapi镜像为例<br><br><strong>·</strong> <font color="orange">-P</font>：随机映射<br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -it -P &lt;REPOSITORY&gt;:&lt;TAG&gt; ...</span><br></pre></td></tr></table></figure><br><br><strong>·</strong> <font color="orange">-p</font>：指定端口映射、指定容器绑定的ip地址<br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -it -p 8089:8089 &lt;REPOSITORY&gt;:&lt;TAG&gt; ...</span><br></pre></td></tr></table></figure><br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -it -p 127.0.0.1:8089:8089 &lt;REPOSITORY&gt;:&lt;TAG&gt; ...</span><br></pre></td></tr></table></figure><br><br>默认都是绑定tcp端口，如要绑定UPD协议端口，需要在端口后加上<font color="#008080">\udp</font><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -it -p 127.0.0.1:8089:8089/udp &lt;REPOSITORY&gt;:&lt;TAG&gt; ...</span><br></pre></td></tr></table></figure><p><strong>·</strong> <font color="orange">port</font>：快速查看端口绑定情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker port &lt;CONTAINER ID&gt; &lt;PORT&gt;</span><br></pre></td></tr></table></figure><p>指定容器名称、用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -it -p 127.0.0.1:8089:8089 --name fastapi --user=root &lt;REPOSITORY&gt;:&lt;TAG&gt; ...</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile是用于构建镜像的文本文件，其中包含了构建镜像时需要用到的各个指令和说明</p><p>Dockerfile的指令每执行一次都会在docker上新建一层镜像，如果执行过多会脏成镜像膨胀过大，例如之前的fastapi镜像</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">ADD</span> fastapi /</span><br><span class="line"><span class="keyword">WORKDIR</span> /</span><br><span class="line"><span class="keyword">RUN</span> /usr/local/bin/python -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn</span><br><span class="line"><span class="keyword">RUN</span> pip install fastapi[all] -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8089</span></span><br><span class="line"><span class="keyword">CMD</span> ["python","main.py"]</span><br></pre></td></tr></table></figure><p>可以将其修改为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">ADD</span> fastapi /</span><br><span class="line"><span class="keyword">WORKDIR</span> /</span><br><span class="line"><span class="keyword">RUN</span> /usr/local/bin/python -m pip install --upgrade pip -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn \</span><br><span class="line">&amp;&amp; pip install fastapi[all] -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8089</span></span><br><span class="line"><span class="keyword">CMD</span> ["python","main.py"]</span><br></pre></td></tr></table></figure><p>以<code>&amp;&amp;</code>符号连接的命令，在执行后只会构建一层镜像</p><h3 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker build -t &lt;REPOSITORY&gt;:&lt;TAG&gt; .</span><br></pre></td></tr></table></figure><p>最后<code>.</code>代表本次执行的上下文路径（打包本机目录下文件的全部内容）</p><h3 id="Dockerfile常用构建指令"><a href="#Dockerfile常用构建指令" class="headerlink" title="Dockerfile常用构建指令"></a>Dockerfile常用构建指令</h3><p><strong><font size="4">·</font> <font size="4" color="orange">COPY</font></strong></p><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span> [--chown=&lt;user&gt;:&lt;group&gt;][&lt;source&gt;,... &lt;target&gt;]</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span> fastapi /</span><br></pre></td></tr></table></figure><p>其中：</p><p><strong>·</strong> <font color="orange">[–chown=&lt;user&gt;:&lt;group&gt;]</font> ：可选参数，用户改变复制到容器内文件的拥有者和属组</p><p><strong>·</strong> <font color="orange">&lt;source&gt;</font>：源文件或源目录</p><p><strong>·</strong> <font color="orange">&lt;targer&gt;</font>：目标路径，容器内的指定路径，如果不存在则会自动创建</p><p><strong><font size="4">·</font> <font size="4" color="orange">ADD</font></strong></p><p>与COPY使用方法类似，主要用于执行的源文件为tar压缩文件情况下，会自动复制并解压到目标路径中</p><p><strong><font size="4">·</font> <font size="4" color="orange">CMD</font></strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span> &lt;shell 命令&gt; </span><br><span class="line"><span class="keyword">CMD</span> ["&lt;可执行文件或命令&gt;","&lt;param1&gt;","&lt;param2&gt;",...] </span><br><span class="line"><span class="keyword">CMD</span> ["&lt;param1&gt;","&lt;param2&gt;",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span><br></pre></td></tr></table></figure><p>运行程序，在执行<code>docker run</code>时执行</p><p><strong><font size="4">·</font> <font size="4" color="orange">ENTRYPOINT</font></strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span> ["&lt;executeable&gt;","&lt;param1&gt;","&lt;param2&gt;",...]</span><br></pre></td></tr></table></figure><p>执行<code>docker run</code>时接受命令行参数，但在命令行指定了 <font color="orange">–entrypoint</font> 时，将覆盖<font color="#008080">ENTRYPOINT</font>指令指定的程序，且如果存在多个，仅有最后一个生效</p><p><strong><font size="4">·</font> <font size="4" color="orange">WORKDIR</font></strong></p><p>指定工作目录。用<code>WORKDIR</code>指定的工作目录，会在构建镜像的每一层中都存在（<code>WORKDIR</code>指定的工作目录，必须是提前创建好的）</p><p><code>docker build</code>构建镜像过程中的，每一个<code>RUN</code>命令都是新建的一层。只有通过<code>WORKDIR</code>创建的目录才会一直存在</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span> &lt;工作目录路径&gt;</span><br></pre></td></tr></table></figure><p><strong><font size="4">·</font> <font size="4" color="orange">EXPOSE</font></strong></p><p>声明端口。在运行时使用随机端口映射时，执行<code>docker run -P</code>，会自动随机映射<font color="#008080">EXPOSE</font>的端口</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;端口<span class="number">1</span>&gt; [&lt;端口<span class="number">2</span>&gt;...]</span><br></pre></td></tr></table></figure><p><strong><font size="4">·</font> <font size="4" color="orange">ENV</font></strong></p><p>设置环境变量</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure><p><strong><font size="4">·</font> <font size="4" color="orange">ARG</font></strong></p><p>构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量</p><p>构建命令 docker build 中可以用 –build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure><p><strong><font size="4">·</font> <font size="4" color="orange">VOLUME</font></strong></p><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷，用于避免重要的数据因容器重启而丢失、避免容器体积不断变大。在执行<code>docker run</code>时，可以通过<code>-v</code>参数修改挂载点</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span> ["&lt;路径1&gt;", "&lt;路径2&gt;"...]</span><br><span class="line"><span class="keyword">VOLUME</span> &lt;路径&gt;</span><br></pre></td></tr></table></figure><p><strong><font size="4">·</font> <font size="4" color="orange">USER</font></strong></p><p>指定执行后续命令的用户和用户组，用于切换后续命令执行的用户（用户和用户组必须提前已经存在）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure><p><strong><font size="4">·</font> <font size="4" color="orange">HEALTHCHECK</font></strong></p><p>指定某个程序或者指令来监控 docker 容器服务的运行状态</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span> [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span><br><span class="line"><span class="keyword">HEALTHCHECK</span> NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span><br><span class="line"><span class="keyword">HEALTHCHECK</span> [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。</span><br></pre></td></tr></table></figure><p><strong><font size="4">·</font> <font size="4" color="orange">ONBUILD</font></strong></p><p>用于延迟构建命令的执行。就是 Dockerfile 里使用<code>ONBUILD</code>指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的Dockerfile使用了之前构建的镜像FROM test-build ，这时执行新镜像的Dockerfile构建时候，会执行test-build的Dockerfile里<code>ONBUILD</code>指定的命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> &lt;其它指令&gt;</span><br></pre></td></tr></table></figure><p><strong><font size="4">·</font> <font size="4" color="orange">LABEL</font></strong></p><p>LABEL 指令以键值对的形式给镜像添加一些元数据（metadata）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure><h2 id="Docker打包"><a href="#Docker打包" class="headerlink" title="Docker打包"></a>Docker打包</h2><h3 id="打包tar"><a href="#打包tar" class="headerlink" title="打包tar"></a>打包tar</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker save -o &lt;filename&gt; &lt;REPOSITORY&gt;:&lt;TAG&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker save -o fastapi.tar fastapi:v1.0</span><br></pre></td></tr></table></figure><h3 id="加载tar"><a href="#加载tar" class="headerlink" title="加载tar"></a>加载tar</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker load &lt; fastapi.tar</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CentOS-Docker安装&quot;&gt;&lt;a href=&quot;#CentOS-Docker安装&quot; class=&quot;headerlink&quot; title=&quot;CentOS Docker安装&quot;&gt;&lt;/a&gt;CentOS Docker安装&lt;/h2&gt;&lt;p&gt;CentOS7要求64位，且内核版本高于3.10&lt;/p&gt;
&lt;p&gt;查看CentOS内核版本：&lt;code&gt;uname -r&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;·&lt;/font&gt;&lt;/strong&gt; 安装Docker：卸载旧版本&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; sudo yum remove docker \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-client \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-client-latest \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-common \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-latest \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-latest-logrotate \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-logrotate \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  docker-engine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;·&lt;/font&gt;&lt;/strong&gt; 安装所需软件包&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; sudo yum install -y yum-utils \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  device-mapper-persistent-data \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  lvm2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;·&lt;/font&gt;&lt;/strong&gt; 设置Docker仓库（清华源）&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; sudo yum-config-manager \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --add-repo \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;·&lt;/font&gt;&lt;/strong&gt; 安装Docker Engine-Community&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; sudo yum install docker-ce docker-ce-cli containerd.io&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nebula-fastapi接口维护文档</title>
    <link href="http://yoursite.com/2022/08/19/Nebula-fastapi%E6%8E%A5%E5%8F%A3%E7%BB%B4%E6%8A%A4%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2022/08/19/Nebula-fastapi%E6%8E%A5%E5%8F%A3%E7%BB%B4%E6%8A%A4%E6%96%87%E6%A1%A3/</id>
    <published>2022-08-19T09:40:40.000Z</published>
    <updated>2022-11-25T09:10:52.210Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h1 id="普通接口"><a href="#普通接口" class="headerlink" title="普通接口"></a>普通接口</h1><h2 id="1-导入fastapi、连接nebula连接池"><a href="#1-导入fastapi、连接nebula连接池" class="headerlink" title="1.导入fastapi、连接nebula连接池"></a>1.导入fastapi、连接nebula连接池</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> nebula2.gclient.net <span class="keyword">import</span> ConnectionPool</span><br><span class="line"><span class="keyword">from</span> nebula2.Config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭在线文档，防止攻击</span></span><br><span class="line">app_router = FastAPI(docs_url=<span class="literal">None</span>, redoc_url=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">config = Config()</span><br><span class="line">config.max_connection_pool_size = <span class="number">10</span></span><br><span class="line"><span class="comment"># 连接超时时间</span></span><br><span class="line">config.timeout = <span class="number">60000</span></span><br><span class="line"><span class="comment"># 关闭空闲连接时间</span></span><br><span class="line">config.idle_time = <span class="number">0</span></span><br><span class="line"><span class="comment"># 检查空闲连接时间间隔</span></span><br><span class="line">config.interval_check = <span class="number">-1</span></span><br><span class="line"><span class="comment"># 初始化连接池</span></span><br><span class="line">connection_pool = ConnectionPool()</span><br><span class="line"><span class="comment"># 如果给定的服务器正常，则返回true，否则返回false</span></span><br><span class="line">ok = connection_pool.init([(<span class="string">'host'</span>, <span class="number">9669</span>)], config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app=<span class="string">"nebula_api:app_router"</span>, reload=<span class="literal">True</span>, debug=<span class="literal">True</span>, host=host, port=port)</span><br></pre></td></tr></table></figure><h2 id="2-CORS跨域访问设置"><a href="#2-CORS跨域访问设置" class="headerlink" title="2.CORS跨域访问设置"></a>2.CORS跨域访问设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi.middleware.cors <span class="keyword">import</span> CORSMiddleware</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># CORS</span></span><br><span class="line">origins = [</span><br><span class="line">    <span class="string">"*"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app_router.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=origins,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,</span><br><span class="line">    allow_methods=[<span class="string">"*"</span>],</span><br><span class="line">    allow_headers=[<span class="string">"*"</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3-一般查询接口"><a href="#3-一般查询接口" class="headerlink" title="3.一般查询接口"></a>3.一般查询接口</h2><h3 id="1-单点查询"><a href="#1-单点查询" class="headerlink" title="1.单点查询"></a>1.单点查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从连接池中获取会话</span></span><br><span class="line">session = connection_pool.get_session(<span class="string">'root'</span>, <span class="string">'nebula'</span>)</span><br><span class="line">session.execute(<span class="string">'USE ai_project'</span>)</span><br><span class="line"></span><br><span class="line">data_final = []</span><br><span class="line">errorcode = <span class="number">0</span></span><br><span class="line">result = &#123;</span><br><span class="line">    <span class="string">"data"</span>: data_final,</span><br><span class="line">    <span class="string">"errorcode"</span>: errorcode</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 举例，查询标签example</span></span><br><span class="line">data_select = session.execute(</span><br><span class="line">    str(<span class="string">f'match (v:example) return id(v),v.name;'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询出错，错误代码1</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data_select.is_succeeded():</span><br><span class="line">    session.release()</span><br><span class="line">    result[<span class="string">"errorcode"</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询结果不为空，显示数据</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data_select.is_empty():</span><br><span class="line">    size = data_select.row_size()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(size):</span><br><span class="line">        data1 = data_select.row_values(index)[<span class="number">0</span>].as_string()</span><br><span class="line">        data2 = data_select.row_values(index)[<span class="number">1</span>].as_string()</span><br><span class="line">        data_dict = &#123;</span><br><span class="line">            <span class="string">"entity_id"</span>: data1,</span><br><span class="line">            <span class="string">"name"</span>: data2,</span><br><span class="line">        &#125;</span><br><span class="line">        data_final.append(data_dict)</span><br><span class="line"></span><br><span class="line">    session.release()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询类型下实体为空，错误代码2</span></span><br><span class="line">session.release()</span><br><span class="line">result[<span class="string">"errorcode"</span>] = <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="2-树型查询"><a href="#2-树型查询" class="headerlink" title="2.树型查询"></a>2.树型查询</h3><p>主函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义类和函数</span></span><br><span class="line"><span class="keyword">from</span> api_class <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">session = connection_pool.get_session(<span class="string">'root'</span>, <span class="string">'nebula'</span>)</span><br><span class="line">session.execute(<span class="string">'USE ai_project'</span>)</span><br><span class="line"></span><br><span class="line">data_final = []</span><br><span class="line">errorcode = <span class="number">0</span></span><br><span class="line">result = &#123;</span><br><span class="line">    <span class="string">"data"</span>: data_final,</span><br><span class="line">    <span class="string">"errorcode"</span>: errorcode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以example_id为根节点</span></span><br><span class="line">data_select = session.execute(</span><br><span class="line">    str(<span class="string">f'match Ret=(v)-[e:edge_example*0..15]-&gt;(p) where id(v)=="<span class="subst">&#123;example_id&#125;</span>" return nodes(Ret);'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询出错，错误代码1</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data_select.is_succeeded():</span><br><span class="line">    session.release()</span><br><span class="line">    result[<span class="string">"errorcode"</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询不为空，显示数据</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data_select.is_empty():</span><br><span class="line"></span><br><span class="line">    size = data_select.row_size()</span><br><span class="line">    data_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(size):</span><br><span class="line">        data1 = data_select.row_values(index)[<span class="number">0</span>].as_list()</span><br><span class="line">        item = re.finditer(<span class="string">r'\(\"(.*?)\" :(.*?)\&#123;(.*?)\&#125;\)'</span>, str(data1))</span><br><span class="line"></span><br><span class="line">        parent_id = <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">for</span> match <span class="keyword">in</span> item:</span><br><span class="line">            kv_dict = &#123;</span><br><span class="line">                <span class="string">'parent_id'</span>: parent_id,</span><br><span class="line">                <span class="string">'entity_id'</span>: match.group(<span class="number">1</span>).strip(),</span><br><span class="line">                <span class="string">'entity_type'</span>: match.group(<span class="number">2</span>).strip()</span><br><span class="line">            &#125;</span><br><span class="line">            kvs = match.group(<span class="number">3</span>).replace(<span class="string">" "</span>, <span class="string">""</span>).split(<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> kv <span class="keyword">in</span> kvs:</span><br><span class="line">                kv_dict[kv.strip().split(<span class="string">':'</span>)[<span class="number">0</span>]] = kv.split(<span class="string">':'</span>)[<span class="number">1</span>][<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> kv_dict <span class="keyword">not</span> <span class="keyword">in</span> data_list:</span><br><span class="line">                data_list.append(kv_dict)</span><br><span class="line"></span><br><span class="line">            parent_id = match.group(<span class="number">1</span>).strip()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># json对象列表转换为树形json对象</span></span><br><span class="line">    data_final = ApiFuncs.list_to_tree(data_list)</span><br><span class="line">    <span class="comment"># 树形json对象按参数排序</span></span><br><span class="line">    ApiFuncs.data_sort(data_final)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data_final:</span><br><span class="line">        <span class="keyword">del</span> item[<span class="string">"parent_id"</span>]</span><br><span class="line"></span><br><span class="line">    session.release()</span><br><span class="line">    result[<span class="string">"data"</span>] = data_final</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">session.release()</span><br><span class="line">result[<span class="string">"errorcode"</span>] = <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>将json对象列表转换为树形json对象的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiFuncs</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list_to_tree</span><span class="params">(data)</span>:</span></span><br><span class="line">        root = []</span><br><span class="line">        node = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">if</span> d.get(<span class="string">"parent_id"</span>) == <span class="string">'0'</span>:</span><br><span class="line">                root.append(d)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node.append(d)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> root:</span><br><span class="line">            ApiFuncs.add_node(p, node)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(root) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_node</span><span class="params">(p, node)</span>:</span></span><br><span class="line">        p[<span class="string">"children"</span>] = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> node:</span><br><span class="line">            <span class="keyword">if</span> n.get(<span class="string">"parent_id"</span>) == p.get(<span class="string">"entity_id"</span>):</span><br><span class="line">                p[<span class="string">"children"</span>].append(n)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> p[<span class="string">"children"</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> t.get(<span class="string">"children"</span>):</span><br><span class="line">                t[<span class="string">"children"</span>] = []</span><br><span class="line"></span><br><span class="line">            t[<span class="string">"children"</span>].append(ApiFuncs.add_node(t, node))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> t[<span class="string">"children"</span>]:</span><br><span class="line">                <span class="keyword">del</span> t[<span class="string">"children"</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(p[<span class="string">"children"</span>]) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>将树形json对象按参数排序的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerialNameError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, message)</span>:</span></span><br><span class="line">        self.message = message</span><br><span class="line">...</span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_sort</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> elem[<span class="string">"serial"</span>] == <span class="string">"_NULL_"</span>:</span><br><span class="line">            elem[<span class="string">"serial"</span>] = <span class="string">"0"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data.sort(key=<span class="keyword">lambda</span> x: int(x[<span class="string">"serial"</span>]))</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">raise</span> SerialNameError(<span class="string">"序号似乎无效"</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"children"</span> <span class="keyword">in</span> item.keys():</span><br><span class="line">            ApiFuncs.data_sort(item[<span class="string">"children"</span>])</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="4-一般编辑接口"><a href="#4-一般编辑接口" class="headerlink" title="4.一般编辑接口"></a>4.一般编辑接口</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承BaseModel类的参数</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleEdit</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    example_kv: List[dict]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">session = connection_pool.get_session(<span class="string">'root'</span>, <span class="string">'nebula'</span>)</span><br><span class="line">session.execute(<span class="string">'USE ai_project'</span>)</span><br><span class="line"></span><br><span class="line">result = &#123;</span><br><span class="line">    <span class="string">"msg"</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">"errorcode"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> eg.example_kv:</span><br><span class="line">    <span class="comment"># 新增</span></span><br><span class="line">    <span class="keyword">if</span> item[<span class="string">"type_operation"</span>] == <span class="string">'add'</span>:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        ==========增==========</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp_id = item[<span class="string">"name"</span>] + <span class="string">"_"</span> + ApiFuncs.create_time()</span><br><span class="line">        temp_md5 = ApiFuncs.create_md5(temp_id)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检索当前编号，创建实体时对编号自增</span></span><br><span class="line">        serial_list = session.execute(</span><br><span class="line">            str(<span class="string">f'match (v:example) return v.seq;'</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        data = []</span><br><span class="line">        size = serial_list.row_size()</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(size):</span><br><span class="line">            <span class="keyword">if</span> serial_list.row_values(index)[<span class="number">0</span>].is_string():</span><br><span class="line">                data1 = serial_list.row_values(index)[<span class="number">0</span>].as_string()</span><br><span class="line">                data.append(int(data1))</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            count = max(data)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        session.execute(</span><br><span class="line">            str(<span class="string">f'INSERT VERTEX example ( name,seq ) VALUES "<span class="subst">&#123;temp_md5&#125;</span>":("<span class="subst">&#123;item[<span class="string">"name"</span>]&#125;</span>", "<span class="subst">&#123;count&#125;</span>");'</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除</span></span><br><span class="line">    <span class="keyword">elif</span> item[<span class="string">"type_operation"</span>] == <span class="string">'delete'</span>:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        ==========删==========</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        session.execute(str(<span class="string">f'DELETE VERTEX "<span class="subst">&#123;item[<span class="string">"id"</span>]&#125;</span>";'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="keyword">elif</span> item[<span class="string">"type_operation"</span>] == <span class="string">'update'</span>:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        ==========改==========</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp_md5 = item[<span class="string">"id"</span>]</span><br><span class="line"></span><br><span class="line">        session.execute(</span><br><span class="line">            str(<span class="string">f'UPDATE VERTEX ON example "<span class="subst">&#123;temp_md5&#125;</span>" SET name = "<span class="subst">&#123;item[<span class="string">"name"</span>]&#125;</span>";'</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接池</span></span><br><span class="line">session.release()</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>测试接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">'example_kv'</span>: [</span><br><span class="line">                &#123;<span class="string">"type_operation"</span>: <span class="string">"add"</span>, <span class="string">"name"</span>: <span class="string">"test"</span>&#125;,</span><br><span class="line">            &#123;...&#125;,</span><br><span class="line">            ...</span><br><span class="line">        ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body = json.dumps(data)</span><br><span class="line">response = requests.post(<span class="string">'http://127.0.0.1:8888/example'</span>, data=body)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h2 id="5-功能函数"><a href="#5-功能函数" class="headerlink" title="5.功能函数"></a>5.功能函数</h2><p>查找树型json结构中关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_name</span><span class="params">(json_data, e)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> json_data:</span><br><span class="line">        match = re.search(e, element[<span class="string">"name"</span>])</span><br><span class="line">        <span class="keyword">if</span> match:</span><br><span class="line">            id_collect.append(element[<span class="string">"entity_id"</span>])</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"children"</span> <span class="keyword">in</span> element.keys():</span><br><span class="line">            find_name(element[<span class="string">"children"</span>], e)</span><br><span class="line">    <span class="keyword">return</span> id_collect</span><br></pre></td></tr></table></figure><p>分页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Depends</span><br><span class="line"><span class="keyword">from</span> fastapi_pagination <span class="keyword">import</span> paginate, add_pagination</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, Generic, Sequence</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Query</span><br><span class="line"><span class="keyword">from</span> fastapi_pagination.bases <span class="keyword">import</span> AbstractPage, AbstractParams, RawParams</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">"T"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Params</span><span class="params">(BaseModel, AbstractParams)</span>:</span></span><br><span class="line">    page: int = Query(<span class="number">1</span>, ge=<span class="number">1</span>, description=<span class="string">"Page number"</span>)</span><br><span class="line">    size: int = Query(<span class="number">17</span>, gt=<span class="number">0</span>, le=<span class="number">100</span>, description=<span class="string">"Page size"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_raw_params</span><span class="params">(self)</span> -&gt; RawParams:</span></span><br><span class="line">        <span class="keyword">return</span> RawParams(</span><br><span class="line">            limit=self.size,</span><br><span class="line">            offset=self.size * (self.page - <span class="number">1</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span><span class="params">(AbstractPage[T], Generic[T])</span>:</span></span><br><span class="line">    results: Sequence[T]</span><br><span class="line">    total: int</span><br><span class="line">    page: int</span><br><span class="line">    size: int</span><br><span class="line">    next: str</span><br><span class="line">    previous: str</span><br><span class="line">    total_pages: int</span><br><span class="line"></span><br><span class="line">    __params_type__ = Params</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            cls,</span></span></span><br><span class="line"><span class="function"><span class="params">            results: results,</span></span></span><br><span class="line"><span class="function"><span class="params">            total: int,</span></span></span><br><span class="line"><span class="function"><span class="params">            params: Params,</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> -&gt; Page[T]:</span></span><br><span class="line">        page = params.page</span><br><span class="line">        size = params.size</span><br><span class="line">        total_pages = math.ceil(total / params.size)</span><br><span class="line">        next = <span class="string">f"?page=<span class="subst">&#123;page + <span class="number">1</span>&#125;</span>&amp;size=<span class="subst">&#123;size&#125;</span>"</span> <span class="keyword">if</span> (page + <span class="number">1</span>) &lt;= total_pages <span class="keyword">else</span> <span class="string">"null"</span></span><br><span class="line">        previous = <span class="string">f"?page=<span class="subst">&#123;page - <span class="number">1</span>&#125;</span>&amp;size=<span class="subst">&#123;size&#125;</span>"</span> <span class="keyword">if</span> (page - <span class="number">1</span>) &gt;= <span class="number">1</span> <span class="keyword">else</span> <span class="string">"null"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls(results=results, total=total, page=params.page,</span><br><span class="line">                   size=params.size,</span><br><span class="line">                   next=next,</span><br><span class="line">                   previous=previous,</span><br><span class="line">                   total_pages=total_pages)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    sample_id: str</span><br><span class="line">    sample_name: str</span><br><span class="line">    time: str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sample_data = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"sample_id"</span>: <span class="string">"000001"</span>,</span><br><span class="line">      <span class="string">"sample_name"</span>: <span class="string">"test1"</span>,</span><br><span class="line">      <span class="string">"time"</span>: <span class="string">"2022-08-11 21:15:33"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"sample_id"</span>: <span class="string">"000002"</span>,</span><br><span class="line">      <span class="string">"sample_name"</span>: <span class="string">"test2"</span>,</span><br><span class="line">      <span class="string">"time"</span>: <span class="string">"2022-08-12 13:45:56"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"sample_id"</span>: <span class="string">"000003"</span>,</span><br><span class="line">      <span class="string">"sample_name"</span>: <span class="string">"test3"</span>,</span><br><span class="line">      <span class="string">"time"</span>: <span class="string">"2022-08-12 13:45:59"</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get('/sample', response_model=Page[User])</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_users</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> paginate(sample_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_pagination(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app=<span class="string">"1:app"</span>, reload=<span class="literal">True</span>, host=<span class="string">'127.0.0.1'</span>, port=<span class="number">9999</span>)</span><br></pre></td></tr></table></figure><h1 id="项目级"><a href="#项目级" class="headerlink" title="项目级"></a>项目级</h1><h3 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h3><font color="#008080">│  api_class.py</font><br><font color="#008080">│  main.py</font><br><font color="#008080">│</font><br><font color="#008080">├─api</font><br><font color="#008080">│  │  nebuladb.py</font><br><font color="#008080">│  │  proj_1.py</font><br><font color="#008080">│  │  proj_2.py</font><br><font color="#008080">│  │  __init__.py</font><br><font color="#008080">│  │</font><br><font color="#008080">│  └─__pycache__</font><br><font color="#008080">│          nebuladb.cpython-39.pyc</font><br><font color="#008080">│          proj_1cpython-39.pyc</font><br><font color="#008080">│          proj_2.cpython-39.pyc</font><br><font color="#008080">│          __init__.cpython-39.pyc</font><br><font color="#008080">│</font><br><font color="#008080">├─data</font><br><font color="#008080">│      nebula_data.txt</font><br><font color="#008080">│</font><br><font color="#008080">├─logs</font><br><font color="#008080">│      2022-xx-01.txt</font><br><font color="#008080">│      2022-xx-02.txt</font><br><font color="#008080">│      2022-xx-03.txt</font><br><font color="#008080">│      2022-xx-04.txt</font><br><font color="#008080">│</font><br><font color="#008080">├─scripts</font><br><font color="#008080">│      post_1.py</font><br><font color="#008080">│      test_1.py</font><br><font color="#008080">│</font><br><font color="#008080">├─utils</font><br><font color="#008080">│  │  client.py</font><br><font color="#008080">│  │  creat_data.py</font><br><font color="#008080">│  │  log.py</font><br><font color="#008080">│  │  snapshot_day_by_day.py</font><br><font color="#008080">│  │  __init__.py</font><br><font color="#008080">│  │</font><br><font color="#008080">│  └─__pycache__</font><br><font color="#008080">│          log.cpython-39.pyc</font><br><font color="#008080">│          __init__.cpython-39.pyc</font><br><font color="#008080">│</font><br><font color="#008080">└─__pycache__</font><br><font color="#008080">        api_class.cpython-39.pyc</font><br><font color="#008080">        main.cpython-39.pyc</font><h3 id="主函数main-py"><a href="#主函数main-py" class="headerlink" title="主函数main.py"></a>主函数main.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> main</span><br><span class="line"><span class="keyword">from</span> fastapi_pagination <span class="keyword">import</span> add_pagination</span><br><span class="line"></span><br><span class="line">app_router = main()</span><br><span class="line">add_pagination(app_router)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app=<span class="string">"main:app_router"</span>, reload=<span class="literal">True</span>, debug=<span class="literal">True</span>, host=<span class="string">'0.0.0.0'</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h3 id="日志utils-log-py"><a href="#日志utils-log-py" class="headerlink" title="日志utils/log.py"></a>日志utils/log.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogInit</span><span class="params">(object)</span>:</span></span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        _log_dir = os.path.join(os.path.dirname(__file__), <span class="string">'../logs'</span>)</span><br><span class="line">        _log_name = time.strftime(<span class="string">'%Y-%m-%d'</span>, time.localtime(time.time())) + <span class="string">'.txt'</span></span><br><span class="line"></span><br><span class="line">        self.logger = logging.getLogger(_log_name)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line">        formatter = logging.Formatter(</span><br><span class="line">            <span class="string">'%(asctime)s - %(levelname)s - %(filename)s - %(funcName)s - %(lineno)s - %(message)s'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.logger.handlers:</span><br><span class="line">            file_log_handler = logging.handlers.RotatingFileHandler(os.path.join(_log_dir, _log_name),</span><br><span class="line">                                                                    maxBytes=<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>, backupCount=<span class="number">3</span>,</span><br><span class="line">                                                                    encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">            file_log_handler.setLevel(logging.INFO)</span><br><span class="line">            file_log_handler.setFormatter(formatter)</span><br><span class="line">            self.logger.addHandler(file_log_handler)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_logger</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> LogInit.__instance:</span><br><span class="line">            LogInit.__instance = LogInit()</span><br><span class="line">        <span class="keyword">return</span> LogInit.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger = LogInit.set_logger().logger</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.log <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"信息"</span>)</span><br><span class="line">logger.warning(<span class="string">"警告"</span>)</span><br><span class="line">logger.error(<span class="string">"错误"</span>)</span><br></pre></td></tr></table></figure><h3 id="数据库配置api-nebuladb-py"><a href="#数据库配置api-nebuladb-py" class="headerlink" title="数据库配置api/nebuladb.py"></a>数据库配置api/nebuladb.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nebula2.Config <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> nebula2.gclient.net <span class="keyword">import</span> ConnectionPool</span><br><span class="line"></span><br><span class="line"><span class="comment"># NEBULA</span></span><br><span class="line">config = Config()</span><br><span class="line">config.max_connection_pool_size = <span class="number">10</span></span><br><span class="line">config.timeout = <span class="number">60000</span></span><br><span class="line">config.idle_time = <span class="number">0</span></span><br><span class="line">config.interval_check = <span class="number">-1</span></span><br><span class="line">connection_pool = ConnectionPool()</span><br><span class="line">ok = connection_pool.init([(<span class="string">'192.168.80.128'</span>, <span class="number">9669</span>)], config)</span><br></pre></td></tr></table></figure><h3 id="图谱快照保存脚本utils-snapshot-day-by-day-py"><a href="#图谱快照保存脚本utils-snapshot-day-by-day-py" class="headerlink" title="图谱快照保存脚本utils/snapshot_day_by_day.py"></a>图谱快照保存脚本utils/snapshot_day_by_day.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> nebula2.gclient.net <span class="keyword">import</span> ConnectionPool</span><br><span class="line"><span class="keyword">from</span> nebula2.Config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config = Config()</span><br><span class="line">config.max_connection_pool_size = <span class="number">10</span></span><br><span class="line">config.timeout = <span class="number">60000</span></span><br><span class="line">config.idle_time = <span class="number">0</span></span><br><span class="line">config.interval_check = <span class="number">-1</span></span><br><span class="line">connection_pool = ConnectionPool()</span><br><span class="line">ok = connection_pool.init([(<span class="string">'192.168.80.128'</span>, <span class="number">9669</span>)], config)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_snapshot</span><span class="params">()</span>:</span></span><br><span class="line">    session = connection_pool.get_session(<span class="string">'root'</span>, <span class="string">'nebula'</span>)</span><br><span class="line">    session.execute(<span class="string">'USE ai_project'</span>)</span><br><span class="line">    session.execute(str(<span class="string">'CREATE SNAPSHOT'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_snapshot</span><span class="params">()</span>:</span></span><br><span class="line">    session = connection_pool.get_session(<span class="string">'root'</span>, <span class="string">'nebula'</span>)</span><br><span class="line">    session.execute(<span class="string">'USE ai_project'</span>)</span><br><span class="line">    data = session.execute(str(<span class="string">'SHOW SNAPSHOTS'</span>))</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data.is_empty():</span><br><span class="line">        size = data.row_size()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(size):</span><br><span class="line">            data1 = data.row_values(index)[<span class="number">0</span>].as_string()</span><br><span class="line">            datas.append(data1)</span><br><span class="line">    <span class="keyword">if</span> len(datas) &gt; <span class="number">3</span>:</span><br><span class="line">        data_final = datas[:<span class="number">-3</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data_final:</span><br><span class="line">            session.execute(str(<span class="string">f'DROP SNAPSHOT <span class="subst">&#123;i&#125;</span>'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">schedule.every().day.at(<span class="string">"22:00"</span>).do(add_snapshot)</span><br><span class="line">schedule.every().day.at(<span class="string">"22:00"</span>).do(del_snapshot)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    schedule.run_pending()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="api包api-init-py配置"><a href="#api包api-init-py配置" class="headerlink" title="api包api/__init__.py配置"></a>api包api/__init__.py配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> fastapi.middleware.cors <span class="keyword">import</span> CORSMiddleware</span><br><span class="line"><span class="keyword">from</span> api.stdlib <span class="keyword">import</span> stdlib_router</span><br><span class="line"><span class="keyword">from</span> api.quota <span class="keyword">import</span> quota_router</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    app = FastAPI(docs_url=<span class="literal">None</span>, redoc_url=<span class="literal">None</span>)</span><br><span class="line">    app_cors(app)</span><br><span class="line">    app_stdlib(app)</span><br><span class="line">    app_quota(app)</span><br><span class="line">    app_ocr(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_cors</span><span class="params">(app: FastAPI)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    CORS</span></span><br><span class="line"><span class="string">    :param app:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    origins = [</span><br><span class="line">        <span class="string">"*"</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    app.add_middleware(</span><br><span class="line">        CORSMiddleware,</span><br><span class="line">        allow_origins=origins,</span><br><span class="line">        allow_credentials=<span class="literal">True</span>,</span><br><span class="line">        allow_methods=[<span class="string">"*"</span>],</span><br><span class="line">        allow_headers=[<span class="string">"*"</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_proj_1</span><span class="params">(app: FastAPI)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    项目1</span></span><br><span class="line"><span class="string">    :param app:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    app.include_router(proj_1_router)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_proj_2</span><span class="params">(app: FastAPI)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    项目2</span></span><br><span class="line"><span class="string">    :param app:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    app.include_router(proj_2_router)</span><br></pre></td></tr></table></figure><h3 id="项目接口api-proj-1-2-py"><a href="#项目接口api-proj-1-2-py" class="headerlink" title="项目接口api/proj_1(2).py"></a>项目接口api/proj_1(2).py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> utils.log <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> api_class <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .nebuladb <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">proj_1_router = APIRouter(</span><br><span class="line">    prefix=<span class="string">"/api"</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@stdlib_router.api_route("/project/standard", methods=['GET'])</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_project_standard</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取工程规范</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 从连接池中获取会话</span></span><br><span class="line">    session = connection_pool.get_session(<span class="string">'root'</span>, <span class="string">'nebula'</span>)</span><br><span class="line">    session.execute(<span class="string">'USE ai_project'</span>)</span><br><span class="line"></span><br><span class="line">    data_final = []</span><br><span class="line">    errorcode = <span class="number">0</span></span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">"data"</span>: data_final,</span><br><span class="line">        <span class="string">"errorcode"</span>: errorcode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 举例，查询标签example</span></span><br><span class="line">    data_select = session.execute(</span><br><span class="line">        str(<span class="string">f'match (v:example) return id(v),v.name;'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询出错，错误代码1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data_select.is_succeeded():</span><br><span class="line">        session.release()</span><br><span class="line">        result[<span class="string">"errorcode"</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询结果不为空，显示数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data_select.is_empty():</span><br><span class="line">        size = data_select.row_size()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(size):</span><br><span class="line">            data1 = data_select.row_values(index)[<span class="number">0</span>].as_string()</span><br><span class="line">            data2 = data_select.row_values(index)[<span class="number">1</span>].as_string()</span><br><span class="line">            data_dict = &#123;</span><br><span class="line">                <span class="string">"entity_id"</span>: data1,</span><br><span class="line">                <span class="string">"name"</span>: data2,</span><br><span class="line">            &#125;</span><br><span class="line">            data_final.append(data_dict)</span><br><span class="line"></span><br><span class="line">        session.release()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询类型下实体为空，错误代码2</span></span><br><span class="line">    session.release()</span><br><span class="line">    result[<span class="string">"errorcode"</span>] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;普通接口&quot;&gt;&lt;a href=&quot;#普通接口&quot; class=&quot;headerlink&quot; title=&quot;普通接口&quot;&gt;&lt;/a&gt;普通接口&lt;/h1&gt;&lt;h2 id=&quot;1-导入fastapi、连接nebula连接池&quot;&gt;&lt;a href=&quot;#1-导入fastapi、连接nebula连接池&quot; class=&quot;headerlink&quot; title=&quot;1.导入fastapi、连接nebula连接池&quot;&gt;&lt;/a&gt;1.导入fastapi、连接nebula连接池&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; fastapi &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; FastAPI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; nebula2.gclient.net &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ConnectionPool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; nebula2.Config &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 关闭在线文档，防止攻击&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app_router = FastAPI(docs_url=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, redoc_url=&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config = Config()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.max_connection_pool_size = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 连接超时时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.timeout = &lt;span class=&quot;number&quot;&gt;60000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 关闭空闲连接时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.idle_time = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 检查空闲连接时间间隔&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.interval_check = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 初始化连接池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connection_pool = ConnectionPool()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果给定的服务器正常，则返回true，否则返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ok = connection_pool.init([(&lt;span class=&quot;string&quot;&gt;&#39;host&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9669&lt;/span&gt;)], config)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; uvicorn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uvicorn.run(app=&lt;span class=&quot;string&quot;&gt;&quot;nebula_api:app_router&quot;&lt;/span&gt;, reload=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;, debug=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;, host=host, port=port)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-CORS跨域访问设置&quot;&gt;&lt;a href=&quot;#2-CORS跨域访问设置&quot; class=&quot;headerlink&quot; title=&quot;2.CORS跨域访问设置&quot;&gt;&lt;/a&gt;2.CORS跨域访问设置&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; fastapi.middleware.cors &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; CORSMiddleware&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CORS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;origins = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app_router.add_middleware(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CORSMiddleware,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allow_origins=origins,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allow_credentials=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allow_methods=[&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allow_headers=[&lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
    <category term="nebula" scheme="http://yoursite.com/tags/nebula/"/>
    
    <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>PaddleOCR表格识别</title>
    <link href="http://yoursite.com/2022/07/21/PaddleOCR%E8%A1%A8%E6%A0%BC%E8%AF%86%E5%88%AB/"/>
    <id>http://yoursite.com/2022/07/21/PaddleOCR%E8%A1%A8%E6%A0%BC%E8%AF%86%E5%88%AB/</id>
    <published>2022-07-21T06:15:22.000Z</published>
    <updated>2022-09-22T03:43:56.275Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>PaddleOCR2.5根目录下的ppstructure文件模块是PaddleOCR提供的一个可用于复杂文档结构分析处理的OCR工具包<br>github文档页面：<a href="https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.5/ppstructure/README_ch.md" target="_blank" rel="noopener">https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.5/ppstructure/README_ch.md</a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p><strong><font size="4" color="orange">·</font></strong> 安装paddleocr version&gt;=2.5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install &quot;paddleocr&gt;=2.5&quot;</span><br></pre></td></tr></table></figure></p><p><strong><font size="4" color="orange">·</font></strong> 安装版面分析依赖包layoutparser<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U https://paddleocr.bj.bcebos.com/whl/layoutparser-0.0.0-py3-none-any.whl</span><br></pre></td></tr></table></figure></p><p><strong><font size="4" color="orange">·</font></strong> 安装DocVQA依赖包paddlenlp（DocVQA功能，选装）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paddlenlp</span><br></pre></td></tr></table></figure></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>在PaddleOCR/ppstructure目录下进入CMD命令行，或者创建python脚本启动<br><strong><font size="4" color="orange">·</font></strong> 表格识别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paddleocr --image_dir=docs/table/table.jpg --type=structure --layout=false</span><br></pre></td></tr></table></figure><p>python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> paddleocr <span class="keyword">import</span> PPStructure,save_structure_res</span><br><span class="line"></span><br><span class="line">table_engine = PPStructure(layout=<span class="literal">False</span>, show_log=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">save_folder = <span class="string">'./output'</span></span><br><span class="line">img_path = <span class="string">'PaddleOCR/ppstructure/docs/table/table.jpg'</span></span><br><span class="line">img = cv2.imread(img_path)</span><br><span class="line">result = table_engine(img)</span><br><span class="line">save_structure_res(result, save_folder, os.path.basename(img_path).split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">    line.pop(<span class="string">'img'</span>)</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure><p><strong><font size="4" color="orange">·</font></strong> 版面分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paddleocr --image_dir=docs/table/1.png --type=structure --table=false --ocr=false</span><br></pre></td></tr></table></figure><p>python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> paddleocr <span class="keyword">import</span> PPStructure,save_structure_res</span><br><span class="line"></span><br><span class="line">table_engine = PPStructure(table=<span class="literal">False</span>, ocr=<span class="literal">False</span>, show_log=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">save_folder = <span class="string">'./output'</span></span><br><span class="line">img_path = <span class="string">'PaddleOCR/ppstructure/docs/table/1.png'</span></span><br><span class="line">img = cv2.imread(img_path)</span><br><span class="line">result = table_engine(img)</span><br><span class="line">save_structure_res(result, save_folder, os.path.basename(img_path).split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">    line.pop(<span class="string">'img'</span>)</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure><p><strong><font size="4" color="orange">·</font></strong> 版面分析+表格识别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paddleocr --image_dir=docs/table/1.png --type=structure</span><br></pre></td></tr></table></figure><p>python脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> paddleocr <span class="keyword">import</span> PPStructure, draw_structure_result, save_structure_res</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">table_engine = PPStructure(show_log=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">save_folder = <span class="string">'./output'</span></span><br><span class="line">img_path = <span class="string">'./ppstructure/docs/table/table.jpg'</span></span><br><span class="line">img = cv2.imread(img_path)</span><br><span class="line">result = table_engine(img)</span><br><span class="line">save_structure_res(result, save_folder, os.path.basename(img_path).split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">    line.pop(<span class="string">'img'</span>)</span><br><span class="line">    print(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">font_path = <span class="string">'./doc/fonts/simfang.ttf'</span></span><br><span class="line">image = Image.open(img_path).convert(<span class="string">'RGB'</span>)</span><br><span class="line">im_show = draw_structure_result(image, result, font_path=font_path)</span><br><span class="line">im_show = Image.fromarray(im_show)</span><br><span class="line">im_show.save(<span class="string">'result.jpg'</span>)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>参数说明</p><table><thead><tr><th>字段</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>output</td><td>excel和识别结果保存的地址</td><td>./output/table</td></tr><tr><td>table_max_len</td><td>表格结构模型预测时，图像的长边resize尺度</td><td>488</td></tr><tr><td>table_model_dir</td><td>表格结构模型 inference 模型地址</td><td>None</td></tr><tr><td>table_char_dict_path</td><td>表格结构模型所用字典地址</td><td>../ppocr/utils/dict/table_structure_dict.txt</td></tr><tr><td>layout_path_model</td><td>版面分析模型模型地址，可以为在线地址或者本地地址，当为本地地址时，需要指定 layout_label_map, 命令行模式下可通过–layout_label_map=’{0: “Text”, 1: “Title”, 2: “List”, 3:”Table”, 4:”Figure”}’ 指定</td><td>lp://PubLayNet/ppyolov2_r50vd_dcn_365e_publaynet/config</td></tr><tr><td>layout_label_map</td><td>版面分析模型模型label映射字典</td><td>None</td></tr><tr><td>model_name_or_path</td><td>VQA SER模型地址</td><td>None</td></tr><tr><td>max_seq_length</td><td>VQA SER模型最大支持token长度</td><td>512</td></tr><tr><td>label_map_path</td><td>VQA SER 标签文件地址</td><td>./vqa/labels/labels_ser.txt</td></tr><tr><td>layout</td><td>前向中是否执行版面分析</td><td>True</td></tr><tr><td>table</td><td>前向中是否执行表格识别</td><td>True</td></tr><tr><td>ocr</td><td>对于版面分析中的非表格区域，是否执行ocr。当layout为False时会被自动设置为False</td><td>True</td></tr><tr><td>structure_version</td><td>表格结构化模型版本，可选 PP-STRUCTURE。PP-STRUCTURE支持表格结构化模型</td><td>pp-structure</td></tr></tbody></table><h2 id="模型下载"><a href="#模型下载" class="headerlink" title="模型下载"></a>模型下载</h2><table><thead><tr><th>模型类型</th><th>模型名称</th><th>模型简介</th><th>下载地址</th></tr></thead><tbody><tr><td>版面分析模型</td><td>ppyolov2_r50vd_dcn_365e_publaynet</td><td>PubLayNet 数据集训练的版面分析模型，可以划分文字、标题、表格、图片以及列表5类区域</td><td><a href="https://paddle-model-ecology.bj.bcebos.com/model/layout-parser/ppyolov2_r50vd_dcn_365e_publaynet.tar" target="_blank" rel="noopener">推理模型</a>/<a href="https://paddle-model-ecology.bj.bcebos.com/model/layout-parser/ppyolov2_r50vd_dcn_365e_publaynet_pretrained.pdparams" target="_blank" rel="noopener">训练模型</a></td></tr><tr><td>OCR模型</td><td>ch_PP-OCRv3_det_infer</td><td>PubLayNet数据集训练的中英文超轻量PP-OCRv3模型</td><td><a href="https://paddleocr.bj.bcebos.com/PP-OCRv3/chinese/ch_PP-OCRv3_det_infer.tar" target="_blank" rel="noopener">推理模型</a>/<a href="https://paddleocr.bj.bcebos.com/PP-OCRv3/chinese/ch_PP-OCRv3_det_distill_train.tar" target="_blank" rel="noopener">训练模型</a></td></tr><tr><td>OCR模型</td><td>en_ppocr_mobile_v2.0_table_rec</td><td>PubLayNet数据集训练的中英文超轻量PP-OCRv3模型</td><td><a href="https://paddleocr.bj.bcebos.com/PP-OCRv3/chinese/ch_PP-OCRv3_rec_infer.tar" target="_blank" rel="noopener">推理模型</a>/<a href="https://paddleocr.bj.bcebos.com/PP-OCRv3/chinese/ch_PP-OCRv3_rec_train.tar" target="_blank" rel="noopener">训练模型</a></td></tr><tr><td>表格识别模型</td><td>en_ppocr_mobile_v2.0_table_structure</td><td>PubLayNet数据集训练的英文表格场景的表格结构预测</td><td><a href="https://paddleocr.bj.bcebos.com/dygraph_v2.0/table/en_ppocr_mobile_v2.0_table_structure_infer.tar" target="_blank" rel="noopener">推理模型</a>/<a href="https://paddleocr.bj.bcebos.com/dygraph_v2.1/table/en_ppocr_mobile_v2.0_table_structure_train.tar" target="_blank" rel="noopener">训练模型</a></td></tr></tbody></table><h2 id="预测示例（以版面分析-表格为例）"><a href="#预测示例（以版面分析-表格为例）" class="headerlink" title="预测示例（以版面分析+表格为例）"></a>预测示例（以版面分析+表格为例）</h2><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paddleocr --image_dir=docs/table/table.jpg --type=structure --layout=false</span><br></pre></td></tr></table></figure><p><img src="/2022/07/21/PaddleOCR表格识别/A.png" alt></p><h3 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> paddleocr <span class="keyword">import</span> PPStructure, draw_structure_result, save_structure_res</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">table_engine = PPStructure(show_log=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">save_folder = <span class="string">'./output'</span></span><br><span class="line">img_path = <span class="string">'./ppstructure/docs/table/table.jpg'</span></span><br><span class="line">img = cv2.imread(img_path)</span><br><span class="line">result = table_engine(img)</span><br><span class="line">save_structure_res(result, save_folder, os.path.basename(img_path).split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> result:</span><br><span class="line">    line.pop(<span class="string">'img'</span>)</span><br><span class="line">    print(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">font_path = <span class="string">'./doc/fonts/simfang.ttf'</span></span><br><span class="line">image = Image.open(img_path).convert(<span class="string">'RGB'</span>)</span><br><span class="line">im_show = draw_structure_result(image, result, font_path=font_path)</span><br><span class="line">im_show = Image.fromarray(im_show)</span><br><span class="line">im_show.save(<span class="string">'result.jpg'</span>)</span><br></pre></td></tr></table></figure><p><img src="/2022/07/21/PaddleOCR表格识别/B.png" alt></p><h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><p>安装structure_system</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hub install deploy\hubserving\structure_system\</span><br></pre></td></tr></table></figure><p>修改<font color="#00BFFF">config.json</font>，不使用GPU</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"modules_info"</span>: &#123;</span><br><span class="line">        <span class="attr">"structure_system"</span>: &#123;</span><br><span class="line">            <span class="attr">"init_args"</span>: &#123;</span><br><span class="line">                <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">                <span class="attr">"use_gpu"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"predict_args"</span>: &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">8870</span>,</span><br><span class="line">    <span class="attr">"use_multiprocess"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hub serving start -c ./deploy/hubserving/structure_system/config.json</span><br></pre></td></tr></table></figure><p>版面分析+表格识别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/test_hubserving.py --server_url http://127.0.0.1:8870/predict/structure_system --image_dir ppstructure/docs/table/table.jpg</span><br></pre></td></tr></table></figure><p><img src="/2022/07/21/PaddleOCR表格识别/C.png" alt></p><p>将识别得到的html标签内容复制另存为.html文件进行对比得到如下结果：</p><p><img src="/2022/07/21/PaddleOCR表格识别/D.png" alt></p><h3 id="在Pycharm中部署服务并识别"><a href="#在Pycharm中部署服务并识别" class="headerlink" title="在Pycharm中部署服务并识别"></a>在Pycharm中部署服务并识别</h3><p>进入<font color="#008080">deploy/hubserving/structure_system/</font><font color="orange">params.py</font>，修改默认模型位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">from</span> deploy.hubserving.structure_table.params <span class="keyword">import</span> read_params <span class="keyword">as</span> table_read_params</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_params</span><span class="params">()</span>:</span></span><br><span class="line">    cfg = table_read_params()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># params for layout parser model</span></span><br><span class="line">    cfg.layout_path_model = <span class="string">'lp://PubLayNet/ppyolov2_r50vd_dcn_365e_publaynet/config'</span></span><br><span class="line">    cfg.layout_label_map = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    cfg.mode = <span class="string">'structure'</span></span><br><span class="line">    cfg.output = <span class="string">'./output'</span></span><br><span class="line">    <span class="keyword">return</span> cfg</span><br></pre></td></tr></table></figure><p>可以看到，<font color="#008080">structure_system</font>/<font color="orange">params.py</font>引用了<font color="#008080">structure_table</font>/<font color="orange">params.py</font>下的<font color="orange">read_params</font>参数，再进入到<font color="#008080">structure_table</font>/<font color="orange">params.py</font>文件中，该文件则是引用了<font color="#008080">ocr_system</font>/<font color="orange">params.py</font>下的<font color="orange">read_params</font>参数，这些参数主要用作OCR识别，所以，如果在不同场景下要使用不同模型时，最好将各个<font color="orange">params.py</font>重写。修改后的文件如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># structure_system/params.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_params</span><span class="params">()</span>:</span></span><br><span class="line">    cfg = Config()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#params for text detector</span></span><br><span class="line">    cfg.det_algorithm = <span class="string">"DB"</span></span><br><span class="line">    cfg.det_model_dir = <span class="string">"C:/Users/9.9/.paddleocr/whl/det/ch/ch_PP-OCRv3_det_infer"</span></span><br><span class="line">    cfg.det_limit_side_len = <span class="number">960</span></span><br><span class="line">    cfg.det_limit_type = <span class="string">'max'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#DB parmas</span></span><br><span class="line">    cfg.det_db_thresh = <span class="number">0.3</span></span><br><span class="line">    cfg.det_db_box_thresh = <span class="number">0.5</span></span><br><span class="line">    cfg.det_db_unclip_ratio = <span class="number">1.6</span></span><br><span class="line">    cfg.use_dilation = <span class="literal">False</span></span><br><span class="line">    cfg.det_db_score_mode = <span class="string">"fast"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#EAST parmas</span></span><br><span class="line">    cfg.det_east_score_thresh = <span class="number">0.8</span></span><br><span class="line">    cfg.det_east_cover_thresh = <span class="number">0.1</span></span><br><span class="line">    cfg.det_east_nms_thresh = <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#params for text recognizer</span></span><br><span class="line">    cfg.rec_algorithm = <span class="string">"CRNN"</span></span><br><span class="line">    cfg.rec_model_dir = <span class="string">r"C:/Users/9.9/.paddleocr/whl/rec/ch/ch_PP-OCRv3_rec_infer/"</span></span><br><span class="line"></span><br><span class="line">    cfg.rec_image_shape = <span class="string">"3, 48, 320"</span></span><br><span class="line">    cfg.rec_batch_num = <span class="number">6</span></span><br><span class="line">    cfg.max_text_length = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">    cfg.rec_char_dict_path = <span class="string">r"C:/Users/9.9/software/PaddleOCR-release-2.5/ppocr/utils/ppocr_keys_v1.txt"</span></span><br><span class="line">    cfg.use_space_char = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#params for text classifier</span></span><br><span class="line">    cfg.use_angle_cls = <span class="literal">True</span></span><br><span class="line">    cfg.cls_model_dir = <span class="string">r"C:/Users/9.9/software/PaddleOCR-release-2.5/inference/ch_ppocr_mobile_v2.0_cls_infer/"</span></span><br><span class="line">    cfg.cls_image_shape = <span class="string">"3, 48, 192"</span></span><br><span class="line">    cfg.label_list = [<span class="string">'0'</span>, <span class="string">'180'</span>]</span><br><span class="line">    cfg.cls_batch_num = <span class="number">30</span></span><br><span class="line">    cfg.cls_thresh = <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line">    cfg.use_pdserving = <span class="literal">False</span></span><br><span class="line">    cfg.use_tensorrt = <span class="literal">False</span></span><br><span class="line">    cfg.drop_score = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># params for table structure model</span></span><br><span class="line">    cfg.table_max_len = <span class="number">488</span></span><br><span class="line">    cfg.table_model_dir = <span class="string">r'C:\Users\9.9\.paddleocr\whl\table\en_ppocr_mobile_v2.0_table_structure_infer/'</span></span><br><span class="line">    cfg.table_char_dict_path = <span class="string">'C:/Users/9.9/software/PaddleOCR-release-2.5/ppocr/utils/dict/table_structure_dict.txt'</span></span><br><span class="line">    cfg.show_log = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># params for layout parser model</span></span><br><span class="line">    cfg.layout_path_model = <span class="string">'lp://PubLayNet/ppyolov2_r50vd_dcn_365e_publaynet/config'</span></span><br><span class="line">    <span class="comment"># cfg.layout_path_model = './inference/ppyolov2_r50vd_dcn_365e_publaynet'</span></span><br><span class="line">    cfg.layout_label_map = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    cfg.mode = <span class="string">'structure'</span></span><br><span class="line">    cfg.output = <span class="string">'./output'</span></span><br><span class="line">    <span class="keyword">return</span> cfg</span><br></pre></td></tr></table></figure><p>再新建python文件用于提取具体内容，通过pandas分析得到结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_ocr</span><span class="params">(cmd: str)</span>:</span></span><br><span class="line">    pip = os.popen(cmd)</span><br><span class="line">    <span class="keyword">return</span> pip.buffer.read().decode(encoding=<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img_dir = <span class="string">r"C:\Users\9.9\software\PaddleOCR-release-2.5\ppstructure\docs\table\table.jpg"</span></span><br><span class="line">ocr_dir = <span class="string">r"python C:\Users\9.9\software\PaddleOCR-release-2.5\tools\test_hubserving.py"</span></span><br><span class="line">res = exec_ocr(<span class="string">fr"<span class="subst">&#123;ocr_dir&#125;</span> --server_url http://127.0.0.1:8870/predict/structure_system --image_dir <span class="subst">&#123;img_dir&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"system_res.txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res)</span><br><span class="line"></span><br><span class="line">ocr_file = open(<span class="string">"system_res.txt"</span>, <span class="string">"r"</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">alldata_res = ocr_file.read()</span><br><span class="line">system_res = re.search(<span class="string">r"'html': '(.*)'&#125;, 'type': 'Table'&#125;"</span>, alldata_res)</span><br><span class="line">print(system_res.group(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"system_res.html"</span>, <span class="string">"w"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(system_res.group(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"system_res.html"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    df = pd.read_html(f.read(), encoding=<span class="string">'utf-8'</span>, index_col=<span class="number">0</span>)[<span class="number">0</span>]</span><br><span class="line">    df = df.loc[:, ~df.columns.str.contains(<span class="string">"^Unnamed"</span>)]</span><br><span class="line"></span><br><span class="line">print(df)</span><br><span class="line">df.to_csv(<span class="string">'system_res.csv'</span>)</span><br></pre></td></tr></table></figure><p><img src="/2022/07/21/PaddleOCR表格识别/E.png" alt></p><p><img src="/2022/07/21/PaddleOCR表格识别/F.png" alt></p><p><img src="/2022/07/21/PaddleOCR表格识别/G.png" alt></p><h2 id="PP-Structure表格模型训练"><a href="#PP-Structure表格模型训练" class="headerlink" title="PP-Structure表格模型训练"></a>PP-Structure表格模型训练</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>前往Paddle的github主页下载安装PaddleDetection：<a href="https://github.com/PaddlePaddle/PaddleDetection" target="_blank" rel="noopener">https://github.com/PaddlePaddle/PaddleDetection</a>，并执行<code>pip install -r requirements.txt</code>安装其他依赖</p><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>下载<a href="https://github.com/ibm-aur-nlp/PubLayNet" target="_blank" rel="noopener">PubLayNet</a>数据集，可通过链接（<a href="https://dax-cdn.cdn.appdomain.cloud/dax-publaynet/1.0.0/publaynet.tar.gz?_ga=2.104193024.1076900768.1622560733-649911202.1622560733" target="_blank" rel="noopener">https://dax-cdn.cdn.appdomain.cloud/dax-publaynet/1.0.0/publaynet.tar.gz?_ga=2.104193024.1076900768.1622560733-649911202.1622560733</a>）直接下载（约<font color="red">95GB</font>）</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>修改<font color="#008080">configs/ppyolo/</font><font color="#CCCCFF">ppyolov2_r50vd_dcn_365e_coco.yml</font>文件的配置进行训练：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">_BASE_:</span> <span class="string">[</span></span><br><span class="line">  <span class="string">'../datasets/coco_detection.yml'</span><span class="string">,</span>   <span class="comment"># 主要说明了训练数据和验证数据的路径</span></span><br><span class="line">  <span class="string">'../runtime.yml'</span><span class="string">,</span>                   <span class="comment"># 主要说明了公共的运行参数，比如是否使用GPU、每多少个epoch存储checkpoint等</span></span><br><span class="line">  <span class="string">'./_base_/ppyolov2_r50vd_dcn.yml'</span><span class="string">,</span>  <span class="comment"># 主要说明了学习率和优化器的配置</span></span><br><span class="line">  <span class="string">'./_base_/optimizer_365e.yml'</span><span class="string">,</span>      <span class="comment"># 主要说明模型和主干网络的情况</span></span><br><span class="line">  <span class="string">'./_base_/ppyolov2_reader.yml'</span><span class="string">,</span>     <span class="comment"># 主要说明数据读取器配置，如batch size，并发加载子进程数等，同时包含读取后预处理操作，如resize、数据增强等等</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">snapshot_epoch:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">weights:</span> <span class="string">output/ppyolov2_r50vd_dcn_365e_coco/model_final</span></span><br></pre></td></tr></table></figure><p>来到<font color="#008080">datasets/</font><font color="#CCCCFF">coco_detection.yml</font>文件中，修改下载好的训练集的位置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metric:</span> <span class="string">COCO</span></span><br><span class="line"><span class="attr">num_classes:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">TrainDataset:</span></span><br><span class="line">  <span class="type">!COCODataSet</span></span><br><span class="line">    <span class="attr">image_dir:</span> <span class="string">C:/Users/9.9/software/publaynet/train</span></span><br><span class="line">    <span class="attr">anno_path:</span> <span class="string">C:/Users/9.9/software/publaynet/train.json</span></span><br><span class="line">    <span class="attr">dataset_dir:</span> <span class="string">dataset/coco</span></span><br><span class="line">    <span class="attr">data_fields:</span> <span class="string">['image',</span> <span class="string">'gt_bbox'</span><span class="string">,</span> <span class="string">'gt_class'</span><span class="string">,</span> <span class="string">'is_crowd'</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">EvalDataset:</span></span><br><span class="line">  <span class="type">!COCODataSet</span></span><br><span class="line">    <span class="attr">image_dir:</span> <span class="string">C:/Users/9.9/software/publaynet/val</span></span><br><span class="line">    <span class="attr">anno_path:</span> <span class="string">C:/Users/9.9/software/publaynet/val.json</span></span><br><span class="line">    <span class="attr">dataset_dir:</span> <span class="string">dataset/coco</span></span><br><span class="line"></span><br><span class="line"><span class="attr">TestDataset:</span></span><br><span class="line">  <span class="type">!ImageFolder</span></span><br><span class="line">    <span class="attr">anno_path:</span> <span class="string">C:/Users/9.9/software/publaynet/val.json</span> <span class="comment"># also support txt (like VOC's label_list.txt)</span></span><br><span class="line">    <span class="attr">dataset_dir:</span> <span class="string">dataset/coco</span> <span class="comment"># if set, anno_path will be 'dataset_dir/anno_path'</span></span><br></pre></td></tr></table></figure><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/train.py -c configs/ppyolo/ppyolov2_r50vd_dcn_365e_coco.yml</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;PaddleOCR2.5根目录下的ppstructure文件模块是PaddleOCR提供的一个可用于复杂文档结构分析处理的OCR工具包&lt;br&gt;github文档页面：&lt;a href=&quot;https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.5/ppstructure/README_ch.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.5/ppstructure/README_ch.md&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;·&lt;/font&gt;&lt;/strong&gt; 安装paddleocr version&amp;gt;=2.5&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install &amp;quot;paddleocr&amp;gt;=2.5&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;·&lt;/font&gt;&lt;/strong&gt; 安装版面分析依赖包layoutparser&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install -U https://paddleocr.bj.bcebos.com/whl/layoutparser-0.0.0-py3-none-any.whl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;·&lt;/font&gt;&lt;/strong&gt; 安装DocVQA依赖包paddlenlp（DocVQA功能，选装）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install paddlenlp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; title=&quot;快速开始&quot;&gt;&lt;/a&gt;快速开始&lt;/h2&gt;&lt;p&gt;在PaddleOCR/ppstructure目录下进入CMD命令行，或者创建python脚本启动&lt;br&gt;&lt;strong&gt;&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;·&lt;/font&gt;&lt;/strong&gt; 表格识别&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;paddleocr --image_dir=docs/table/table.jpg --type=structure --layout=false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;python脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cv2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; paddleocr &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; PPStructure,save_structure_res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;table_engine = PPStructure(layout=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;, show_log=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;save_folder = &lt;span class=&quot;string&quot;&gt;&#39;./output&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img_path = &lt;span class=&quot;string&quot;&gt;&#39;PaddleOCR/ppstructure/docs/table/table.jpg&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img = cv2.imread(img_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = table_engine(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;save_structure_res(result, save_folder, os.path.basename(img_path).split(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; result:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    line.pop(&lt;span class=&quot;string&quot;&gt;&#39;img&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(line)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;·&lt;/font&gt;&lt;/strong&gt; 版面分析&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;paddleocr --image_dir=docs/table/1.png --type=structure --table=false --ocr=false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;python脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cv2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; paddleocr &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; PPStructure,save_structure_res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;table_engine = PPStructure(table=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;, ocr=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;, show_log=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;save_folder = &lt;span class=&quot;string&quot;&gt;&#39;./output&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img_path = &lt;span class=&quot;string&quot;&gt;&#39;PaddleOCR/ppstructure/docs/table/1.png&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img = cv2.imread(img_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = table_engine(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;save_structure_res(result, save_folder, os.path.basename(img_path).split(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; result:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    line.pop(&lt;span class=&quot;string&quot;&gt;&#39;img&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(line)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;·&lt;/font&gt;&lt;/strong&gt; 版面分析+表格识别&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;paddleocr --image_dir=docs/table/1.png --type=structure&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;python脚本：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; cv2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; paddleocr &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; PPStructure, draw_structure_result, save_structure_res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; PIL &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;table_engine = PPStructure(show_log=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;save_folder = &lt;span class=&quot;string&quot;&gt;&#39;./output&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img_path = &lt;span class=&quot;string&quot;&gt;&#39;./ppstructure/docs/table/table.jpg&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img = cv2.imread(img_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = table_engine(img)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;save_structure_res(result, save_folder, os.path.basename(img_path).split(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; result:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    line.pop(&lt;span class=&quot;string&quot;&gt;&#39;img&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(line)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;font_path = &lt;span class=&quot;string&quot;&gt;&#39;./doc/fonts/simfang.ttf&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;image = Image.open(img_path).convert(&lt;span class=&quot;string&quot;&gt;&#39;RGB&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;im_show = draw_structure_result(image, result, font_path=font_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;im_show = Image.fromarray(im_show)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;im_show.save(&lt;span class=&quot;string&quot;&gt;&#39;result.jpg&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://yoursite.com/categories/机器学习/"/>
    
    
    <category term="OCR" scheme="http://yoursite.com/tags/OCR/"/>
    
  </entry>
  
  <entry>
    <title>PaddleOCR</title>
    <link href="http://yoursite.com/2022/07/12/PaddleOCR/"/>
    <id>http://yoursite.com/2022/07/12/PaddleOCR/</id>
    <published>2022-07-12T06:20:14.000Z</published>
    <updated>2022-09-22T03:43:08.898Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>进入PaddleOCR的github页面（<a href="https://github.com/PaddlePaddle/PaddleOCR" target="_blank" rel="noopener">https://github.com/PaddlePaddle/PaddleOCR</a>），进行下载和解压</p><p>使用pip进行安装，这里因为速度很慢推荐使用百度源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure></p><p>安装shapely（<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a>），下载shapely对应python和系统版本的安装包（我使用的是py39，windows_64），python版本目前不能超过3.9</p><p>将下载好的Shapely-1.8.2-cp39-cp39-win_amd64.whl放进python根目录下的libs文件夹内，通过cmd或pycharm终端使用pip执行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Shapely-1.8.2-cp39-cp39-win_amd64.whl</span><br></pre></td></tr></table></figure></p><p>完成以后接着来到PaddleOCR目录下，通过终端安装依赖，这里同样推荐使用百度源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure></p><p>到这里，PaddleOCR的安装完成了</p><p>如果再执行<code>pip install -r requirements.txt -i https://mirror.baidu.com/pypi/simple</code>到安装opencv4.4.0.46包时报错：</p><font size="4" color="red">error: subprocess-exited-with-error</font><p>说明python的版本可能存在问题，需要切换虚拟环境或回退python版本，因为opencv-python目前仅支持py3.6-3.9版本</p><p>opencv-python镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/opencv-python/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/opencv-python/</a><br><a id="more"></a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="官方模型"><a href="#官方模型" class="headerlink" title="官方模型"></a>官方模型</h3><p>先使用官方模型对数据进行测试（v2.0）：<a href="https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.0/README_ch.md" target="_blank" rel="noopener">https://github.com/PaddlePaddle/PaddleOCR/blob/release/2.0/README_ch.md</a></p><p><img src="/2022/07/12/PaddleOCR/1.png" alt><br>其中推理模型（inference model）相当于已训练完成的模型，可以直接拿来预测，而预训练模型（trained model)属于半成品，在使用本地的数据训练模型时需要用到</p><p>将推理模型下载后，来到PaddleOCR目录下新建inference文件夹，用来存放模型</p><p><img src="/2022/07/12/PaddleOCR/2.png" alt><br><img src="/2022/07/12/PaddleOCR/3.png" alt></p><p>检查每个文件夹下是否存在<font color="orange">inference.pdiparams</font>、<font color="orange">inference.pdiparams.info</font>、<font color="orange">inference.pdmodel</font>三个文件，如果出现不和谐的文件夹是官方打包时出错，将文件夹内的内容提取出来即可</p><p>如果直接使用可能会报错：</p><font color="red">raise Exception(“not found any img file in {}”.format(img_file))<br>Exception: not found any img file in ./doc/imgs/test.jpg</font><h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><p>官方的快速开始教程：<a href="https://github.com/PaddlePaddle/PaddleOCR/blob/develop/doc/doc_ch/quickstart.md" target="_blank" rel="noopener">https://github.com/PaddlePaddle/PaddleOCR/blob/develop/doc/doc_ch/quickstart.md</a></p><p>首先将测试目标test.jpg存放进PaddleOCR/doc/imgs/目录下，到cmd或pycharm终端里执行：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python tools/infer/predict_system.py --image_dir="./doc/imgs/test.jpg" \</span><br><span class="line">         --det_model_dir="./inference/ch_ppocr_server_v2.<span class="number">0</span>_det_infer/" \</span><br><span class="line">         --rec_model_dir="./inference/ch_ppocr_server_v2.<span class="number">0</span>_rec_infer/" \</span><br><span class="line">         --cls_model_dir="./inference/ch_ppocr_mobile_v2.<span class="number">0</span>_cls_infer/" \</span><br><span class="line">                 --use_angle_cls=True \</span><br><span class="line">         --use_space_char=True</span><br></pre></td></tr></table></figure></p><p>（windows下使用官方文档里中的”python3 tools/…”会出不来结果，linux下没有问题）</p><p><img src="/2022/07/12/PaddleOCR/4.png" alt></p><h3 id="使用pycharm预测"><a href="#使用pycharm预测" class="headerlink" title="使用pycharm预测"></a>使用pycharm预测</h3><p>需要修改的代码位于根目录下/tools/infer文件夹下，其中<font color="orange">predict_det.py</font>用于检测文本，<font color="orange">predict_rec.py</font>用于识别文本，<font color="orange">predict_system.py</font>可用于检测和识别，这3个.py文件共用同一个配置文件<font color="orange">utility.py</font>，需要到其中定位并修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否使用gpu</span></span><br><span class="line">parser.add_argument(<span class="string">"--use_gpu"</span>, type=str2bool, default=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 图片文件位置</span></span><br><span class="line">parser.add_argument(<span class="string">"--image_dir"</span>, type=str, default=<span class="string">"../../demo/test.jpg"</span>)</span><br><span class="line"><span class="comment"># 检测模型路径</span></span><br><span class="line">parser.add_argument(<span class="string">"--det_model_dir"</span>, type=str, default=<span class="string">"../../inference/ch_ppocr_server_v2.0_det_infer/"</span>)</span><br><span class="line"><span class="comment"># 识别模型路径</span></span><br><span class="line">parser.add_argument(<span class="string">"--rec_model_dir"</span>, type=str, default=<span class="string">"../../inference/ch_ppocr_server_v2.0_rec_infer"</span>)</span><br><span class="line"><span class="comment"># 分类模型路径</span></span><br><span class="line">parser.add_argument(<span class="string">"--cls_model_dir"</span>, type=str, default=<span class="string">"../../inference/ch_ppocr_mobile_v2.0_cls_infer"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典路径（ic15_dict.txt是英文字典，ppocr_keys_v1.txt是中文字典，检测一般不区分中英文，但是识别需要区分中英文）</span></span><br><span class="line">parser.add_argument(</span><br><span class="line">    <span class="string">"--rec_char_dict_path"</span>,</span><br><span class="line">    type=str,</span><br><span class="line">    default=<span class="string">"../../ppocr/utils/ic15_dict.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字体路径，2处</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_ocr_box_txt</span><span class="params">(image,</span></span></span><br><span class="line"><span class="function"><span class="params">                     boxes,</span></span></span><br><span class="line"><span class="function"><span class="params">                     txts,</span></span></span><br><span class="line"><span class="function"><span class="params">                     scores=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                     drop_score=<span class="number">0.5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                     font_path=<span class="string">"./doc/simfang.ttf"</span>)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_visual</span><span class="params">(texts,</span></span></span><br><span class="line"><span class="function"><span class="params">                scores,</span></span></span><br><span class="line"><span class="function"><span class="params">                img_h=<span class="number">400</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                img_w=<span class="number">600</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                threshold=<span class="number">0.</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                font_path=<span class="string">"./doc/simfang.ttf"</span>)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序输出路径</span></span><br><span class="line">parser.add_argument(</span><br><span class="line">    <span class="string">"--draw_img_save_dir"</span>, type=str, default=<span class="string">"./inference_results"</span>)</span><br></pre></td></tr></table></figure></p><p>接着运行<font color="orange">predict_system.py</font></p><h2 id="服务部署（基于PaddleHub-Serving）"><a href="#服务部署（基于PaddleHub-Serving）" class="headerlink" title="服务部署（基于PaddleHub Serving）"></a>服务部署（基于PaddleHub Serving）</h2><p>deploy/hubserving服务部署目录下包括检测（<font color="orange">ocr_det</font>）、识别（<font color="orange">ocr_rec</font>）、2阶段串联（<font color="orange">ocr_system</font>）三种服务包和分类模块服务包（<font color="orange">ocr_cls</font>），可以根据需求选择相应的服务包进行安装和启动。每个服务包下包括3个.py文件和一个config.json配置文件：<br><strong>-</strong> <font color="orange">__init__.py</font><br><strong>-</strong> <font color="#00BFFF">config.json</font>：配置文件<br><strong>-</strong> <font color="orange">module.py</font>：主模块，必选，包含服务的完整逻辑<br><strong>-</strong> <font color="orange">params.py</font>：参数文件，必选，包含模型路径、前后处理参数等参数</p><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p><font color="orange"><strong>1.</strong></font>使用pip安装paddlehub，python版本需要高于3.6.2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install paddlehub==2.1.0 --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p><font color="orange"><strong>2.</strong></font>配置模型文件，将之前下载的模型路径修改到<font color="orange">params.py</font>当中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cfg.det_model_dir = <span class="string">"./inference/ch_ppocr_server_v2.0_det_infer/"</span></span><br><span class="line">cfg.rec_model_dir = <span class="string">"./inference/ch_ppocr_server_v2.0_rec_infer/"</span></span><br><span class="line">cfg.cls_model_dir = <span class="string">"./inference/ch_ppocr_mobile_v2.0_cls_infer/"</span></span><br></pre></td></tr></table></figure></p><p><font color="orange"><strong>3.</strong></font>安装服务模块，进入paddleOCR根目录，执行：<br><strong>Linux</strong>环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 安装检测服务模块：  </span><br><span class="line">$ hub install deploy/hubserving/ocr_det/</span><br><span class="line"></span><br><span class="line"># 或，安装分类服务模块：  </span><br><span class="line">$ hub install deploy/hubserving/ocr_cls/</span><br><span class="line"></span><br><span class="line"># 或，安装识别服务模块：  </span><br><span class="line">$ hub install deploy/hubserving/ocr_rec/</span><br><span class="line"></span><br><span class="line"># 或，安装检测+识别串联服务模块：  </span><br><span class="line">$ hub install deploy/hubserving/ocr_system/</span><br></pre></td></tr></table></figure></p><p><strong>windows</strong>环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 安装检测服务模块：  </span><br><span class="line">hub install deploy\hubserving\ocr_det\</span><br><span class="line"></span><br><span class="line"># 或，安装分类服务模块：  </span><br><span class="line">hub install deploy\hubserving\ocr_cls\</span><br><span class="line"></span><br><span class="line"># 或，安装识别服务模块：  </span><br><span class="line">hub install deploy\hubserving\ocr_rec\</span><br><span class="line"></span><br><span class="line"># 或，安装检测+识别串联服务模块：</span><br><span class="line">hub install deploy\hubserving\ocr_system\</span><br></pre></td></tr></table></figure></p><p><img src="/2022/07/12/PaddleOCR/5.png" alt><br>执行<code>hub list</code>可以查看已安装的模块：<br><img src="/2022/07/12/PaddleOCR/6.png" alt></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><h4 id="方式1-命令行启动（仅支持CPU）"><a href="#方式1-命令行启动（仅支持CPU）" class="headerlink" title="方式1.命令行启动（仅支持CPU）"></a>方式1.命令行启动（仅支持CPU）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hub serving start --modules [Module1==Version1, Module2==Version2, ...] \</span><br><span class="line">                    --port XXXX \</span><br><span class="line">                    --use_multiprocess \</span><br><span class="line">                    --workers \</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>–modules/-m</td><td style="text-align:left">PaddleHub Serving预安装模型，以多个Module==Version键值对的形式列出<code>当不指定Version时，默认选择最新版本</code></td></tr><tr><td>–port/-p</td><td style="text-align:left">服务端口，默认为8866</td></tr><tr><td>–use_multiprocess</td><td style="text-align:left">是否启用并发方式，默认为单进程方式，推荐多核CPU机器使用此方式<code>Windows操作系统只支持单进程方式</code></td></tr><tr><td>–workers</td><td style="text-align:left">在并发方式下指定的并发任务数，默认为<code>2*cpu_count-1</code>，其中<code>cpu_count</code>为CPU核数</td></tr></tbody></table><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hub serving start -m ocr_system</span><br></pre></td></tr></table></figure></p><p><img src="/2022/07/12/PaddleOCR/7.png" alt></p><h4 id="方式2-通过配置文件config-json启动（支持CPU、GPU）"><a href="#方式2-通过配置文件config-json启动（支持CPU、GPU）" class="headerlink" title="方式2.通过配置文件config.json启动（支持CPU、GPU）"></a>方式2.通过配置文件config.json启动（支持CPU、GPU）</h4><p><font color="#00BFFF">config.json</font>内容格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"modules_info"</span>: &#123;</span><br><span class="line">        <span class="attr">"ocr_system"</span>: &#123;</span><br><span class="line">            <span class="attr">"init_args"</span>: &#123;</span><br><span class="line">                <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">                <span class="attr">"use_gpu"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"predict_args"</span>: &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">8868</span>,</span><br><span class="line">    <span class="attr">"use_multiprocess"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>·</strong> <code>init_args</code>中的可配参数与<font color="orange">module.py</font>中的<font color="#008080">_initialize</font>函数接口保持一致，当<code>use_gpu</code>的值为<font color="orange">true</font>时，表示使用GPU启动服务</p><p><strong>·</strong> <code>predict_args</code>中的可配参数与<font color="orange">module.py</font>中的<font color="#008080">predict</font>函数接口保持一致</p><p><strong>·</strong> 使用配置文件启动服务时，其他参数会被忽略</p><p><strong>·</strong> 如果使用GPU预测(即，<code>use_gpu</code>置为<font color="orange">true</font>)，则需要在启动服务之前，设置<font color="#008080">CUDA_VISIBLE_DEVICES</font>环境变量，如：<font color="#008080">export CUDA_VISIBLE_DEVICES=0</font>，否则不用设置</p><p><strong>·</strong> <code>use_gpu</code>不可与<code>use_multiprocess</code>同时为true</p><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hub serving start -c ./deploy/hubserving/ocr_system/config.json</span><br></pre></td></tr></table></figure></p><p><img src="/2022/07/12/PaddleOCR/8.png" alt></p><h3 id="发送预测请求"><a href="#发送预测请求" class="headerlink" title="发送预测请求"></a>发送预测请求</h3><p>需要通过POST方法传递2个参数：server_url 和 image_path<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/test_hubserving.py --server_url http://127.0.0.1:8868/predict/ocr_system --image_dir ./demo/</span><br></pre></td></tr></table></figure></p><p><img src="/2022/07/12/PaddleOCR/9.png" alt><br>如果在启动时遇到警告：</p><p><font color="gold">C:\Python39\lib\site-packages\attrdict\mapping.py:4: DeprecationWarning: Using or importing the ABCs from ‘collections’ instead of from ‘collections.abc’ is deprecated since Python 3.3, and in 3.10 it will stop working<br>    from collections import Mapping</font><br>需要到对应的Python\lib\site-packages\attrdict\目录下修改<font color="orange">default.py</font>、<font color="orange">mapping.py</font>、<font color="orange">merge.py</font> 和 <font color="orange">mixins.py</font>文件中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ...</span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> ...</span><br></pre></td></tr></table></figure></p><h3 id="返回结构"><a href="#返回结构" class="headerlink" title="返回结构"></a>返回结构</h3><p>返回的结果为列表，其中每一项为一个字典，字典一共可能包含下列三种字段：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>含义</th></tr></thead><tbody><tr><td>text</td><td>str</td><td>文本内容</td></tr><tr><td>confidence</td><td>float</td><td>文本识别置信度</td></tr><tr><td>text_region</td><td>list</td><td>文本位置坐标</td></tr></tbody></table><p>不同模块返回的字段不同，如，文本识别服务模块返回结果不含text_region字段</p><table><thead><tr><th>字段名</th><th>ocr_det</th><th>ocr_cls</th><th>ocr_rec</th><th>ocr_system</th></tr></thead><tbody><tr><td>text</td><td></td><td></td><td><font color="orange">√</font></td><td><font color="orange">√</font></td></tr><tr><td>confidence</td><td></td><td><font color="orange">√</font></td><td><font color="orange">√</font></td><td><font color="orange">√</font></td></tr><tr><td>text_region</td><td><font color="orange">√</font></td><td></td><td></td><td><font color="orange">√</font></td></tr></tbody></table><h3 id="自定义修改服务模块"><a href="#自定义修改服务模块" class="headerlink" title="自定义修改服务模块"></a>自定义修改服务模块</h3><p><strong>·</strong> 停止服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hub serving stop --port/-p XXXX</span><br></pre></td></tr></table></figure></p><p><strong>·</strong> 到相应的<font color="orange">module.py</font> 和 <font color="orange">params.py</font>等文件中根据实际需求修改代码<br>例如，如果需要替换部署服务所用模型，则需要到<font color="orange">params.py</font>中修改模型路径参数<font color="#008080">det_model_dir</font> 和 <font color="#008080">rec_model_dir</font>，如果需要关闭文本方向分类器，则将参数<font color="#008080">use_angle_cls</font>置为<font color="orange">False</font>，当然，同时可能还需要修改其他相关参数，强烈建议修改后先直接运行<font color="orange">module.py</font>调试，能正确运行预测后再启动服务测试</p><p><strong>·</strong> 卸载旧服务包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hub uninstall ocr_system</span><br></pre></td></tr></table></figure></p><p><strong>·</strong> 安装修改后的新服务包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hub install deploy/hubserving/ocr_system/</span><br></pre></td></tr></table></figure></p><p><strong>·</strong> 重新启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hub serving start -m ocr_system</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;进入PaddleOCR的github页面（&lt;a href=&quot;https://github.com/PaddlePaddle/PaddleOCR&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/PaddlePaddle/PaddleOCR&lt;/a&gt;），进行下载和解压&lt;/p&gt;
&lt;p&gt;使用pip进行安装，这里因为速度很慢推荐使用百度源&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装shapely（&lt;a href=&quot;https://www.lfd.uci.edu/~gohlke/pythonlibs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.lfd.uci.edu/~gohlke/pythonlibs/&lt;/a&gt;），下载shapely对应python和系统版本的安装包（我使用的是py39，windows_64），python版本目前不能超过3.9&lt;/p&gt;
&lt;p&gt;将下载好的Shapely-1.8.2-cp39-cp39-win_amd64.whl放进python根目录下的libs文件夹内，通过cmd或pycharm终端使用pip执行安装&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install Shapely-1.8.2-cp39-cp39-win_amd64.whl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完成以后接着来到PaddleOCR目录下，通过终端安装依赖，这里同样推荐使用百度源&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install -r requirements.txt -i https://mirror.baidu.com/pypi/simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到这里，PaddleOCR的安装完成了&lt;/p&gt;
&lt;p&gt;如果再执行&lt;code&gt;pip install -r requirements.txt -i https://mirror.baidu.com/pypi/simple&lt;/code&gt;到安装opencv4.4.0.46包时报错：&lt;/p&gt;
&lt;font size=&quot;4&quot; color=&quot;red&quot;&gt;error: subprocess-exited-with-error&lt;/font&gt;

&lt;p&gt;说明python的版本可能存在问题，需要切换虚拟环境或回退python版本，因为opencv-python目前仅支持py3.6-3.9版本&lt;/p&gt;
&lt;p&gt;opencv-python镜像：&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/opencv-python/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/opencv-python/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://yoursite.com/categories/机器学习/"/>
    
    
    <category term="OCR" scheme="http://yoursite.com/tags/OCR/"/>
    
  </entry>
  
  <entry>
    <title>ClickHouse</title>
    <link href="http://yoursite.com/2022/07/07/ClickHouse/"/>
    <id>http://yoursite.com/2022/07/07/ClickHouse/</id>
    <published>2022-07-07T08:02:23.000Z</published>
    <updated>2022-09-22T03:47:24.441Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>本文参考CK中文官方文档：<a href="https://clickhouse.com/docs/zh/" target="_blank" rel="noopener">https://clickhouse.com/docs/zh/</a><br>ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)</p><p>在传统的行式数据库系统中，数据按如下顺序存储：</p><table><thead><tr><th>ROW</th><th>Title</th><th>Code</th><th>Note</th><th>Datetime</th></tr></thead><tbody><tr><td>#0</td><td>Database</td><td>0</td><td>数据库</td><td>2022-07-07 16:03:00</td></tr><tr><td>#1</td><td>MySQL</td><td>1</td><td>关系型数据库</td><td>2022-07-07 16:03:10</td></tr><tr><td>#2</td><td>Nebula</td><td>1</td><td>图数据库</td><td>2022-07-07 16:03:20</td></tr><tr><td>#3</td><td>ClickHouse</td><td>1</td><td>列式数据库</td><td>2022-07-07 16:03:30</td></tr><tr><td>#N</td><td>…</td><td>1</td><td>…</td><td>…</td></tr></tbody></table><p>处于同一行中的数据总是被物理的存储在一起。常见的行式数据库系统有：<font color="orange">MySQL</font>、<font color="orange">Postgres</font> 和 <font color="orange">MS SQL Server</font> 等</p><p>而在列式数据库系统中，数据则按如下顺序存储</p><table><thead><tr><th>ROW</th><th>#0</th><th>#1</th><th>#2</th><th>#3</th><th>#4</th></tr></thead><tbody><tr><td><strong>Title</strong></td><td>Database</td><td>MySQL</td><td>Nebula</td><td>ClickHouse</td><td>…</td></tr><tr><td><strong>Code</strong></td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td><strong>Note</strong></td><td>数据库</td><td>关系型数据库</td><td>图数据库</td><td>列式数据库</td><td>…</td></tr><tr><td><strong>Datetime</strong></td><td>2022-0707 16:03:00</td><td>2022-0707 16:03:10</td><td>2022-0707 16:03:20</td><td>2022-07-07 16:03:30</td><td>…</td></tr></tbody></table><p>这些示例只显示了数据的排列顺序，来自不同列的值被单独存储，来自同一列的数据被存储在一起。常见的列式数据库系统有：<font color="orange">Vertica</font>、<font color="orange">Paraccel</font>(Actian Matrix, Amazon Redshift)、<font color="orange">Sybase IQ</font>、<font color="orange">Exasol</font>、<font color="orange">Infobright</font>、<font color="orange">InfiniDB</font>、<font color="orange">MonetDB</font>(VectorWise, Actian Vector)、<font color="orange">LucidDB</font>、<font color="orange">SAP HANA</font>、<font color="orange">Google Dremel</font>、<font color="orange">Google PowerDrill</font>、<font color="orange">Druid</font>、<font color="orange">kdb+</font> 等</p><p>不同的数据存储方式适用不同的业务场景，数据访问的场景包括：进行了何种查询、多久查询一次以及各类查询的比例；每种类型的查询(行、列和字节)读取多少数据；读取数据和更新之间的关系；使用的数据集大小以及如何使用本地的数据集；是否使用事务,以及它们是如何进行隔离的；数据的复制机制与数据的完整性要求；每种类型的查询要求的延迟与吞吐量等等</p><p>系统负载越高，依据使用场景进行定制化就越重要，并且定制将会变的越精细。没有一个系统能够同时适用所有不同的业务场景。如果系统适用于广泛的场景，在负载高的情况下，要兼顾所有的场景，那么将不得不做出选择：<font color="#008080">平衡</font> OR <font color="#008080">效率</font></p><h2 id="联机分析（OLAP）场景的关键特征"><a href="#联机分析（OLAP）场景的关键特征" class="headerlink" title="联机分析（OLAP）场景的关键特征"></a>联机分析（OLAP）场景的关键特征</h2><pre><code>· 绝大多数是读请求· 数据以相当大的批次(&gt; 1000行)更新，而不是单行更新;或者根本没有更新。· 已添加到数据库的数据不能修改。· 对于读取，从数据库中提取相当多的行，但只提取列的一小部分。· 宽表，即每个表包含着大量的列· 查询相对较少(通常每台服务器每秒查询数百次或更少)· 对于简单查询，允许延迟大约50毫秒· 列中的数据相对较小：数字和短字符串(例如，每个URL 60个字节)· 处理单个查询时需要高吞吐量(每台服务器每秒可达数十亿行)· 事务不是必须的· 对数据一致性要求低· 每个查询有一个大表。除了他以外，其他的都很小。· 查询结果明显小于源数据。换句话说，数据经过过滤或聚合，因此结果适合于单个服务器的RAM中</code></pre><p>很容易可以看出，OLAP场景与其他通常业务场景(例如,OLTP或K/V)有很大的不同， 因此想要使用OLTP或Key-Value数据库去高效的处理分析查询场景，并不是非常完美的适用方案。例如，使用OLAP数据库去处理分析请求通常要优于使用MongoDB或Redis去处理分析请求。<br><a id="more"></a></p><h2 id="列式数据库更适合OLAP场景的原因"><a href="#列式数据库更适合OLAP场景的原因" class="headerlink" title="列式数据库更适合OLAP场景的原因"></a>列式数据库更适合OLAP场景的原因</h2><p>列式数据库更适合于OLAP场景(对于大多数查询而言，处理速度至少提高了100倍)<br><img src="/2022/07/07/ClickHouse/A.gif" alt><br><img src="/2022/07/07/ClickHouse/B.gif" alt></p><h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><p><font color="orange">1.</font>针对分析类查询，通常只需要读取表的一小部分列。在列式数据库中你可以只读取你需要的数据。例如，如果只需要读取100列中的5列，这将帮助你最少减少20倍的I/O消耗。</p><p><font color="orange">2.</font>由于数据总是打包成批量读取的，所以压缩是非常容易的。同时数据按列分别存储这也更容易压缩。这进一步降低了I/O的体积。</p><p><font color="orange">3.</font>由于I/O的降低，这将帮助更多的数据被系统缓存。</p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>由于执行一个查询需要处理大量的行，因此在整个向量上执行所有操作将比在每一行上执行所有操作更加高效。同时这将有助于实现一个几乎没有调用成本的查询引擎。如果你不这样做，使用任何一个机械硬盘，查询引擎都不可避免的停止CPU进行等待。所以，在数据按列存储并且按列执行是很有意义的。</p><p>有两种方法可以做到这一点：</p><p><font color="orange">1.</font>向量引擎：所有的操作都是为向量而不是为单个值编写的。这意味着多个操作之间的不再需要频繁的调用，并且调用的成本基本可以忽略不计。操作代码包含一个优化的内部循环。</p><p><font color="orange">2.</font>代码生成：生成一段代码，包含查询中的所有操作。</p><p>这是不应该在一个通用数据库中实现的，因为这在运行简单查询时是没有意义的。但是也有例外，例如，MemSQL使用代码生成来减少处理SQL查询的延迟(只是为了比较，分析型数据库通常需要优化的是吞吐而不是延迟)。</p><p>为了提高CPU效率，查询语言必须是声明型的(SQL或MDX)， 或者至少一个向量(J，K)。 查询应该只包含隐式循环，允许进行优化。</p><h2 id="安装ClickHouse"><a href="#安装ClickHouse" class="headerlink" title="安装ClickHouse"></a>安装ClickHouse</h2><p>使用CentOS基于rpm的linux发行版官方预编译rpm包，添加官方存储库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line">$ sudo yum-config-manager --add-repo https://packages.clickhouse.com/rpm/clickhouse.repo</span><br><span class="line">$ sudo yum install -y clickhouse-server clickhouse-client</span><br></pre></td></tr></table></figure></p><h3 id="启动CK"><a href="#启动CK" class="headerlink" title="启动CK"></a>启动CK</h3><p>运行以下命令将在后台启动服务，日志文件将输出在<code>/var/log/clickhouse-server/</code>文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/clickhouse-server start</span><br><span class="line">$ clickhouse-client # 或执行 &quot;clickhouse-client --password&quot; 来添加密码</span><br></pre></td></tr></table></figure></p><p>要手动从控制台启动服务，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clickhouse-server --config-file=/etc/clickhouse-server/config.xml</span><br></pre></td></tr></table></figure></p><p>日志将被打印至控制台</p><p>当服务成功启动后，执行<code>$ clickhouse-client</code>来连接CK数据库，默认情况下，使用<font color="orange">default用户</font>并不携带密码连接到<font color="#008080">localhost:9000</font>，还可以使用<font color="#008080">–host</font>参数连接到指定服务器。</p><p>终端必须使用UTF-8编码。</p><p><img src="/2022/07/07/ClickHouse/1.png" alt></p><h2 id="ClickHouse数据库可视化工具Dbeaver"><a href="#ClickHouse数据库可视化工具Dbeaver" class="headerlink" title="ClickHouse数据库可视化工具Dbeaver"></a>ClickHouse数据库可视化工具Dbeaver</h2><p>目前navicat并不支持clickhouse的可视化查询，可以使用dbeaver数据库管理工具来代替navicat</p><h3 id="Dbeaver安装"><a href="#Dbeaver安装" class="headerlink" title="Dbeaver安装"></a>Dbeaver安装</h3><p>下载最新版本的DBeaver RPM安装包并使用rpm/dnf或yum软件包管理器进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dbeaver.io/files/dbeaver-ce-latest-stable.x86_64.rpm</span><br><span class="line">$ sudo rpm -Uvh ./dbeaver-ce-latest-stable.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>完成后即可在终端执行<code>$ dbeaver</code>来启动dbeaver，再连接到CK（需要安装CK在线包）</p><p><img src="/2022/07/07/ClickHouse/5.png" alt><br><img src="/2022/07/07/ClickHouse/6.png" alt></p><h2 id="ClickHouse数据库操作"><a href="#ClickHouse数据库操作" class="headerlink" title="ClickHouse数据库操作"></a>ClickHouse数据库操作</h2><h3 id="创建新的数据库TEST（删除为DROP）"><a href="#创建新的数据库TEST（删除为DROP）" class="headerlink" title="创建新的数据库TEST（删除为DROP）"></a><font size="4" color="orange">创建新的数据库TEST</font><font size="4" color="black">（删除为DROP）</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost :) CREATE DATABASE TEST</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/ClickHouse/2.png" alt></p><h3 id="查看数据库、数据表"><a href="#查看数据库、数据表" class="headerlink" title="查看数据库、数据表"></a><font size="4" color="orange">查看数据库、数据表</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localhost :) SHOW DATABASES</span><br><span class="line">localhost :) SHOW TABLES IN TEST</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/ClickHouse/3.png" alt></p><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a><font size="4" color="orange">创建数据表</font></h3><p>ClickHouse有自己的数据类型，每个表都必须指定一个Engine属性来确定要创建的表的类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost :) CREATE TABLE TEST.testable (id String,time Date,name String,code FixedString(2))ENGINE=MergeTree() ORDER BY (time)</span><br></pre></td></tr></table></figure></p><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost :) DESCRIBE TEST.testable</span><br></pre></td></tr></table></figure></p><p>来描述表</p><p><img src="/2022/07/07/ClickHouse/4.png" alt></p><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a><font size="4" color="orange">添加数据</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost :) INSERT INTO TEST.testable VALUES (&apos;001&apos;,&apos;2022-07-07&apos;,&apos;MySQL&apos;,&apos;01&apos;)</span><br></pre></td></tr></table></figure><p>或指定数据所在的列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost :) INSERT INTO TEST.testable(id,time,name,code) VALUES (&apos;002&apos;,&apos;2022-07-07&apos;,&apos;SQLite&apos;,&apos;01&apos;)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/07/07/ClickHouse/7.png" alt><br><img src="/2022/07/07/ClickHouse/8.png" alt><br><img src="/2022/07/07/ClickHouse/9.png" alt><br>指定列不插入数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost :) INSERT INTO TEST.testable(* EXCEPT(code)) VALUES (&apos;0000&apos;,&apos;2022-07-07&apos;,&apos;nosql&apos;)</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/ClickHouse/10.png" alt></p><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a><font size="4" color="orange">SELECT</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localhost :) SELECT * FROM TEST.testable</span><br><span class="line">localhost :) SELECT * FROM TEST.testable WHERE name=&apos;MySQL&apos;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/ClickHouse/11.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文参考CK中文官方文档：&lt;a href=&quot;https://clickhouse.com/docs/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://clickhouse.com/docs/zh/&lt;/a&gt;&lt;br&gt;ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)&lt;/p&gt;
&lt;p&gt;在传统的行式数据库系统中，数据按如下顺序存储：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ROW&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Note&lt;/th&gt;
&lt;th&gt;Datetime&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#0&lt;/td&gt;
&lt;td&gt;Database&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;数据库&lt;/td&gt;
&lt;td&gt;2022-07-07 16:03:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#1&lt;/td&gt;
&lt;td&gt;MySQL&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;关系型数据库&lt;/td&gt;
&lt;td&gt;2022-07-07 16:03:10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#2&lt;/td&gt;
&lt;td&gt;Nebula&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;图数据库&lt;/td&gt;
&lt;td&gt;2022-07-07 16:03:20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#3&lt;/td&gt;
&lt;td&gt;ClickHouse&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;列式数据库&lt;/td&gt;
&lt;td&gt;2022-07-07 16:03:30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#N&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;处于同一行中的数据总是被物理的存储在一起。常见的行式数据库系统有：&lt;font color=&quot;orange&quot;&gt;MySQL&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;Postgres&lt;/font&gt; 和 &lt;font color=&quot;orange&quot;&gt;MS SQL Server&lt;/font&gt; 等&lt;/p&gt;
&lt;p&gt;而在列式数据库系统中，数据则按如下顺序存储&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ROW&lt;/th&gt;
&lt;th&gt;#0&lt;/th&gt;
&lt;th&gt;#1&lt;/th&gt;
&lt;th&gt;#2&lt;/th&gt;
&lt;th&gt;#3&lt;/th&gt;
&lt;th&gt;#4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Title&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Database&lt;/td&gt;
&lt;td&gt;MySQL&lt;/td&gt;
&lt;td&gt;Nebula&lt;/td&gt;
&lt;td&gt;ClickHouse&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;数据库&lt;/td&gt;
&lt;td&gt;关系型数据库&lt;/td&gt;
&lt;td&gt;图数据库&lt;/td&gt;
&lt;td&gt;列式数据库&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Datetime&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2022-0707 16:03:00&lt;/td&gt;
&lt;td&gt;2022-0707 16:03:10&lt;/td&gt;
&lt;td&gt;2022-0707 16:03:20&lt;/td&gt;
&lt;td&gt;2022-07-07 16:03:30&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这些示例只显示了数据的排列顺序，来自不同列的值被单独存储，来自同一列的数据被存储在一起。常见的列式数据库系统有：&lt;font color=&quot;orange&quot;&gt;Vertica&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;Paraccel&lt;/font&gt;(Actian Matrix, Amazon Redshift)、&lt;font color=&quot;orange&quot;&gt;Sybase IQ&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;Exasol&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;Infobright&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;InfiniDB&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;MonetDB&lt;/font&gt;(VectorWise, Actian Vector)、&lt;font color=&quot;orange&quot;&gt;LucidDB&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;SAP HANA&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;Google Dremel&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;Google PowerDrill&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;Druid&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;kdb+&lt;/font&gt; 等&lt;/p&gt;
&lt;p&gt;不同的数据存储方式适用不同的业务场景，数据访问的场景包括：进行了何种查询、多久查询一次以及各类查询的比例；每种类型的查询(行、列和字节)读取多少数据；读取数据和更新之间的关系；使用的数据集大小以及如何使用本地的数据集；是否使用事务,以及它们是如何进行隔离的；数据的复制机制与数据的完整性要求；每种类型的查询要求的延迟与吞吐量等等&lt;/p&gt;
&lt;p&gt;系统负载越高，依据使用场景进行定制化就越重要，并且定制将会变的越精细。没有一个系统能够同时适用所有不同的业务场景。如果系统适用于广泛的场景，在负载高的情况下，要兼顾所有的场景，那么将不得不做出选择：&lt;font color=&quot;#008080&quot;&gt;平衡&lt;/font&gt; OR &lt;font color=&quot;#008080&quot;&gt;效率&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;联机分析（OLAP）场景的关键特征&quot;&gt;&lt;a href=&quot;#联机分析（OLAP）场景的关键特征&quot; class=&quot;headerlink&quot; title=&quot;联机分析（OLAP）场景的关键特征&quot;&gt;&lt;/a&gt;联机分析（OLAP）场景的关键特征&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;· 绝大多数是读请求

· 数据以相当大的批次(&amp;gt; 1000行)更新，而不是单行更新;或者根本没有更新。

· 已添加到数据库的数据不能修改。

· 对于读取，从数据库中提取相当多的行，但只提取列的一小部分。

· 宽表，即每个表包含着大量的列

· 查询相对较少(通常每台服务器每秒查询数百次或更少)

· 对于简单查询，允许延迟大约50毫秒

· 列中的数据相对较小：数字和短字符串(例如，每个URL 60个字节)

· 处理单个查询时需要高吞吐量(每台服务器每秒可达数十亿行)

· 事务不是必须的

· 对数据一致性要求低

· 每个查询有一个大表。除了他以外，其他的都很小。

· 查询结果明显小于源数据。换句话说，数据经过过滤或聚合，因此结果适合于单个服务器的RAM中
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很容易可以看出，OLAP场景与其他通常业务场景(例如,OLTP或K/V)有很大的不同， 因此想要使用OLTP或Key-Value数据库去高效的处理分析查询场景，并不是非常完美的适用方案。例如，使用OLAP数据库去处理分析请求通常要优于使用MongoDB或Redis去处理分析请求。&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
    <category term="clickhouse" scheme="http://yoursite.com/tags/clickhouse/"/>
    
  </entry>
  
  <entry>
    <title>Nebula-CentOS安装与部署</title>
    <link href="http://yoursite.com/2022/06/21/Nebula-CentOS%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2022/06/21/Nebula-CentOS%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</id>
    <published>2022-06-21T13:46:14.000Z</published>
    <updated>2022-09-22T03:41:08.505Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>本文参考、提取自Nebula Graph Database官方文档(<a href="https://docs.nebula-graph.com.cn/2.6.0" target="_blank" rel="noopener">https://docs.nebula-graph.com.cn/2.6.0</a>)</p><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p><strong>·</strong> nebula版本：<font color="orange">2.6.0</font><br><strong>·</strong> 主机：<font color="orange">CentOS7 64位</font><br><strong>·</strong> 内存：<font color="orange">8GB</font><br><strong>·</strong> 处理器数量：<font color="orange">4</font><br><strong>·</strong> 处理器内核数：<font color="orange">4</font><br><strong>·</strong> 处理器内核总数：<font color="orange">16</font><br><strong>·</strong> 硬盘：<font color="orange">30GB，SSD</font></p><h3 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h3><p><strong>·</strong> CPU架构：<font color="orange">x86_64</font><br><strong>·</strong> 内存：<font color="orange">4GB</font><br><strong>·</strong> 硬盘：<font color="orange">10GB，SSD</font></p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><table><thead><tr><th>软件名称</th><th>版本</th><th>备注</th></tr></thead><tbody><tr><td>glibc</td><td><font color="orange">2.17</font>及以上</td><td>执行<code>ldd --version</code>检查版本</td></tr><tr><td>make</td><td>任意稳定版本</td><td>-</td></tr><tr><td>m4</td><td>任意稳定版本</td><td>-</td></tr><tr><td>git</td><td>任意稳定版本</td><td>-</td></tr><tr><td>wget</td><td>任意稳定版本</td><td>-</td></tr><tr><td>unzip</td><td>任意稳定版本</td><td>-</td></tr><tr><td>xz</td><td>任意稳定版本</td><td>-</td></tr><tr><td>redline-devel</td><td>任意稳定版本</td><td>-</td></tr><tr><td>ncurses-devel</td><td>任意稳定版本</td><td>-</td></tr><tr><td>zlib-devel</td><td>任意稳定版本</td><td>-</td></tr><tr><td><font color="orange">gcc</font></td><td><font color="orange">7.5.0</font>及以上</td><td>执行命令<code>gcc -v</code>检查版本</td></tr><tr><td>gcc-c++</td><td>任意稳定版本</td><td>-</td></tr><tr><td><font color="orange">cmake</font></td><td><font color="orange">3.9.0</font>及以上</td><td>执行命令<code>cmake --version</code>检查版本</td></tr><tr><td>gettext</td><td>任意稳定版本</td><td>-</td></tr><tr><td>curl</td><td>任意稳定版本</td><td>-</td></tr><tr><td>redhat-lsb-core</td><td>任意稳定版本</td><td>-</td></tr><tr><td>libstdc++-static</td><td>任意稳定版本</td><td>仅在CentOS 8+、RedHat 8+、Fedora中需要</td></tr><tr><td>libasan</td><td>任意稳定版本</td><td>仅在CentOS 8+、RedHat 8+、Fedora中需要</td></tr><tr><td>bzip2</td><td>任意稳定版本</td><td>-</td></tr></tbody></table><p>需要保证<font color="orange">gcc</font>和<font color="orange">cmake</font>的版本足够高，其他第三方软件将在安装（<font color="orange">cmake</font>）阶段自动下载并安装到build目录中<br><a id="more"></a></p><h2 id="2-安装编译"><a href="#2-安装编译" class="headerlink" title="2.安装编译"></a>2.安装编译</h2><h3 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a>1.安装依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum update</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y make \</span><br><span class="line">                 m4 \</span><br><span class="line">                 git \</span><br><span class="line">                 wget \</span><br><span class="line">                 unzip \</span><br><span class="line">                 xz \</span><br><span class="line">                 readline-devel \</span><br><span class="line">                 ncurses-devel \</span><br><span class="line">                 zlib-devel \</span><br><span class="line">                 gcc \</span><br><span class="line">                 gcc-c++ \</span><br><span class="line">                 cmake \</span><br><span class="line">                 gettext \</span><br><span class="line">                 curl \</span><br><span class="line">                 redhat-lsb-core \</span><br><span class="line">                 bzip2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y libstdc++-static libasan</span><br></pre></td></tr></table></figure><p>安装完成后检查主机的<font color="orange">g++</font>和<font color="orange">cmake</font>版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ g++ --version</span><br><span class="line">$ cmake --version</span><br></pre></td></tr></table></figure></p><p>如果<font color="orange">cmake</font>和<font color="orange">g++</font>的版本不够，可以先到github克隆nebula仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --branch v2.6.0 https://github.com/vesoft-inc/nebula.git</span><br><span class="line">$ cd nebula</span><br></pre></td></tr></table></figure></p><p>执行命令安装<font color="orange">cmake</font>和<font color="orange">g++</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./third-party/install-cmake.sh cmake-install</span><br><span class="line">$ source cmake-install/bin/enable-cmake.sh</span><br><span class="line">$ sudo mkdir /opt/vesoft &amp;&amp; sudo chmod -R a+w /opt/vesoft</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./third-party/install-gcc.sh --prefix=/opt</span><br><span class="line">$ source /opt/vesoft/toolset/gcc/7.5.0/enable</span><br></pre></td></tr></table></figure><p>最后执行脚本<code>install-third-party.sh</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./third-party/install-third-party.sh</span><br></pre></td></tr></table></figure></p><h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><p>在github克隆nebula仓库后，创建build目录并进入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir build &amp;&amp; cd build</span><br></pre></td></tr></table></figure></p><p>使用cmake生成makefile文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cmake -DCMAKE_INSTALL_PREFIX=/usr/local/nebula -DENABLE_TESTING=OFF -DCMAKE_BUILD_TYPE=Release ..</span><br></pre></td></tr></table></figure></p><p>进行编译，为了提高速度，-j参数（并行数量）为min(CPU核数，内存/2)，这里选择8/2=4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make -j4</span><br></pre></td></tr></table></figure></p><p>安装nebula graph<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></p><p>一切完成以后，来到默认的/usr/local/nebula/etc目录下，将配置文件（<font color="orange">nebula-graph.conf.default</font>、<font color="orange">nebula-metad.conf.default</font>、<font color="orange">nebula-storaged.conf.default</font>）后缀的.default删除，即使用默认的配置文件</p><h2 id="3-启动Nebula-Graph服务端"><a href="#3-启动Nebula-Graph服务端" class="headerlink" title="3.启动Nebula Graph服务端"></a>3.启动Nebula Graph服务端</h2><h3 id="启动Nebula-Graph"><a href="#启动Nebula-Graph" class="headerlink" title="启动Nebula Graph"></a>启动Nebula Graph</h3><p>直接进行启动、查看状态和关闭服务的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /usr/local/nebula/scripts/nebula.service start all</span><br><span class="line">$ sudo /usr/local/nebula/scripts/nebula.service status all</span><br><span class="line">$ sudo /usr/local/nebula/scripts/nebula.service stop all</span><br></pre></td></tr></table></figure></p><p><img src="/2022/06/21/Nebula-CentOS安装与部署/C.png" alt></p><h3 id="连接Nebula-Graph"><a href="#连接Nebula-Graph" class="headerlink" title="连接Nebula Graph"></a>连接Nebula Graph</h3><p>进入nebula console下载界面<a href="https://github.com/vesoft-inc/nebula-console/releases" target="_blank" rel="noopener">https://github.com/vesoft-inc/nebula-console/releases</a>，找到对应的2.6.0版本，点击Assets找到linux版本，这里选择nebula-console-linux-amd64-v2.6.0</p><p><img src="/2022/06/21/Nebula-CentOS安装与部署/D.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/vesoft-inc/nebula-console/releases/download/v2.6.0/nebula-console-linux-amd64-v2.6.0</span><br></pre></td></tr></table></figure></p><p>将下载好的nebula-console-linux-amd64-v2.6.0重命名为nebula-console</p><p>为用户授予nebula-console文件的执行权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 111 nebula-console</span><br></pre></td></tr></table></figure></p><p>来到nebula-console所在目录下，执行命令连接nebula graph，其中参数分别对应ip地址、服务端的端口号（9669）、nebula用户名和密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./nebula-console -addr 192.168.80.128 -port 9669 -u root -p nebula</span><br></pre></td></tr></table></figure></p><p>成功后进入到nebula console控制台界面（需要提前启动nebula graph）</p><p><img src="/2022/06/21/Nebula-CentOS安装与部署/E.png" alt><br>可以通过console控制台执行命令，进行数据库的查看、编辑等</p><p><img src="/2022/06/21/Nebula-CentOS安装与部署/F.png" alt><br>最后通过exit或者quit命令退出nebula console控制台</p><p><img src="/2022/06/21/Nebula-CentOS安装与部署/G.png" alt></p><h2 id="4-Nebula-Graph-Studio客户端"><a href="#4-Nebula-Graph-Studio客户端" class="headerlink" title="4.Nebula Graph Studio客户端"></a>4.Nebula Graph Studio客户端</h2><p>nebula graph studio是一款可以通过 Web 访问的图数据库开源可视化工具，搭配 nebula graph 内核使用，能够提供构图、数据导入、编写 nGQL 查询、图探索等一站式服务</p><p>nebula graph studio 版本发布节奏独立于 nebula graph 内核，其命名方式也不参照内核命名的规则，目前仅支持 x86_64 架构</p><p><img src="/2022/06/21/Nebula-CentOS安装与部署/H.png" alt></p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p><strong>·</strong> 需要启动nebula graph服务</p><p><strong>·</strong> 使用的Linux发行版为CentOS，安装有lsof和版本为v10.16.0及以上的Node.js</p><p><strong>·</strong> 确保7001和8080端口处于未被占用的状态</p><p>下载最新版本的node.js：</p><p>进入node.js官网，选择linux下64位版本</p><p><img src="/2022/06/21/Nebula-CentOS安装与部署/I.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://nodejs.org/dist/v16.15.1/node-v16.15.1-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></p><p>下载到本地以后解压缩，将文件重命名为nodejs16，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar xf  node-v16.15.1-linux-x64.tar.xz</span><br><span class="line">$ mv node-v16.15.1-linux-x64 nodejs16</span><br></pre></td></tr></table></figure></p><p>配置软连接，将nodejs16映射到usr/bin下，使全局可以使用node.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /root/nodejs16/bin/node   /usr/bin/ </span><br><span class="line">$ ln -s /root/nodejs16/bin/npm   /usr/bin/</span><br></pre></td></tr></table></figure></p><p>最后可以查看node.js的版本，确认安装完成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/node -v</span><br></pre></td></tr></table></figure></p><h3 id="安装和部署nebula-graph-studio"><a href="#安装和部署nebula-graph-studio" class="headerlink" title="安装和部署nebula graph studio"></a>安装和部署nebula graph studio</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ https://oss-cdn.nebula-graph.com.cn/nebula-graph-studio/3.1.0/nebula-graph-studio-3.1.0.x86_64.rpm</span><br><span class="line">$ sudo rpm -i nebula-graph-studio-3.1.0.x86_64.rpm</span><br></pre></td></tr></table></figure><p>成功后显示<code>[egg-scripts] egg started on http://0.0.0.0:7001</code>说明客户端正常启动了</p><p><img src="/2022/06/21/Nebula-CentOS安装与部署/J.png" alt><br><img src="/2022/06/21/Nebula-CentOS安装与部署/K.png" alt><br>刷入前面接口要调用到的数据</p><p><img src="/2022/06/21/Nebula-CentOS安装与部署/L.png" alt><br>要手动关闭和启动服务，可以执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bash /usr/local/nebula-graph-studio/scripts/rpm/start.sh</span><br><span class="line">$ bash /usr/local/nebula-graph-studio/scripts/rpm/stop.sh</span><br></pre></td></tr></table></figure><p><img src="/2022/06/21/Nebula-CentOS安装与部署/M.png" alt></p><h3 id="windows访问客户端"><a href="#windows访问客户端" class="headerlink" title="windows访问客户端"></a>windows访问客户端</h3><p>查看虚拟机状态，关闭虚拟机防火墙，禁止防火墙的开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ service iptables status</span><br><span class="line">$ systemctl stop firewalld.service</span><br><span class="line">$ systemctl disable firewalld.service</span><br></pre></td></tr></table></figure></p><p>在浏览器中进入虚拟机本地ip，进入图库，可以检索到前面插入的数据</p><p><img src="/2022/06/21/Nebula-CentOS安装与部署/N.png" alt></p><h3 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h3><p>进入系统相关配置文件，写入自启动命令和脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></p><p>写入启动命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#nebula-graph</span><br><span class="line">sudo /usr/local/nebula/scripts/nebula.service start all</span><br><span class="line">bash /usr/local/nebula-graph-studio/scripts/rpm/start.sh</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文参考、提取自Nebula Graph Database官方文档(&lt;a href=&quot;https://docs.nebula-graph.com.cn/2.6.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.nebula-graph.com.cn/2.6.0&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;1-前期准备&quot;&gt;&lt;a href=&quot;#1-前期准备&quot; class=&quot;headerlink&quot; title=&quot;1.前期准备&quot;&gt;&lt;/a&gt;1.前期准备&lt;/h2&gt;&lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; nebula版本：&lt;font color=&quot;orange&quot;&gt;2.6.0&lt;/font&gt;&lt;br&gt;&lt;strong&gt;·&lt;/strong&gt; 主机：&lt;font color=&quot;orange&quot;&gt;CentOS7 64位&lt;/font&gt;&lt;br&gt;&lt;strong&gt;·&lt;/strong&gt; 内存：&lt;font color=&quot;orange&quot;&gt;8GB&lt;/font&gt;&lt;br&gt;&lt;strong&gt;·&lt;/strong&gt; 处理器数量：&lt;font color=&quot;orange&quot;&gt;4&lt;/font&gt;&lt;br&gt;&lt;strong&gt;·&lt;/strong&gt; 处理器内核数：&lt;font color=&quot;orange&quot;&gt;4&lt;/font&gt;&lt;br&gt;&lt;strong&gt;·&lt;/strong&gt; 处理器内核总数：&lt;font color=&quot;orange&quot;&gt;16&lt;/font&gt;&lt;br&gt;&lt;strong&gt;·&lt;/strong&gt; 硬盘：&lt;font color=&quot;orange&quot;&gt;30GB，SSD&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&quot;硬件要求&quot;&gt;&lt;a href=&quot;#硬件要求&quot; class=&quot;headerlink&quot; title=&quot;硬件要求&quot;&gt;&lt;/a&gt;硬件要求&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; CPU架构：&lt;font color=&quot;orange&quot;&gt;x86_64&lt;/font&gt;&lt;br&gt;&lt;strong&gt;·&lt;/strong&gt; 内存：&lt;font color=&quot;orange&quot;&gt;4GB&lt;/font&gt;&lt;br&gt;&lt;strong&gt;·&lt;/strong&gt; 硬盘：&lt;font color=&quot;orange&quot;&gt;10GB，SSD&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;/a&gt;软件&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;软件名称&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;glibc&lt;/td&gt;
&lt;td&gt;&lt;font color=&quot;orange&quot;&gt;2.17&lt;/font&gt;及以上&lt;/td&gt;
&lt;td&gt;执行&lt;code&gt;ldd --version&lt;/code&gt;检查版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;make&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;m4&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wget&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unzip&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xz&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;redline-devel&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ncurses-devel&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zlib-devel&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&quot;orange&quot;&gt;gcc&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&quot;orange&quot;&gt;7.5.0&lt;/font&gt;及以上&lt;/td&gt;
&lt;td&gt;执行命令&lt;code&gt;gcc -v&lt;/code&gt;检查版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gcc-c++&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font color=&quot;orange&quot;&gt;cmake&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font color=&quot;orange&quot;&gt;3.9.0&lt;/font&gt;及以上&lt;/td&gt;
&lt;td&gt;执行命令&lt;code&gt;cmake --version&lt;/code&gt;检查版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gettext&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;curl&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;redhat-lsb-core&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libstdc++-static&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;仅在CentOS 8+、RedHat 8+、Fedora中需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;libasan&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;仅在CentOS 8+、RedHat 8+、Fedora中需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bzip2&lt;/td&gt;
&lt;td&gt;任意稳定版本&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;需要保证&lt;font color=&quot;orange&quot;&gt;gcc&lt;/font&gt;和&lt;font color=&quot;orange&quot;&gt;cmake&lt;/font&gt;的版本足够高，其他第三方软件将在安装（&lt;font color=&quot;orange&quot;&gt;cmake&lt;/font&gt;）阶段自动下载并安装到build目录中&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
    <category term="nebula" scheme="http://yoursite.com/tags/nebula/"/>
    
  </entry>
  
  <entry>
    <title>FastApi</title>
    <link href="http://yoursite.com/2022/05/23/FastApi/"/>
    <id>http://yoursite.com/2022/05/23/FastApi/</id>
    <published>2022-05-23T03:49:29.000Z</published>
    <updated>2022-06-27T07:29:21.649Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>FastAPI 是一个基于Python3.6+版本用于构建API的高性能web框架</p><p>官方文档链接：<a href="https://fastapi.tiangolo.com" target="_blank" rel="noopener">https://fastapi.tiangolo.com</a></p><p><img src="/2022/05/23/FastApi/A.png" alt></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>执行<code>pip install fastapi[all]</code>来安装fastapi所需要的全部python包和模块</p><p>也可以分开来安装来将应用程序部署到成产环境，其中uvicorn可以用作运行代码的服务器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install fastapi</span><br><span class="line">pip install uvicorn[standard]</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>最简单的Fastapi接口可以如下所示，制作一个根节点下的欢迎目录Hello World<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">root</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"message"</span>: <span class="string">"Hello World"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app=<span class="string">"main:app"</span>, reload=<span class="literal">True</span>, host=<span class="string">'127.0.0.1'</span>, port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure></p><p>进入对应的本地地址后会获得200的响应并收到json信息：<font color="#008080">{“message”: “Hello World”}</font></p><p><img src="/2022/05/23/FastApi/B.png" alt><br>继续跳转到<a href="http://localhost:8888/docs" target="_blank" rel="noopener">http://localhost:8888/docs</a>或者<a href="http://localhost:8888/redoc" target="_blank" rel="noopener">http://localhost:8888/redoc</a>将进入由Swagger UI提供的交互式API在线文档</p><p><img src="/2022/05/23/FastApi/C.png" alt><br><img src="/2022/05/23/FastApi/D.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;FastAPI 是一个基于Python3.6+版本用于构建API的高性能web框架&lt;/p&gt;
&lt;p&gt;官方文档链接：&lt;a href=&quot;https://fastapi.tiangolo.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://fastapi.tiangolo.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/05/23/FastApi/A.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;执行&lt;code&gt;pip install fastapi[all]&lt;/code&gt;来安装fastapi所需要的全部python包和模块&lt;/p&gt;
&lt;p&gt;也可以分开来安装来将应用程序部署到成产环境，其中uvicorn可以用作运行代码的服务器&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install fastapi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install uvicorn[standard]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
    <category term="FastApi" scheme="http://yoursite.com/tags/FastApi/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy：爬取steam热门游戏资料</title>
    <link href="http://yoursite.com/2022/05/01/Scrapy%EF%BC%9A%E7%88%AC%E5%8F%96steam%E7%83%AD%E9%97%A8%E6%B8%B8%E6%88%8F%E8%B5%84%E6%96%99/"/>
    <id>http://yoursite.com/2022/05/01/Scrapy%EF%BC%9A%E7%88%AC%E5%8F%96steam%E7%83%AD%E9%97%A8%E6%B8%B8%E6%88%8F%E8%B5%84%E6%96%99/</id>
    <published>2022-05-01T04:00:35.000Z</published>
    <updated>2022-06-27T07:39:57.505Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>有段时间没有做爬虫程序了，正好想起来还没有写过scrapy框架的博客，写个scrapy爬虫进行总结和回顾。本文代码已上传至github：<a href="https://github.com/elbadaernU404/steamgames" target="_blank" rel="noopener">https://github.com/elbadaernU404/steamgames</a></p><h2 id="1-Scrapy简介"><a href="#1-Scrapy简介" class="headerlink" title="1.Scrapy简介"></a>1.Scrapy简介</h2><p>搜索scrapy，可以很轻松的找到Scrapy的官方网站，正如其首页所描述的那样，scrapy是一款快速且强力的多线程异步爬虫框架，适合对静态页面（不配置中间件的情况下）的信息进行高速且大面积、高层次的抓取，避免了传统爬虫并发爬取网站数据的局限性，仅需要少量的代码即可完成爬虫工作，是一项高效率的主流爬虫工具。</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/AA.png" alt="Scrapy"></p><h2 id="2-Scrapy框架原理"><a href="#2-Scrapy框架原理" class="headerlink" title="2.Scrapy框架原理"></a>2.Scrapy框架原理</h2><p>进入scrapy官网，可以找到官方文档中对框架最新的描述如下：</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/A.png" alt="Scrapy运行结构"><br><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/B.png" alt="官方文档"></p><p>总结后就是：<br>scrapy框架中共包括了<strong>引擎（Scrapy Engine）、Item 字段、调度器（Scheduler）、调度中间件（Scheduler Middewares）、下载器（Downloader）、下载器中间件（Downloader Middlewares）、爬虫程序（Spiders）、爬虫中间件（Spider Middlewares）</strong>和<strong>管道（Pipeline）</strong></p><p>1.scrapy引擎会从爬虫程序中获取初始请求；<br>2.scrapy引擎通过调度器（Scheduler）调度Requests并要求获取下一个Requests；<br>3.调度器将下一个请求返回至scrapy引擎；<br>4.scrapy引擎通过下载中间件将请求发送到下载器（Downloader）当中，完成一次下载后下载器会生成Response并发送给scrapy引擎；<br>5.scrapy引擎接受下载器的Response交给爬虫程序。爬虫完成对Response的处理后，将抓取的数据和新的Requests返回给scrapy引擎，scrapy引擎将数据处理完毕后交给Item管道，再将处理的请求发送给调度器，执行下一轮工作；<br>6.重复上述步骤，直到不再有来自调度器的请求，爬虫程序结束。<br><a id="more"></a></p><h2 id="3-制作Scrapy爬虫程序"><a href="#3-制作Scrapy爬虫程序" class="headerlink" title="3.制作Scrapy爬虫程序"></a>3.制作Scrapy爬虫程序</h2><h3 id="3-1-目标网站：Steam商店-lt-s-team-gt"><a href="#3-1-目标网站：Steam商店-lt-s-team-gt" class="headerlink" title="3.1 目标网站：Steam商店&lt;s.team&gt;"></a>3.1 目标网站：Steam商店&lt;s.team&gt;</h3><p>完整域名：<a href="https://store.steampowered.com/" target="_blank" rel="noopener">https://store.steampowered.com/</a><br><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/C.png" alt="steam平台官网"></p><h3 id="3-2-目标数据"><a href="#3-2-目标数据" class="headerlink" title="3.2 目标数据"></a>3.2 目标数据</h3><p>爬虫要提取的数据为Steam商店中全球热销榜中的游戏信息，包括：<br><strong>·</strong> 游戏名称<br><strong>·</strong> 链接<br><strong>·</strong> 发售日期<br><strong>·</strong> 好评率<br><strong>·</strong> 折扣<br><strong>·</strong> 价格（原价、折扣价，因为挂了梯子所以货币显示的是新台币）</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/D.png" alt="Steam热销榜"><br><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/E.png" alt="Steam游戏链接"><br>检查元素，找到各数据的xpath</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/F.png" alt="获取xpath"><br>可以在chrome浏览器插件xpath helper中验证xpath是否能获取目标数据</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/G.png" alt="xpath helper"></p><h3 id="3-3-创建Scrapy项目"><a href="#3-3-创建Scrapy项目" class="headerlink" title="3.3 创建Scrapy项目"></a>3.3 创建Scrapy项目</h3><p>启动pycharm，在pycharm的终端中进入存放pycharm程序的目录，新建一个项目steamgames。在终端中输入：</p><font size="4" color="orange"><strong>scrapy</strong></font> <font size="4" color="#008080"><strong>startproject steamgames</strong></font><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/H.png" alt="项目创建"><br>成功创建项目后，会得到爬虫项目的根目录steamgames文件夹，其中包含有框架已经创建号的python程序：</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/I.png" alt="项目目录"></p><h3 id="3-4-创建爬虫程序"><a href="#3-4-创建爬虫程序" class="headerlink" title="3.4 创建爬虫程序"></a>3.4 创建爬虫程序</h3><p>进入项目目录后，在终端中输入：<font size="4" color="orange"><strong>scrapy</strong></font> <font size="4" color="#008080"><strong>genspider test store.steampowered.com</strong></font></p><p>完成对爬虫程序的创建，命名为test</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/J.png" alt="爬虫创建"></p><h3 id="3-5-程序制作"><a href="#3-5-程序制作" class="headerlink" title="3.5 程序制作"></a>3.5 程序制作</h3><h4 id="3-5-1-编写items-py"><a href="#3-5-1-编写items-py" class="headerlink" title="3.5.1 编写items.py"></a>3.5.1 编写items.py</h4><p>首先在目录的items.py文件中添加要爬取数据的item字段,对应的信息分别为上述的<br><strong>·</strong> 游戏名称<br><strong>·</strong> 链接<br><strong>·</strong> 发售日期<br><strong>·</strong> 好评率<br><strong>·</strong> 折扣<br><strong>·</strong> 价格（原价、折扣价）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SteamgamesItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line"></span><br><span class="line">    link = scrapy.Field()</span><br><span class="line"></span><br><span class="line">    time = scrapy.Field()</span><br><span class="line"></span><br><span class="line">    evaluate = scrapy.Field()</span><br><span class="line"></span><br><span class="line">    discount = scrapy.Field()</span><br><span class="line"></span><br><span class="line">    price = scrapy.Field()</span><br><span class="line">    <span class="comment">#pass</span></span><br></pre></td></tr></table></figure></p><h4 id="3-5-2-修改settings-py"><a href="#3-5-2-修改settings-py" class="headerlink" title="3.5.2 修改settings.py"></a>3.5.2 修改settings.py</h4><p>首先因为是学习用途，关闭遵守robots协议</p><p>robots协议全称“网络爬虫排除标准”，又称爬虫协议、机器人协议等，它规定着搜索引擎抓取网站时所能抓取的内容，是网络爬虫爬行网站时第一个需要访问的文件，该文件位于网站的根目录下，文件名是robots.txt，主要用于保护网站的隐私，来防止网站重要的信息被泄露，对网站安全起到一定的作用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><p>接下来启用管道程序，用于后续的数据存储。其中数字“300”表示每个管道执行的优先级，数字越小优先级越高，一般不超过1000<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">'steamgames.pipelines.SteamgamesPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-5-3-scrapy-shell"><a href="#3-5-3-scrapy-shell" class="headerlink" title="3.5.3 scrapy shell"></a>3.5.3 scrapy shell</h4><p>可以通过scrapy shell + “linkurl”的方式进入scrapy shell，对项目进行测试，如测试使用的xpath是否正常获得了值（未受到反爬手段影响）</p><p>这里在终端中输入<font size="4" color="orange"><strong>scrapy</strong></font> <font size="4" color="#008080"><strong>shell</strong></font> <font size="4" color="blue"><strong>“<a href="https://store.steampowered.com/search/?filter=globaltopsellers&amp;os=win&quot;" target="_blank" rel="noopener">https://store.steampowered.com/search/?filter=globaltopsellers&amp;os=win&quot;</a></strong></font></p><p>成功进入scrapy shell：</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/K.png" alt="scrapy shell"><br>进行xpath测试，输入：</p><font size="4" color="#008080"><strong>response.xpath(“//*[@id=’search_resultsRows’]/a/div[2]/div[4]/div[1]/span/text()”).extract()</strong></font><br><font size="4" color="#008080"><strong>response.xpath(“//*[@id=’search_resultsRows’]/a/div[2]/div[1]/span/text()”).extract()</strong></font><p>得到结果，测试成功：</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/L.png" alt="scrapy shell测试"></p><h4 id="3-5-4-制作爬虫程序test-py"><a href="#3-5-4-制作爬虫程序test-py" class="headerlink" title="3.5.4 制作爬虫程序test.py"></a>3.5.4 制作爬虫程序test.py</h4><p>进入已经生成好的test.py程序当中，程序中已存在的代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'test'</span></span><br><span class="line">allowed_domains = [<span class="string">'store.steampowered.com'</span>]</span><br><span class="line">start_urls = [<span class="string">'https://store.steampowered.com/search/?filter=globaltopsellers&amp;os=win'</span>]</span><br></pre></td></tr></table></figure></p><p>分别表示爬虫的名称、爬取的域名界限（网站内）、爬虫的起始网址</p><p>爬虫程序可以有多个，爬取的网址子路由也可以有多个，但是不能超出一开始设定的范围之外</p><p>在类<font color="orange">TestSpider</font>中，函数parse名称不可变，因为其类本身继承自scrapy的Spider，我们只是改写其中的方法，实现爬虫功能。</p><p>为了防止在函数结尾return item导致整个函数终止运行，而不能继续完成之后的数据传输进管道程序中，故这里使用的是yield关键字实现一个迭代器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    node_list = response.xpath(<span class="string">"//*[@id='search_resultsRows']/a"</span>)</span><br><span class="line">    print(node_list)</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">        item = SteamgamesItem()</span><br><span class="line">        name = node.xpath(<span class="string">"./div[2]/div[1]/span/text()"</span>).extract()</span><br><span class="line">        link = node.xpath(<span class="string">"./@href"</span>).extract()</span><br><span class="line">        time = node.xpath(<span class="string">"./div[2]/div[2]/text()"</span>).extract()</span><br><span class="line">        evaluate = node.xpath(<span class="string">"./div[2]/div[3]/span/@data-tooltip-html"</span>).extract()</span><br><span class="line">        discount = node.xpath(<span class="string">"./div[2]/div[4]/div[1]/span/text()"</span>).extract()</span><br><span class="line">        price = node.xpath(<span class="string">'normalize-space(./div[2]/div[4]/div[2])'</span>).extract()</span><br><span class="line"></span><br><span class="line">        item[<span class="string">'name'</span>] = name[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'link'</span>] = link[<span class="number">0</span>]</span><br><span class="line">        tem[<span class="string">'time'</span>] = time[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'evaluate'</span>] = evaluate[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'discount'</span>] = discount[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'price'</span>] = price[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></p><p>到这里可以使用命令<font size="4" color="orange"><strong>scrapy</strong></font> <font size="4" color="#008080"><strong>crawl test -o steamgames.json</strong></font>来将结果直接输出为json格式的文件</p><p>但是测试后如果报错：</p><p><strong>·</strong> <font size="4" color="red"><strong>KeyError: Spider not found</strong></font><br>可能是由于运行的爬虫文件与test.py中的爬虫名称不符，或者创建的爬虫文件未能放入spiders文件夹当中，检查即可</p><p><strong>·</strong> <font size="4" color="red"><strong>IndexError: list index out of range</strong></font><br>因为并不是所有游戏列出了折扣、折扣价格等情况，所以在得到空列表时会出现异常，增加异常处理，如果发生异常则输出为“暂时没有折扣”，或“详情请查阅游戏链接”即可</p><p>修改函数代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    node_list = response.xpath(<span class="string">"//*[@id='search_resultsRows']/a"</span>)</span><br><span class="line">    print(node_list)</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">        item = SteamgamesItem()</span><br><span class="line">        name = node.xpath(<span class="string">"./div[2]/div[1]/span/text()"</span>).extract()</span><br><span class="line">        link = node.xpath(<span class="string">"./@href"</span>).extract()</span><br><span class="line">        time = node.xpath(<span class="string">"./div[2]/div[2]/text()"</span>).extract()</span><br><span class="line">        evaluate = node.xpath(<span class="string">"./div[2]/div[3]/span/@data-tooltip-html"</span>).extract()</span><br><span class="line">        discount = node.xpath(<span class="string">"./div[2]/div[4]/div[1]/span/text()"</span>).extract()</span><br><span class="line">        price = node.xpath(<span class="string">'normalize-space(./div[2]/div[4]/div[2])'</span>).extract()</span><br><span class="line"></span><br><span class="line">        item[<span class="string">'name'</span>] = name[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'link'</span>] = link[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            item[<span class="string">'time'</span>] = time[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            item[<span class="string">'time'</span>] = <span class="string">'See link for details'</span></span><br><span class="line">        item[<span class="string">'evaluate'</span>] = evaluate[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            item[<span class="string">'discount'</span>] = discount[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            item[<span class="string">'discount'</span>] = <span class="string">'No discount for now'</span></span><br><span class="line">        item[<span class="string">'price'</span>] = price[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></p><h4 id="3-5-5-制作管道程序pipelines-py"><a href="#3-5-5-制作管道程序pipelines-py" class="headerlink" title="3.5.5 制作管道程序pipelines.py"></a>3.5.5 制作管道程序pipelines.py</h4><p>爬虫主体完成之后，需要编写数据存储的管道程序。这里使用<font color="orange">open</font>方法，创建一个以json格式保存的steamgames.csv文件,没完成一组数据下载，进行换行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SteamgamesPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.f=open(<span class="string">'steamgames.csv'</span>,<span class="string">'wb+'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        content=json.dumps(dict(item),ensure_ascii=<span class="literal">False</span>)+<span class="string">',\n'</span></span><br><span class="line">        self.f.write(content.encode(encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure></p><p>输出后得到结果，仔细查看有位置错位、长空格等情况：</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/1.png" alt="异常结果-1"><br><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/2.png" alt="异常结果-2"><br><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/3.png" alt="异常结果-3"><br>发现问题的原因：因为json数据是以“，”进行分隔的，而steam商城中的年份、价格、人数等信息都是以“，”分隔千分位，以及折扣价格的标签中带有换行符，所以会造成误差。</p><p>为了实现正常的存储和格式的美观，继续完善test.py爬虫程序</p><p>可以通过xpath(<font color="green">‘normalize-space(./…)’</font>)或使用字符串方法<font color="orange">strip()</font>的方式去除文字中多余的空格</p><p>使用列表推导式和字符串方法<font color="orange">replace()</font>结合，将数据中的“，”替换成空格或其他字符：[i.replace(<font color="green">“,”</font>,<font color="green">“”</font>) for i in node.xpath(<font color="green">‘…’</font>).extract()]</p><p>完整的test.py文件如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> steamgames.items <span class="keyword">import</span> SteamgamesItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'test'</span></span><br><span class="line">    allowed_domains = [<span class="string">'store.steampowered.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://store.steampowered.com/search/?filter=globaltopsellers&amp;os=win'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        node_list = response.xpath(<span class="string">"//*[@id='search_resultsRows']/a"</span>)</span><br><span class="line">        print(node_list)</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">            item = SteamgamesItem()</span><br><span class="line">            name = node.xpath(<span class="string">"./div[2]/div[1]/span/text()"</span>).extract()</span><br><span class="line">            link = node.xpath(<span class="string">"./@href"</span>).extract()</span><br><span class="line">            time = [i.replace(<span class="string">","</span>,<span class="string">" "</span>) <span class="keyword">for</span> i <span class="keyword">in</span> node.xpath(<span class="string">"./div[2]/div[2]/text()"</span>).extract()]</span><br><span class="line">            evaluate = [j.replace(<span class="string">","</span>,<span class="string">" "</span>) <span class="keyword">for</span> j <span class="keyword">in</span> [i.replace(<span class="string">"&lt;br&gt;"</span>,<span class="string">","</span>) <span class="keyword">for</span> i <span class="keyword">in</span> node.xpath(<span class="string">"./div[2]/div[3]/span/@data-tooltip-html"</span>).extract()]]</span><br><span class="line">            discount = node.xpath(<span class="string">"./div[2]/div[4]/div[1]/span/text()"</span>).extract()</span><br><span class="line">            price = [i.replace(<span class="string">","</span>,<span class="string">""</span>) <span class="keyword">for</span> i <span class="keyword">in</span> node.xpath(<span class="string">'normalize-space(./div[2]/div[4]/div[2])'</span>).extract()]</span><br><span class="line"></span><br><span class="line">            item[<span class="string">'name'</span>] = name[<span class="number">0</span>]</span><br><span class="line">            item[<span class="string">'link'</span>] = link[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                item[<span class="string">'time'</span>] = time[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                item[<span class="string">'time'</span>] = <span class="string">'See link for details'</span></span><br><span class="line">            item[<span class="string">'evaluate'</span>] = evaluate[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                item[<span class="string">'discount'</span>] = discount[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                item[<span class="string">'discount'</span>] = <span class="string">'No discount for now'</span></span><br><span class="line">            item[<span class="string">'price'</span>] = price[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></p><h2 id="4-结果"><a href="#4-结果" class="headerlink" title="4.结果"></a>4.结果</h2><p>完成scrapy爬虫后，执行<font size="4" color="orange"><strong>scrapy</strong></font> <font size="4" color="#008080"><strong>crawl test</strong></font>最终得到一个.csv格式的输出结果：</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/M.png" alt="爬虫执行"><br><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/N.png" alt="steam热销游戏"><br>至此，scrapy框架下的爬虫程序完成，已获取到初步的游戏资讯，可以据此对其进行进一步的数据清洗和分析</p><h3 id="4-1-pandas数据清洗"><a href="#4-1-pandas数据清洗" class="headerlink" title="4.1 pandas数据清洗"></a>4.1 pandas数据清洗</h3><p>将文件重新输出一份json格式的steamgames.json文件，在steamgames当前目录下新建pd_steamgames.py文件准备用于数据的处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_json(<span class="string">'steamgames.json'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(df.to_string())</span><br></pre></td></tr></table></figure></p><p>输出后得到一个pandas DataFrame类型的结果:</p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/O.png" alt="DataFrame"><br>这里制定一个清洗目标：仅筛选出打折的热销游戏<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_json(<span class="string">'steamgames.json'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">df = df[df[<span class="string">'discount'</span>]!=<span class="string">'No discount for now'</span>]</span><br><span class="line">print(df.to_string())</span><br></pre></td></tr></table></figure></p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/P.png" alt="steam折扣中的热销游戏"><br>进而对数据进行分析，拟找到折扣与好评率对应关系，研究折扣是否会对评价造成影响。这里丢弃掉除评价和折扣外的其他数据行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df[df[<span class="string">'discount'</span>]!=<span class="string">'No discount for now'</span>].drop([<span class="string">'name'</span>,<span class="string">'link'</span>,<span class="string">'time'</span>,<span class="string">'price'</span>],axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/Q.png" alt="评价与折扣"><br>利用正则表达式清洗掉评价数据中的人数和字符串等信息，同时给数据清除原始的索引：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.columns:</span><br><span class="line">    df[i] = df[i].str.extract(<span class="string">'(\d+%?)'</span>)</span><br><span class="line">print(df.to_string(index=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure></p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/R.png" alt="筛选出的数据"></p><h3 id="4-2-数据分析可视化"><a href="#4-2-数据分析可视化" class="headerlink" title="4.2 数据分析可视化"></a>4.2 数据分析可视化</h3><p>完成数据的清洗后，导入matpoltlib库，对数据进行可视化展示，完整的pd_steamgames.py文件代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">df = pd.read_json(<span class="string">'steamgames.json'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">df = df[df[<span class="string">'discount'</span>]!=<span class="string">'No discount for now'</span>].drop([<span class="string">'name'</span>,<span class="string">'link'</span>,<span class="string">'time'</span>,<span class="string">'price'</span>],axis=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.columns:</span><br><span class="line">    df[i] = df[i].str.extract(<span class="string">'(\d+)'</span>)</span><br><span class="line"></span><br><span class="line">df=df.astype(float)</span><br><span class="line">df.plot()</span><br><span class="line"></span><br><span class="line">my_y_ticks = [<span class="number">20</span>,<span class="number">40</span>,<span class="number">60</span>,<span class="number">80</span>,<span class="number">100</span>]</span><br><span class="line">plt.yticks(my_y_ticks)</span><br><span class="line">plt.xlabel(<span class="string">'Number of games'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'favorable rate(%)'</span>)</span><br><span class="line">plt.title(<span class="string">'evaluate &amp; discount'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><img src="/2022/05/01/Scrapy：爬取steam热门游戏资料/S.png" alt="评价与折扣的关系"><br>至此，不难得出两者之间并没有严重的线性依赖关系。有的游戏折扣很高，好评率也一直很高，有的游戏给出很少折扣，好评率却依然处于中高水平。当然这和本次使用的数据为全球热销游戏也有一定关系，数据量也较为有限。时间关系这些都是之后将解决的问题，继续尝试多挖掘数据，再多多去做数据分析</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有段时间没有做爬虫程序了，正好想起来还没有写过scrapy框架的博客，写个scrapy爬虫进行总结和回顾。本文代码已上传至github：&lt;a href=&quot;https://github.com/elbadaernU404/steamgames&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/elbadaernU404/steamgames&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-Scrapy简介&quot;&gt;&lt;a href=&quot;#1-Scrapy简介&quot; class=&quot;headerlink&quot; title=&quot;1.Scrapy简介&quot;&gt;&lt;/a&gt;1.Scrapy简介&lt;/h2&gt;&lt;p&gt;搜索scrapy，可以很轻松的找到Scrapy的官方网站，正如其首页所描述的那样，scrapy是一款快速且强力的多线程异步爬虫框架，适合对静态页面（不配置中间件的情况下）的信息进行高速且大面积、高层次的抓取，避免了传统爬虫并发爬取网站数据的局限性，仅需要少量的代码即可完成爬虫工作，是一项高效率的主流爬虫工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/05/01/Scrapy：爬取steam热门游戏资料/AA.png&quot; alt=&quot;Scrapy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-Scrapy框架原理&quot;&gt;&lt;a href=&quot;#2-Scrapy框架原理&quot; class=&quot;headerlink&quot; title=&quot;2.Scrapy框架原理&quot;&gt;&lt;/a&gt;2.Scrapy框架原理&lt;/h2&gt;&lt;p&gt;进入scrapy官网，可以找到官方文档中对框架最新的描述如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/05/01/Scrapy：爬取steam热门游戏资料/A.png&quot; alt=&quot;Scrapy运行结构&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2022/05/01/Scrapy：爬取steam热门游戏资料/B.png&quot; alt=&quot;官方文档&quot;&gt;&lt;/p&gt;
&lt;p&gt;总结后就是：&lt;br&gt;scrapy框架中共包括了&lt;strong&gt;引擎（Scrapy Engine）、Item 字段、调度器（Scheduler）、调度中间件（Scheduler Middewares）、下载器（Downloader）、下载器中间件（Downloader Middlewares）、爬虫程序（Spiders）、爬虫中间件（Spider Middlewares）&lt;/strong&gt;和&lt;strong&gt;管道（Pipeline）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.scrapy引擎会从爬虫程序中获取初始请求；&lt;br&gt;2.scrapy引擎通过调度器（Scheduler）调度Requests并要求获取下一个Requests；&lt;br&gt;3.调度器将下一个请求返回至scrapy引擎；&lt;br&gt;4.scrapy引擎通过下载中间件将请求发送到下载器（Downloader）当中，完成一次下载后下载器会生成Response并发送给scrapy引擎；&lt;br&gt;5.scrapy引擎接受下载器的Response交给爬虫程序。爬虫完成对Response的处理后，将抓取的数据和新的Requests返回给scrapy引擎，scrapy引擎将数据处理完毕后交给Item管道，再将处理的请求发送给调度器，执行下一轮工作；&lt;br&gt;6.重复上述步骤，直到不再有来自调度器的请求，爬虫程序结束。&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
    <category term="scrapy" scheme="http://yoursite.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫：识别网页的验证码（tesseract-OCR）</title>
    <link href="http://yoursite.com/2022/04/29/Python%E7%88%AC%E8%99%AB%EF%BC%9A%E8%AF%86%E5%88%AB%E7%BD%91%E9%A1%B5%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%EF%BC%88tesseract-OCR%EF%BC%89/"/>
    <id>http://yoursite.com/2022/04/29/Python%E7%88%AC%E8%99%AB%EF%BC%9A%E8%AF%86%E5%88%AB%E7%BD%91%E9%A1%B5%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%EF%BC%88tesseract-OCR%EF%BC%89/</id>
    <published>2022-04-29T07:00:29.000Z</published>
    <updated>2022-06-27T07:39:04.522Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>在实际的爬虫操作中，处于安全等原因网站会设置非常多的反爬虫手段来限制网络爬虫，最常见的比如设置图形验证码，来识别访客是否为机器人</p><p>但是由于python拥有许多强大的图像识别库，所以最简单也是最原始的图形验证码目前已经慢慢没落了，我找了很久发现中国知网的注册界面目前居然还在使用中~ ^ ^</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/0.png" alt></p><h2 id="获取网页验证码"><a href="#获取网页验证码" class="headerlink" title="获取网页验证码"></a>获取网页验证码</h2><p>首先是获取验证码图片的目标链接，我使用xpath找到html标签中验证码的src链接，读取内容后发现并不能得到生成验证码的对应id，以为是知网做了对爬虫头的限制，于是在headers里添加了<font color="green">“Referer”</font>和<font color="green">“Accept-Encoding”</font>等信息，但是并没有效果。抓包在Doc中发现网页HTTP请求的方法为”<font color="orange">GET</font>“方法，尝试不加id也得到了验证码图片</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/A.png" alt><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate, br"</span>,</span><br><span class="line">    <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>,</span><br><span class="line">    <span class="string">"scheme"</span>: <span class="string">"https"</span>,</span><br><span class="line">    <span class="string">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>,</span><br><span class="line">    <span class="string">"Cookie"</span>: <span class="string">"U:M_distinctid=1809edfcf6e8ff-088ab0a6edb385-17333273-1fa400-1809edfcf6f9fe; _pk_ref=["</span><span class="string">","</span><span class="string">",1651932918,'https://www.baidu.com/link?url=PnlS4wubLFxXVNXrTBRCZMAhA0P5TZLlCBAhBvXfLke&amp;wd=&amp;eqid=e52482a8001102070000000562767ee2']; Ecp_ClientId=1220507221503170167; Ecp_IpLoginFail=22050736.161.51.128; Ecp_ClientIp=36.161.51.128; language=chs; _pk_id=2ce0e7fb-229f-4440-a78b-57771deac2fe.1651932918.1.1651933578.1651932918.; ASP.NET_SessionId=he1no3kmgo3bwuktv1xa1lhs; SID_mycnki=020101"</span>,</span><br><span class="line">    <span class="string">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36"</span>,</span><br><span class="line">    <span class="string">"Referer"</span>: <span class="string">"https://www.cnki.net/"</span></span><br><span class="line">    <span class="string">"Sec-Fetch-Dest:"</span> <span class="string">'document'</span>,</span><br><span class="line">    <span class="string">"Sec-Fetch-Mode"</span>: <span class="string">'navigate'</span>,</span><br><span class="line">    <span class="string">"Sec-Fetch-Site"</span>: <span class="string">'same-origin'</span>,</span><br><span class="line">    <span class="string">"Sec-Fetch-User"</span>: <span class="string">'?1'</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"https://my.cnki.net/Register/CommonRegister.aspx?returnUrl=https://www.cnki.net#"</span></span><br><span class="line">r = requests.get(url, headers=headers).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">html = etree.HTML(r)</span><br><span class="line">link=html.xpath(<span class="string">'//*[@id="commonRe"]/div[10]/div[3]/a/img/@src'</span>)[<span class="number">0</span>]</span><br><span class="line">img_url = <span class="string">"https://my.cnki.net/Register/"</span> + link</span><br><span class="line">img = requests.get(img_url, headers=headers,stream=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'checkcode.jpg'</span>,<span class="string">'wb'</span>)<span class="keyword">as</span> file:</span><br><span class="line">    file.write(img.raw.read())</span><br></pre></td></tr></table></figure></p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/1.png" alt><br><a id="more"></a></p><h2 id="Tesserocr库"><a href="#Tesserocr库" class="headerlink" title="Tesserocr库"></a>Tesserocr库</h2><p>Tesserocr是python的一个OCR识别库，是通过对tesseract库做API封装来实现功能，核心仍是tesseract。所以需提前安装tesseract库来进行支持</p><h3 id="安装Tesseract"><a href="#安装Tesseract" class="headerlink" title="安装Tesseract"></a>安装Tesseract</h3><p>进入官网链接<a href="https://digi.bib.uni-mannheim.de/tesseract/" target="_blank" rel="noopener">https://digi.bib.uni-mannheim.de/tesseract/</a>，找到当前合适的版本，下载安装程序</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/B.png" alt><br>安装过程中可以勾选安装额外的语言文件，添加对包括中文等多语种的支持</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/C.png" alt><br>安装完成后去系统设置中添加环境变量</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/D.png" alt><br><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/E.png" alt><br>新增一个变量<font color="orange">TESSDATA_PREFIX</font></p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/F.png" alt><br>打开CMD，输入<font size="4" color="#008080">tesseract -v</font>，此时出现版本信息，tesseract已经安装完成了</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/G.png" alt><br>如果添加后控制台仍提示”tesseract不是内部或者外部命令”，继续到系统变量的path中添加<br>“<font size="4" color="#008080">%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem</font>“<br>即可</p><h3 id="安装Tesserocr"><a href="#安装Tesserocr" class="headerlink" title="安装Tesserocr"></a>安装Tesserocr</h3><p>安装完Tesseract后，继续安装python的OCR识别库,打开CMD或Pycharm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br><span class="line">pip install pytesseract</span><br></pre></td></tr></table></figure></p><p>完成后找到pytesseract文件，将tesseract.exe程序的路径添加进去（注：不同版本路径代码在程序中的位置不一定相同）</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/H.png" alt><br><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/I.png" alt><br>最后再执行安装tesserocr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tesserocr</span><br></pre></td></tr></table></figure><p>如果报错，进入tesserocr在github的官网<a href="https://github.com/simonflueckiger/tesserocr-windows_build/releases" target="_blank" rel="noopener">https://github.com/simonflueckiger/tesserocr-windows_build/releases</a>，下载对应版本的whl文件进行手动安装</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/J.png" alt><br>进入对应路径，来到控制台执行<font size="4" color="#008080">pip install tesserocr-2.5.2-cp37-cp37m-win_amd64.whl</font></p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/K.png" alt><br>最后显示tesserocr安装成功</p><h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><h3 id="灰度图"><a href="#灰度图" class="headerlink" title="灰度图"></a>灰度图</h3><p>使用Image的open方法将下载的checkcode.jpg打开，得到一个PIL.Image.Image对象，可以通过convert方法来将RGB彩色图片转换为灰度图<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">"checkcode.jpg"</span>)</span><br><span class="line">img.show()</span><br><span class="line">img_grey = img.convert(<span class="string">"L"</span>)</span><br><span class="line">img_grey.show()</span><br></pre></td></tr></table></figure></p><p>得到原始图片和灰度图像，使用tesserocr库进行识别，由于图像的干绕因素和噪点还比较多，目前还不能识别出准确结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">"checkcode.jpg"</span>)</span><br><span class="line">img.show()</span><br><span class="line">img_grey = img.convert(<span class="string">"L"</span>)</span><br><span class="line">img_grey.show()</span><br><span class="line">img_grey.save(<span class="string">'checkcode_grey.jpg'</span>)</span><br><span class="line">checkcode = tesserocr.image_to_text(img)</span><br><span class="line">checkcode_grey = tesserocr.image_to_text(img_grey)</span><br><span class="line">print(<span class="string">f"checkcode:<span class="subst">&#123;checkcode&#125;</span>"</span>)</span><br><span class="line">print(<span class="string">f"checkcode_grey:<span class="subst">&#123;checkcode_grey&#125;</span>"</span>)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/2.png" alt><br><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/3.png" alt></p><h3 id="二值化灰度"><a href="#二值化灰度" class="headerlink" title="二值化灰度"></a>二值化灰度</h3><p>从得到的灰度图结果来看，需要识别的数字和字母（主体部分）明显要比干绕部分清晰的，灰度也更重，所以接下来可对灰度图进行二值化，即设定一个阈值，每个像素的灰度将依照和阈值的关系修改为黑色或白色，这样就可以很好的凸显出主体部分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_table</span><span class="params">(threshold=<span class="number">125</span>)</span>:</span></span><br><span class="line">    table = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt; threshold:</span><br><span class="line">            table.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            table.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> table</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">'checkcode_grey.jpg'</span>)</span><br><span class="line">table = bin_table()</span><br><span class="line">bin = img.point(table, <span class="string">'1'</span>)</span><br><span class="line">bin.save(<span class="string">'checkcode_bin.jpg'</span>)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/4.png" alt><br>此时再对图像进行识别，得到的结果为”g4YS”,已经很接近了，但是问题出在哪里呢？</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/5.png" alt><br>将图像放大：</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/6.png" alt><br>可以发现图像中还要很多噪点</p><h3 id="图像降噪"><a href="#图像降噪" class="headerlink" title="图像降噪"></a>图像降噪</h3><p>py中降噪的方法有很多，像椒盐降噪、高斯降噪、均值滤波降噪等，需要找到合适的降噪方法。这里根据图片，使用8邻域降噪的方法，代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_9_region_new</span><span class="params">(img, x, y)</span>:</span></span><br><span class="line">    <span class="string">'''确定噪点 '''</span></span><br><span class="line">    cur_pixel = img.getpixel((x, y))  <span class="comment"># 当前像素点的值</span></span><br><span class="line">    width = img.width</span><br><span class="line">    height = img.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cur_pixel == <span class="number">1</span>:  <span class="comment"># 如果当前点为白色区域,则不统计邻域值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 因当前图片的四周都有黑点，所以周围的黑点可以去除</span></span><br><span class="line">    <span class="keyword">if</span> y &lt; <span class="number">3</span>:  <span class="comment"># 本例中，前两行的黑点都可以去除</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> y &gt; height - <span class="number">3</span>:  <span class="comment"># 最下面两行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># y不在边界</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">3</span>:  <span class="comment"># 前两列</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> x == width - <span class="number">1</span>:  <span class="comment"># 右边非顶点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 具备9领域条件的</span></span><br><span class="line">            sum = img.getpixel((x - <span class="number">1</span>, y - <span class="number">1</span>)) \</span><br><span class="line">                  + img.getpixel((x - <span class="number">1</span>, y)) \</span><br><span class="line">                  + img.getpixel((x - <span class="number">1</span>, y + <span class="number">1</span>)) \</span><br><span class="line">                  + img.getpixel((x, y - <span class="number">1</span>)) \</span><br><span class="line">                  + cur_pixel \</span><br><span class="line">                  + img.getpixel((x, y + <span class="number">1</span>)) \</span><br><span class="line">                  + img.getpixel((x + <span class="number">1</span>, y - <span class="number">1</span>)) \</span><br><span class="line">                  + img.getpixel((x + <span class="number">1</span>, y)) \</span><br><span class="line">                  + img.getpixel((x + <span class="number">1</span>, y + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">9</span> - sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collect_noise_point</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="string">'''收集所有的噪点'''</span></span><br><span class="line">    noise_point_list = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(img.width):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(img.height):</span><br><span class="line">            res_9 = sum_9_region_new(img, x, y)</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt; res_9 &lt; <span class="number">3</span>) <span class="keyword">and</span> img.getpixel((x, y)) == <span class="number">0</span>:  <span class="comment"># 找到孤立点</span></span><br><span class="line">                pos = (x, y)</span><br><span class="line">                noise_point_list.append(pos)</span><br><span class="line">    <span class="keyword">return</span> noise_point_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_noise_pixel</span><span class="params">(img, noise_point_list)</span>:</span></span><br><span class="line">    <span class="string">'''根据噪点的位置信息，消除二值图片的黑点噪声'''</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> noise_point_list:</span><br><span class="line">        img.putpixel((item[<span class="number">0</span>], item[<span class="number">1</span>]), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bin = Image.open(<span class="string">'checkcode_bin.jpg'</span>)</span><br><span class="line">noise_point_list = collect_noise_point(bin)</span><br><span class="line">remove_noise_pixel(bin, noise_point_list)</span><br><span class="line">bin.save(<span class="string">'checkcode_fin.jpg'</span>)</span><br></pre></td></tr></table></figure></p><p>不过运行完成后任然带噪点，我才反应过来是保存的.jpg格式对图像进行了压缩造成的，不过整体思路没有问题。将代码整合到一起，再保存为.png格式，完整代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_9_region_new</span><span class="params">(img, x, y)</span>:</span></span><br><span class="line">    <span class="string">'''确定噪点 '''</span></span><br><span class="line">    cur_pixel = img.getpixel((x, y))  <span class="comment"># 当前像素点的值</span></span><br><span class="line">    width = img.width</span><br><span class="line">    height = img.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cur_pixel == <span class="number">1</span>:  <span class="comment"># 如果当前点为白色区域,则不统计邻域值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 因当前图片的四周都有黑点，所以周围的黑点可以去除</span></span><br><span class="line">    <span class="keyword">if</span> y &lt; <span class="number">3</span>:  <span class="comment"># 本例中，前两行的黑点都可以去除</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> y &gt; height - <span class="number">3</span>:  <span class="comment"># 最下面两行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># y不在边界</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">3</span>:  <span class="comment"># 前两列</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> x == width - <span class="number">1</span>:  <span class="comment"># 右边非顶点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 具备9领域条件的</span></span><br><span class="line">            sum = img.getpixel((x - <span class="number">1</span>, y - <span class="number">1</span>)) \</span><br><span class="line">                  + img.getpixel((x - <span class="number">1</span>, y)) \</span><br><span class="line">                  + img.getpixel((x - <span class="number">1</span>, y + <span class="number">1</span>)) \</span><br><span class="line">                  + img.getpixel((x, y - <span class="number">1</span>)) \</span><br><span class="line">                  + cur_pixel \</span><br><span class="line">                  + img.getpixel((x, y + <span class="number">1</span>)) \</span><br><span class="line">                  + img.getpixel((x + <span class="number">1</span>, y - <span class="number">1</span>)) \</span><br><span class="line">                  + img.getpixel((x + <span class="number">1</span>, y)) \</span><br><span class="line">                  + img.getpixel((x + <span class="number">1</span>, y + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">9</span> - sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collect_noise_point</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="string">'''收集所有的噪点'''</span></span><br><span class="line">    noise_point_list = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(img.width):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(img.height):</span><br><span class="line">            res_9 = sum_9_region_new(img, x, y)</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt; res_9 &lt; <span class="number">3</span>) <span class="keyword">and</span> img.getpixel((x, y)) == <span class="number">0</span>:  <span class="comment"># 找到孤立点</span></span><br><span class="line">                pos = (x, y)</span><br><span class="line">                noise_point_list.append(pos)</span><br><span class="line">    <span class="keyword">return</span> noise_point_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_noise_pixel</span><span class="params">(img, noise_point_list)</span>:</span></span><br><span class="line">    <span class="string">'''根据噪点的位置信息，消除二值图片的黑点噪声'''</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> noise_point_list:</span><br><span class="line">        img.putpixel((item[<span class="number">0</span>], item[<span class="number">1</span>]), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_table</span><span class="params">(threshold=<span class="number">125</span>)</span>:</span></span><br><span class="line">    <span class="string">'''获取灰度转二值的映射table,0表示黑色,1表示白色'''</span></span><br><span class="line">    table = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt; threshold:</span><br><span class="line">            table.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            table.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> table</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    img = Image.open(<span class="string">'checkcode.jpg'</span>)</span><br><span class="line">    img_grey = img.convert(<span class="string">'L'</span>)</span><br><span class="line">    table = bin_table()</span><br><span class="line">    bin = img_grey.point(table, <span class="string">'1'</span>)</span><br><span class="line">    noise_point_list = collect_noise_point(bin)</span><br><span class="line">    remove_noise_pixel(bin, noise_point_list)</span><br><span class="line">    bin.save(<span class="string">'checkcode_fin.png'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/6.5.png" alt><br>放大以后没有干扰：</p><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/7.png" alt></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">im = Image.open(<span class="string">'checkcode_bin.png'</span>)</span><br><span class="line">string = pytesseract.image_to_string(im)</span><br><span class="line"></span><br><span class="line">print(string)</span><br></pre></td></tr></table></figure><p><img src="/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/8.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在实际的爬虫操作中，处于安全等原因网站会设置非常多的反爬虫手段来限制网络爬虫，最常见的比如设置图形验证码，来识别访客是否为机器人&lt;/p&gt;
&lt;p&gt;但是由于python拥有许多强大的图像识别库，所以最简单也是最原始的图形验证码目前已经慢慢没落了，我找了很久发现中国知网的注册界面目前居然还在使用中~ ^ ^&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/0.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;获取网页验证码&quot;&gt;&lt;a href=&quot;#获取网页验证码&quot; class=&quot;headerlink&quot; title=&quot;获取网页验证码&quot;&gt;&lt;/a&gt;获取网页验证码&lt;/h2&gt;&lt;p&gt;首先是获取验证码图片的目标链接，我使用xpath找到html标签中验证码的src链接，读取内容后发现并不能得到生成验证码的对应id，以为是知网做了对爬虫头的限制，于是在headers里添加了&lt;font color=&quot;green&quot;&gt;“Referer”&lt;/font&gt;和&lt;font color=&quot;green&quot;&gt;“Accept-Encoding”&lt;/font&gt;等信息，但是并没有效果。抓包在Doc中发现网页HTTP请求的方法为”&lt;font color=&quot;orange&quot;&gt;GET&lt;/font&gt;“方法，尝试不加id也得到了验证码图片&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/A.png&quot; alt&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; lxml &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; etree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Accept&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;gzip, deflate, br&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;max-age=0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;scheme&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;accept-language&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;zh-CN,zh;q=0.9&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Cookie&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;U:M_distinctid=1809edfcf6e8ff-088ab0a6edb385-17333273-1fa400-1809edfcf6f9fe; _pk_ref=[&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;,1651932918,&#39;https://www.baidu.com/link?url=PnlS4wubLFxXVNXrTBRCZMAhA0P5TZLlCBAhBvXfLke&amp;amp;wd=&amp;amp;eqid=e52482a8001102070000000562767ee2&#39;]; Ecp_ClientId=1220507221503170167; Ecp_IpLoginFail=22050736.161.51.128; Ecp_ClientIp=36.161.51.128; language=chs; _pk_id=2ce0e7fb-229f-4440-a78b-57771deac2fe.1651932918.1.1651933578.1651932918.; ASP.NET_SessionId=he1no3kmgo3bwuktv1xa1lhs; SID_mycnki=020101&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Referer&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;https://www.cnki.net/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Sec-Fetch-Dest:&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;document&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Sec-Fetch-Mode&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;navigate&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Sec-Fetch-Site&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;same-origin&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Sec-Fetch-User&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;?1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;Upgrade-Insecure-Requests&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&quot;https://my.cnki.net/Register/CommonRegister.aspx?returnUrl=https://www.cnki.net#&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r = requests.get(url, headers=headers).content.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html = etree.HTML(r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;link=html.xpath(&lt;span class=&quot;string&quot;&gt;&#39;//*[@id=&quot;commonRe&quot;]/div[10]/div[3]/a/img/@src&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img_url = &lt;span class=&quot;string&quot;&gt;&quot;https://my.cnki.net/Register/&quot;&lt;/span&gt; + link&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img = requests.get(img_url, headers=headers,stream=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;checkcode.jpg&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;wb&#39;&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; file:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file.write(img.raw.read())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/04/29/Python爬虫：识别网页的验证码（tesseract-OCR）/1.png&quot; alt&gt;&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
    <category term="OCR" scheme="http://yoursite.com/tags/OCR/"/>
    
  </entry>
  
  <entry>
    <title>Numpy &amp; Pandas</title>
    <link href="http://yoursite.com/2022/03/01/Numpy-Pandas/"/>
    <id>http://yoursite.com/2022/03/01/Numpy-Pandas/</id>
    <published>2022-03-01T05:13:22.000Z</published>
    <updated>2022-06-27T07:35:40.856Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>本文主要记录一些Numpy和Pandas的方法</p><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><h3 id="1-惯用写法："><a href="#1-惯用写法：" class="headerlink" title="1.惯用写法："></a>1.惯用写法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="2-从列表生成一个矩阵："><a href="#2-从列表生成一个矩阵：" class="headerlink" title="2.从列表生成一个矩阵："></a>2.从列表生成一个矩阵：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]]))</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/A.png" alt="创建矩阵"></p><h3 id="3-创建全0或全1矩阵："><a href="#3-创建全0或全1矩阵：" class="headerlink" title="3.创建全0或全1矩阵："></a>3.创建全0或全1矩阵：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.zeros((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line">print(np.ones((<span class="number">5</span>,<span class="number">5</span>)))</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/B.png" alt="0/1矩阵"></p><h3 id="4-通过-shape得到当前矩阵的尺寸，通过-reshape-将当前矩阵转置"><a href="#4-通过-shape得到当前矩阵的尺寸，通过-reshape-将当前矩阵转置" class="headerlink" title="4.通过.shape得到当前矩阵的尺寸，通过.reshape()将当前矩阵转置"></a>4.通过<font color="orange">.shape</font>得到当前矩阵的尺寸，通过<font color="orange">.reshape()</font>将当前矩阵转置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.zeros((<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line">print(np.zeros((<span class="number">3</span>,<span class="number">4</span>)).shape)</span><br><span class="line">print(np.zeros((<span class="number">3</span>,<span class="number">4</span>)).reshape(<span class="number">4</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/C.png" alt="获取矩阵的尺寸，转置"></p><h3 id="5-使用arange-创建递增-递减的数列"><a href="#5-使用arange-创建递增-递减的数列" class="headerlink" title="5.使用arange()创建递增/递减的数列"></a>5.使用<font color="orange">arange()</font>创建递增/递减的数列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.arange(<span class="number">1</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/D.png" alt="arange()"></p><h3 id="6-使用linspace-获取一个等分的区间序列，第三个参数是输出样本的总数"><a href="#6-使用linspace-获取一个等分的区间序列，第三个参数是输出样本的总数" class="headerlink" title="6.使用linspace()获取一个等分的区间序列，第三个参数是输出样本的总数"></a>6.使用<font color="orange">linspace()</font>获取一个等分的区间序列，第三个参数是输出样本的总数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.linspace(<span class="number">1</span>,<span class="number">100</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/E.png" alt="linspace()"></p><h3 id="7-通过random-rand-生成随机数组"><a href="#7-通过random-rand-生成随机数组" class="headerlink" title="7.通过random.rand()生成随机数组"></a>7.通过<font color="orange">random.rand()</font>生成随机数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.random.rand(<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/F.png" alt="随机数组"></p><h3 id="8-Numpy中默认的数据类型为64位浮点数，可以在创建数组时使用dtype参数指定其他的数据类型"><a href="#8-Numpy中默认的数据类型为64位浮点数，可以在创建数组时使用dtype参数指定其他的数据类型" class="headerlink" title="8.Numpy中默认的数据类型为64位浮点数，可以在创建数组时使用dtype参数指定其他的数据类型"></a>8.Numpy中默认的数据类型为64位浮点数，可以在创建数组时使用<font color="orange">dtype</font>参数指定其他的数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.ones((<span class="number">3</span>,<span class="number">4</span>),dtype=np.float32))</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/G.png" alt="numpy数据类型"></p><h3 id="9-对先有的数组，也可以使用astype-来更改数据类型"><a href="#9-对先有的数组，也可以使用astype-来更改数据类型" class="headerlink" title="9.对先有的数组，也可以使用astype()来更改数据类型"></a>9.对先有的数组，也可以使用<font color="orange">astype()</font>来更改数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array0=np.ones((<span class="number">3</span>,<span class="number">4</span>),dtype=np.float32)</span><br><span class="line">array1=array0.astype(int)</span><br><span class="line"></span><br><span class="line">print(array0,array1)</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/H.png" alt="数据类型转换"></p><h3 id="10-Numpy数组可以直接与一个数进行运算，这个过程称之为广播；两个不同尺寸的数组也可以直接进行运算，这期间numpy会自动将两个数组扩展到相同的尺寸"><a href="#10-Numpy数组可以直接与一个数进行运算，这个过程称之为广播；两个不同尺寸的数组也可以直接进行运算，这期间numpy会自动将两个数组扩展到相同的尺寸" class="headerlink" title="10.Numpy数组可以直接与一个数进行运算，这个过程称之为广播；两个不同尺寸的数组也可以直接进行运算，这期间numpy会自动将两个数组扩展到相同的尺寸"></a>10.Numpy数组可以直接与一个数进行运算，这个过程称之为广播；两个不同尺寸的数组也可以直接进行运算，这期间numpy会自动将两个数组扩展到相同的尺寸</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array0=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">array1=np.array([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">array2=np.array([[<span class="number">7</span>],</span><br><span class="line">                 [<span class="number">8</span>],</span><br><span class="line">                 [<span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">print(array0*<span class="number">10</span>)</span><br><span class="line">print(array1+array2)</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/INSERT.png" alt="numpy的广播与numpy中不同尺寸数组的运算"><br><a id="more"></a></p><h3 id="11-Numpy中两个相同尺寸的数组可以直接进行四则运算"><a href="#11-Numpy中两个相同尺寸的数组可以直接进行四则运算" class="headerlink" title="11.Numpy中两个相同尺寸的数组可以直接进行四则运算"></a>11.Numpy中两个相同尺寸的数组可以直接进行四则运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array0=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">array1=np.array([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">array2=np.array([<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">print(array0+array1)</span><br><span class="line">print(array0*array2)</span><br><span class="line">print(array2/array0)</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/I.png" alt="numpy四则运算"></p><h3 id="12-使用np-dot-函数来将两个数组元素进行向量的点乘运算，或使用-符号将两个矩阵进行矩阵的乘法"><a href="#12-使用np-dot-函数来将两个数组元素进行向量的点乘运算，或使用-符号将两个矩阵进行矩阵的乘法" class="headerlink" title="12.使用np.dot()函数来将两个数组元素进行向量的点乘运算，或使用 @ 符号将两个矩阵进行矩阵的乘法"></a>12.使用<font color="orange">np.dot()</font>函数来将两个数组元素进行向量的点乘运算，或使用<font color="orange"> @ </font>符号将两个矩阵进行矩阵的乘法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array0=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">array1=np.array([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">array2=np.array([[<span class="number">7</span>,<span class="number">8</span>],</span><br><span class="line">                [<span class="number">9</span>,<span class="number">10</span>]])</span><br><span class="line">array3=np.array([[<span class="number">11</span>,<span class="number">12</span>],</span><br><span class="line">                [<span class="number">13</span>,<span class="number">14</span>]])</span><br><span class="line"></span><br><span class="line">print(array0.dot(array1))</span><br><span class="line">print(array2 @ array3)</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/J.png" alt="向量积和矩阵的乘法"></p><h3 id="13-基本初等运算"><a href="#13-基本初等运算" class="headerlink" title="13.基本初等运算"></a>13.基本初等运算</h3><p>还可以使用：</p><p><strong>·</strong> <font color="orange">np.sin()</font>/<font color="orange">np.cos()</font>/<font color="orange">np.tan()</font>进行三角函数运算</p><p><strong>·</strong> <font color="orange">np.sqrt()</font>进行开方运算</p><p><strong>·</strong> <font color="orange">np.log()</font>进行对数运算</p><p><strong>·</strong> <font color="orange">np.power()</font>进行指数运算<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array0=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">print(np.sin(array0),np.cos(array0),np.tan(array0))</span><br><span class="line">print(np.sqrt(array0))</span><br><span class="line">print(np.log(array0))</span><br><span class="line">print(np.power(array0,<span class="number">2</span>))</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/K.png" alt="基本初等运算"></p><h3 id="14-argmin-和argmax-可以返回数组中最小-最大元素的索引"><a href="#14-argmin-和argmax-可以返回数组中最小-最大元素的索引" class="headerlink" title="14.argmin()和argmax()可以返回数组中最小/最大元素的索引"></a>14.<font color="orange">argmin()</font>和<font color="orange">argmax()</font>可以返回数组中最小/最大元素的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array0=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">print(array0.argmin())</span><br><span class="line">print(array0.argmax())</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/L.png" alt="最小和最大元素"></p><h3 id="15-统计运算"><a href="#15-统计运算" class="headerlink" title="15.统计运算"></a>15.统计运算</h3><p>使用：</p><p><strong>·</strong> <font color="orange">sum()</font>获取所有元素和</p><p><strong>·</strong> <font color="orange">mean()</font>获取数据平均数</p><p><strong>·</strong> <font color="orange">np.median()</font>获取数据中位数</p><p><strong>·</strong> <font color="orange">var()</font>获取数据方差</p><p><strong>·</strong> <font color="orange">std()</font>获取数据标准差</p><p>其中可以通过修改参数<font color="orange">axis</font>的值来获取对应矩阵的行或列，也可以使用类似Python数组的表示或列表的切片来获取对应的元素/矩阵对应的行列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array0=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>],</span><br><span class="line">                [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>],</span><br><span class="line">                [<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>]])</span><br><span class="line"></span><br><span class="line">print(array0[<span class="number">1</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">5</span>].sum(axis=<span class="number">0</span>),array0.sum(axis=<span class="number">1</span>))</span><br><span class="line">print(array0[<span class="number">1</span>,:].mean(),array0.mean(axis=<span class="number">0</span>))</span><br><span class="line">print(np.median(array0[<span class="number">2</span>,:]),np.median(array0,axis=<span class="number">1</span>))</span><br><span class="line">print(array0[:,<span class="number">5</span>:<span class="number">-1</span>].var(),array0.var(axis=<span class="number">0</span>))</span><br><span class="line">print(array0.std(axis=<span class="number">0</span>),array0.std(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/M.png" alt="统计运算"></p><h3 id="16-筛选数据"><a href="#16-筛选数据" class="headerlink" title="16.筛选数据"></a>16.筛选数据</h3><p>可以通过如下方式进行数据筛选，如在方括号中输入<font color="#008080">array0&gt;6</font>则返回所有&gt;6的数据。也可以配合逻辑运算符一起使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array0=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>],</span><br><span class="line">                [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>],</span><br><span class="line">                [<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>]])</span><br><span class="line"></span><br><span class="line">print(array0[array0&gt;<span class="number">6</span>])</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/N.png" alt="筛选数据"></p><h3 id="17-Numpy图片处理"><a href="#17-Numpy图片处理" class="headerlink" title="17.Numpy图片处理"></a>17.Numpy图片处理</h3><p>通常对于灰度图片，可以将其当作二维数组处理，数组中的每个元素代表对应像素的亮度。对于RGB彩色图片，可以用三维数组处理，第三维分别存储像素点对应的R/G/B值</p><p>使用pillow库打开一张图片<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img=Image.open(<span class="string">'kite.png'</span>)</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img=Image.open(<span class="string">'kite.png'</span>)</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/O.png" alt="smile风筝图像"><br><img src="/2022/03/01/Numpy-Pandas/O2.png" alt="flower图像"><br>将图像转化为numpy数组形式，下面以flower.png为例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img=Image.open(<span class="string">'flower.png'</span>)</span><br><span class="line">img=np.array(img)</span><br><span class="line"></span><br><span class="line">print(img.shape)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/P.png" alt="图像转化为数组"><br>可以看到这个图像共有3456行，5184列像素，每个像素包括RGB三个颜色的分量</p><p>通过类似列表切片的方式提取出图像的所有绿色分量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img=Image.open(<span class="string">'flower.png'</span>)</span><br><span class="line">img=np.array(img)</span><br><span class="line">img_red=img[:,:,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">Image.fromarray(img_red).show()</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/Q.png" alt="提取绿色分量后的图像"><br>也可以对图像进行裁剪<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img=Image.open(<span class="string">'flower.png'</span>)</span><br><span class="line">img=np.array(img)</span><br><span class="line">img_cut=img[<span class="number">1000</span>:<span class="number">2500</span>,<span class="number">900</span>:<span class="number">3200</span>,:]</span><br><span class="line"></span><br><span class="line">Image.fromarray(img_cut).show()</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/R.png" alt="图像裁剪"><br>通过广播的方式做图像增强，常用作机器学习领域<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img=Image.open(<span class="string">'flower.png'</span>)</span><br><span class="line">img=np.array(img)*<span class="number">15</span></span><br><span class="line"></span><br><span class="line">Image.fromarray(img).show()</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/S.png" alt="图像增强"></p><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><h3 id="1-惯用写法：-1"><a href="#1-惯用写法：-1" class="headerlink" title="1.惯用写法："></a>1.惯用写法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="2-创建pandas序列"><a href="#2-创建pandas序列" class="headerlink" title="2.创建pandas序列"></a>2.创建pandas序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">print(pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,np.nan,<span class="number">5</span>,<span class="number">6</span>]))</span><br></pre></td></tr></table></figure><p><img src="/2022/03/01/Numpy-Pandas/1.png" alt="pandas序列创建"></p><h3 id="3-创建pandas数据结构DataFrame"><a href="#3-创建pandas数据结构DataFrame" class="headerlink" title="3.创建pandas数据结构DataFrame"></a>3.创建pandas数据结构<font color="orange">DataFrame</font></h3><p>可以通过一般形式创建或以一个类似于字典的形式创建pandas DataFrame<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dates=pd.date_range(<span class="string">'20220301'</span>,periods=<span class="number">5</span>)</span><br><span class="line">df0=pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">10</span>),index=dates,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'I'</span>])</span><br><span class="line">df1=pd.DataFrame(&#123;<span class="string">'A'</span>:<span class="number">1.</span>,</span><br><span class="line">                  <span class="string">'B'</span>:pd.Timestamp(<span class="string">'20220301'</span>),</span><br><span class="line">                  <span class="string">'C'</span>:pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">                  <span class="string">'D'</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">                  <span class="string">'E'</span>:pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</span><br><span class="line">                  <span class="string">'F'</span>:<span class="string">'foo'</span>&#125;)</span><br><span class="line"></span><br><span class="line">print(df0)</span><br><span class="line">print(df1)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/2.png" alt="pandas DataFrame"><br>也可以直接得出<font color="orange">DataFrame</font>的一些属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dates=pd.date_range(<span class="string">'20220301'</span>,periods=<span class="number">5</span>)</span><br><span class="line">df0=pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">10</span>),index=dates,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'I'</span>])</span><br><span class="line">df1=pd.DataFrame(&#123;<span class="string">'A'</span>:<span class="number">1.</span>,</span><br><span class="line">                  <span class="string">'B'</span>:pd.Timestamp(<span class="string">'20220301'</span>),</span><br><span class="line">                  <span class="string">'C'</span>:pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">                  <span class="string">'D'</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">                  <span class="string">'E'</span>:pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</span><br><span class="line">                  <span class="string">'F'</span>:<span class="string">'foo'</span>&#125;)</span><br><span class="line"></span><br><span class="line">print(df0.columns)</span><br><span class="line">print(df1.values)</span><br><span class="line">print(df1.describe)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/3.png" alt="DataFrame属性"></p><h3 id="4-获取DataFrame元素"><a href="#4-获取DataFrame元素" class="headerlink" title="4.获取DataFrame元素"></a>4.获取<font color="orange">DataFrame</font>元素</h3><p>下列<font color="orange">print()</font>中的两种方式均可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df1=pd.DataFrame(&#123;<span class="string">'A'</span>:<span class="number">1.</span>,</span><br><span class="line">                  <span class="string">'B'</span>:pd.Timestamp(<span class="string">'20220301'</span>),</span><br><span class="line">                  <span class="string">'C'</span>:pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">                  <span class="string">'D'</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">                  <span class="string">'E'</span>:pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</span><br><span class="line">                  <span class="string">'F'</span>:<span class="string">'foo'</span>&#125;)</span><br><span class="line"></span><br><span class="line">print(df1.A,df1[<span class="string">'A'</span>])</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/4.png" alt="获取DataFrame元素1"><br>也可以通过切片索引的方式来获取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df1=pd.DataFrame(&#123;<span class="string">'A'</span>:<span class="number">1.</span>,</span><br><span class="line">                  <span class="string">'B'</span>:pd.Timestamp(<span class="string">'20220301'</span>),</span><br><span class="line">                  <span class="string">'C'</span>:pd.Series(<span class="number">1</span>,index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">                  <span class="string">'D'</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">                  <span class="string">'E'</span>:pd.Categorical([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</span><br><span class="line">                  <span class="string">'F'</span>:<span class="string">'foo'</span>&#125;)</span><br><span class="line"></span><br><span class="line">print(df1[<span class="number">1</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/5.png" alt="获取DataFrame元素2"><br>还可以通过标签来获取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dates=pd.date_range(<span class="string">'20220301'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df0=pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line"></span><br><span class="line">print(df0.loc[<span class="string">'20220302'</span>],[<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/6.png" alt="获取DataFrame元素3"><br>通过位置来获取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dates=pd.date_range(<span class="string">'20220301'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df0=pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line"></span><br><span class="line">print(df0.iloc[[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">3</span>]])</span><br><span class="line">![获取DataFrame元素<span class="number">4</span>](/<span class="number">7.</span>png)</span><br></pre></td></tr></table></figure></p><h3 id="4-修改DataFrame中的值"><a href="#4-修改DataFrame中的值" class="headerlink" title="4.修改DataFrame中的值"></a>4.修改<font color="orange">DataFrame</font>中的值</h3><p>可以通过之前查找标签和位置的方式对值进行修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dates=pd.date_range(<span class="string">'20220301'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df0=pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line"></span><br><span class="line">df0.loc[<span class="string">'20220304'</span>,<span class="string">'B'</span>]=<span class="number">9999</span></span><br><span class="line">df0.iloc[<span class="number">2</span>,<span class="number">3</span>]=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">print(df0)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/8.png" alt="修改DataFrame数据1"><br>也可以通过逻辑表达式修改数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dates=pd.date_range(<span class="string">'20220301'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df0=pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line"></span><br><span class="line">df0[df0.B&gt;<span class="number">10</span>]=<span class="number">100</span></span><br><span class="line"></span><br><span class="line">print(df0)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/9.png" alt="修改DataFrame数据2"></p><h3 id="5-删除缺失数据"><a href="#5-删除缺失数据" class="headerlink" title="5.删除缺失数据"></a>5.删除缺失数据</h3><p>可以通过<font color="orange">dropna()</font>来清除缺失数据，其中参数<font color="orange">how</font>的值为<font color="green">‘any’</font>表示有缺失即丢弃，值为<font color="green">‘all’</font>则表示全部缺失后才丢弃<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dates=pd.date_range(<span class="string">'20220301'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df0=pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df0.iloc[<span class="number">0</span>,<span class="number">1</span>]=np.nan</span><br><span class="line">df0.iloc[<span class="number">2</span>,<span class="number">3</span>]=np.nan</span><br><span class="line"></span><br><span class="line">print(df0.dropna(axis=<span class="number">0</span>,how=<span class="string">'any'</span>))</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/10.png" alt="删除缺失数据"></p><h3 id="6-填补缺失数据"><a href="#6-填补缺失数据" class="headerlink" title="6.填补缺失数据"></a>6.填补缺失数据</h3><p>可以通过<font color="orange">fillna()</font>来填补缺失数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dates=pd.date_range(<span class="string">'20220301'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df0=pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df0.iloc[<span class="number">0</span>,<span class="number">1</span>]=np.nan</span><br><span class="line">df0.iloc[<span class="number">2</span>,<span class="number">3</span>]=np.nan</span><br><span class="line"></span><br><span class="line">print(df0.fillna(value=<span class="number">0</span>))</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/11.png" alt="填补缺失数据"></p><h3 id="7-审查缺失数据"><a href="#7-审查缺失数据" class="headerlink" title="7.审查缺失数据"></a>7.审查缺失数据</h3><p>通过<font color="orange">isnull()</font>来检查数据是否为空，检查结果会返回布尔值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dates=pd.date_range(<span class="string">'20220301'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df0=pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df0.iloc[<span class="number">0</span>,<span class="number">1</span>]=np.nan</span><br><span class="line">df0.iloc[<span class="number">2</span>,<span class="number">3</span>]=np.nan</span><br><span class="line"></span><br><span class="line">print(df0.isnull())</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/12.png" alt="检查缺失数据"><br>如果要检查数据中是否存在丢失数据，可以这样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">dates=pd.date_range(<span class="string">'20220301'</span>,periods=<span class="number">6</span>)</span><br><span class="line">df0=pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)),index=dates,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df0.iloc[<span class="number">0</span>,<span class="number">1</span>]=np.nan</span><br><span class="line">df0.iloc[<span class="number">2</span>,<span class="number">3</span>]=np.nan</span><br><span class="line"></span><br><span class="line">print(np.any(df0.isnull()==<span class="literal">True</span>))</span><br></pre></td></tr></table></figure></p><p>一旦返回结果为<font color="orange">True</font>，则意味着数据中有缺失</p><h3 id="8-Pandas的数据导入导出"><a href="#8-Pandas的数据导入导出" class="headerlink" title="8.Pandas的数据导入导出"></a>8.Pandas的数据导入导出</h3><p>通常使用内置函数如：</p><p><strong>·</strong> <font color="orange">read_csv()</font>：打开csv文件</p><p><strong>·</strong> <font color="orange">read_excel()</font>：打开excel文件</p><p><strong>·</strong> <font color="orange">read_json()</font>：打开json文件</p><p><strong>·</strong> <font color="orange">read_html()</font>：打开html文件</p><p><strong>·</strong> <font color="orange">read_pickle()</font>：打开pickle文件</p><p><strong>·</strong> <font color="orange">read_sql()</font>：打开数据库文件</p><p>…</p><p>类似的，要存储为对应的文件，可以使用：</p><p><strong>·</strong> <font color="orange">to_csv()</font>：存储为csv文件</p><p><strong>·</strong> <font color="orange">to_excel()</font>：存储为excel文件</p><p><strong>·</strong> <font color="orange">to_json()</font>：存储为json文件</p><p><strong>·</strong> <font color="orange">to_html()</font>：存储为html文件</p><p><strong>·</strong> <font color="orange">to_pickle()</font>：存储为pickle文件</p><p><strong>·</strong> <font color="orange">to_sql()</font>：存储为数据库文件</p><p>…</p><h3 id="9-Pandas数据合并"><a href="#9-Pandas数据合并" class="headerlink" title="9.Pandas数据合并"></a>9.Pandas数据合并</h3><p>可以使用<font color="orange">pd.concat()</font>来合并pandas的DataFrame<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df0=pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df1=pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df2=pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">2</span>,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line"></span><br><span class="line">print(df1,<span class="string">'\n'</span>,df1,<span class="string">'\n'</span>,df2)</span><br><span class="line"></span><br><span class="line">print(pd.concat([df0,df1,df2],axis=<span class="number">0</span>))</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/13.png" alt="数据合并1"><br>如果两组数据的索引、类型不同，也可以进一步将它们合并</p><p>其中<font color="orange">join</font>中<font color="green">‘inner’</font>为裁剪模式，默认<font color="green">‘out’</font>为合并模式，会为两者间缺失的部分赋空值</p><p>将<font color="#008080">ignore_index</font>的值赋为<font color="orange">True</font>可以重置索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df0=pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">0</span>,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>],index=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">df1=pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">4</span>))*<span class="number">1</span>,columns=[<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>],index=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">print(df1,<span class="string">'\n'</span>,df1)</span><br><span class="line"></span><br><span class="line">print(pd.concat([df0,df1],join=<span class="string">'inner'</span>,ignore_index=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure></p><p><img src="/2022/03/01/Numpy-Pandas/14.png" alt="数据合并2"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录一些Numpy和Pandas的方法&lt;/p&gt;
&lt;h2 id=&quot;Numpy&quot;&gt;&lt;a href=&quot;#Numpy&quot; class=&quot;headerlink&quot; title=&quot;Numpy&quot;&gt;&lt;/a&gt;Numpy&lt;/h2&gt;&lt;h3 id=&quot;1-惯用写法：&quot;&gt;&lt;a href=&quot;#1-惯用写法：&quot; class=&quot;headerlink&quot; title=&quot;1.惯用写法：&quot;&gt;&lt;/a&gt;1.惯用写法：&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-从列表生成一个矩阵：&quot;&gt;&lt;a href=&quot;#2-从列表生成一个矩阵：&quot; class=&quot;headerlink&quot; title=&quot;2.从列表生成一个矩阵：&quot;&gt;&lt;/a&gt;2.从列表生成一个矩阵：&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(np.array([[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;],[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;]]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/01/Numpy-Pandas/A.png&quot; alt=&quot;创建矩阵&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-创建全0或全1矩阵：&quot;&gt;&lt;a href=&quot;#3-创建全0或全1矩阵：&quot; class=&quot;headerlink&quot; title=&quot;3.创建全0或全1矩阵：&quot;&gt;&lt;/a&gt;3.创建全0或全1矩阵：&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(np.zeros((&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(np.ones((&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/01/Numpy-Pandas/B.png&quot; alt=&quot;0/1矩阵&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-通过-shape得到当前矩阵的尺寸，通过-reshape-将当前矩阵转置&quot;&gt;&lt;a href=&quot;#4-通过-shape得到当前矩阵的尺寸，通过-reshape-将当前矩阵转置&quot; class=&quot;headerlink&quot; title=&quot;4.通过.shape得到当前矩阵的尺寸，通过.reshape()将当前矩阵转置&quot;&gt;&lt;/a&gt;4.通过&lt;font color=&quot;orange&quot;&gt;.shape&lt;/font&gt;得到当前矩阵的尺寸，通过&lt;font color=&quot;orange&quot;&gt;.reshape()&lt;/font&gt;将当前矩阵转置&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(np.zeros((&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(np.zeros((&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)).shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(np.zeros((&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)).reshape(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/01/Numpy-Pandas/C.png&quot; alt=&quot;获取矩阵的尺寸，转置&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-使用arange-创建递增-递减的数列&quot;&gt;&lt;a href=&quot;#5-使用arange-创建递增-递减的数列&quot; class=&quot;headerlink&quot; title=&quot;5.使用arange()创建递增/递减的数列&quot;&gt;&lt;/a&gt;5.使用&lt;font color=&quot;orange&quot;&gt;arange()&lt;/font&gt;创建递增/递减的数列&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(np.arange(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/01/Numpy-Pandas/D.png&quot; alt=&quot;arange()&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-使用linspace-获取一个等分的区间序列，第三个参数是输出样本的总数&quot;&gt;&lt;a href=&quot;#6-使用linspace-获取一个等分的区间序列，第三个参数是输出样本的总数&quot; class=&quot;headerlink&quot; title=&quot;6.使用linspace()获取一个等分的区间序列，第三个参数是输出样本的总数&quot;&gt;&lt;/a&gt;6.使用&lt;font color=&quot;orange&quot;&gt;linspace()&lt;/font&gt;获取一个等分的区间序列，第三个参数是输出样本的总数&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(np.linspace(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/01/Numpy-Pandas/E.png&quot; alt=&quot;linspace()&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-通过random-rand-生成随机数组&quot;&gt;&lt;a href=&quot;#7-通过random-rand-生成随机数组&quot; class=&quot;headerlink&quot; title=&quot;7.通过random.rand()生成随机数组&quot;&gt;&lt;/a&gt;7.通过&lt;font color=&quot;orange&quot;&gt;random.rand()&lt;/font&gt;生成随机数组&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(np.random.rand(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/01/Numpy-Pandas/F.png&quot; alt=&quot;随机数组&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;8-Numpy中默认的数据类型为64位浮点数，可以在创建数组时使用dtype参数指定其他的数据类型&quot;&gt;&lt;a href=&quot;#8-Numpy中默认的数据类型为64位浮点数，可以在创建数组时使用dtype参数指定其他的数据类型&quot; class=&quot;headerlink&quot; title=&quot;8.Numpy中默认的数据类型为64位浮点数，可以在创建数组时使用dtype参数指定其他的数据类型&quot;&gt;&lt;/a&gt;8.Numpy中默认的数据类型为64位浮点数，可以在创建数组时使用&lt;font color=&quot;orange&quot;&gt;dtype&lt;/font&gt;参数指定其他的数据类型&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(np.ones((&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;),dtype=np.float32))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/01/Numpy-Pandas/G.png&quot; alt=&quot;numpy数据类型&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;9-对先有的数组，也可以使用astype-来更改数据类型&quot;&gt;&lt;a href=&quot;#9-对先有的数组，也可以使用astype-来更改数据类型&quot; class=&quot;headerlink&quot; title=&quot;9.对先有的数组，也可以使用astype()来更改数据类型&quot;&gt;&lt;/a&gt;9.对先有的数组，也可以使用&lt;font color=&quot;orange&quot;&gt;astype()&lt;/font&gt;来更改数据类型&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array0=np.ones((&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;),dtype=np.float32)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array1=array0.astype(int)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(array0,array1)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/01/Numpy-Pandas/H.png&quot; alt=&quot;数据类型转换&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;10-Numpy数组可以直接与一个数进行运算，这个过程称之为广播；两个不同尺寸的数组也可以直接进行运算，这期间numpy会自动将两个数组扩展到相同的尺寸&quot;&gt;&lt;a href=&quot;#10-Numpy数组可以直接与一个数进行运算，这个过程称之为广播；两个不同尺寸的数组也可以直接进行运算，这期间numpy会自动将两个数组扩展到相同的尺寸&quot; class=&quot;headerlink&quot; title=&quot;10.Numpy数组可以直接与一个数进行运算，这个过程称之为广播；两个不同尺寸的数组也可以直接进行运算，这期间numpy会自动将两个数组扩展到相同的尺寸&quot;&gt;&lt;/a&gt;10.Numpy数组可以直接与一个数进行运算，这个过程称之为广播；两个不同尺寸的数组也可以直接进行运算，这期间numpy会自动将两个数组扩展到相同的尺寸&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array0=np.array([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array1=np.array([&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array2=np.array([[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(array0*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(array1+array2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/01/Numpy-Pandas/INSERT.png&quot; alt=&quot;numpy的广播与numpy中不同尺寸数组的运算&quot;&gt;&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
    <category term="numpy、pandas" scheme="http://yoursite.com/tags/numpy、pandas/"/>
    
  </entry>
  
  <entry>
    <title>Django项目：订单管理系统</title>
    <link href="http://yoursite.com/2022/02/27/Django%E9%A1%B9%E7%9B%AE%EF%BC%9A%E8%AE%A2%E5%8D%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2022/02/27/Django%E9%A1%B9%E7%9B%AE%EF%BC%9A%E8%AE%A2%E5%8D%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-02-26T18:21:08.000Z</published>
    <updated>2022-06-27T07:28:27.634Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="1-Django简介"><a href="#1-Django简介" class="headerlink" title="1.Django简介"></a>1.Django简介</h2><p>Django是一款开源的python web应用框架，采用MTV(Model-Template-View)模式，其中Model负责对象与数据库的映射(ORM)，Template通过接口等方式将前端页面传递给用户，View视图函数对应业务逻辑，在合适的时候调用Model或Template</p><p>除去MTV模型以外，Django还有一个URL控制器，分别将不同的URL请求传递给不同的View视图函数处理，再通过各自的View函数来调用对应的Model和Template</p><h2 id="2-Django项目：订单管理系统"><a href="#2-Django项目：订单管理系统" class="headerlink" title="2.Django项目：订单管理系统"></a>2.Django项目：订单管理系统</h2><h3 id="1-Django项目的创建"><a href="#1-Django项目的创建" class="headerlink" title="1.Django项目的创建"></a>1.Django项目的创建</h3><p>在python 3中安装完成Django库后，可以在CMD或Pycharm终端里执行：<font size="4" color="orange">django-admin</font> <font size="4" color="#008080">startproject itemproj</font>来创建Django项目</p><p>也可以在Pycharm专业版本直接创建一个Django项目，这样会自动生成一个空的Template文件夹，以及在settings.py中生成Template对应的路径。还可以直接创建初始APP，这里没有做</p><p>(本文使用的Django版本为3.2.4)</p><p><img src="/2022/02/27/Django项目：订单管理系统/A.png" alt="Django项目创建"><br>执行创建完成后，系统会为我们生成这样一个初始目录：</p><p><img src="/2022/02/27/Django项目：订单管理系统/B.png" alt="Django目录"><br>其中：</p><p><strong><em>·</em></strong> <font color="orange">manage.py</font>是Django项目管理的工具脚本，执行Django命令时通过这个文件进行管理操作</p><p><strong><em>·</em></strong> <font color="orange">itemproj/settings.py</font>是Django项目的配置文件，包括了App配置、Django中间件、数据库等重要设置，在实际开发中要经常修改其中内容</p><p><strong><em>·</em></strong> <font color="orange">itemproj/urls.py</font>是URL路由映射文件，其中声明了前端发送的各种http请求，再通过各级路由文件来寻找到对应的View视图函数来进行处理</p><p><strong><em>·</em></strong> <font color="orange">itemproj/wsgi.py</font>，WSGI是Python web服务网关接口规范(Web Server Gateway Interface)的简称，由wsgi web server和wsgi web application两部分组成，是运行在同一个python进程中的两个模块</p><p>wsgi web sever接收了http请求以后调用wsgi web application接口，处理请求的具体内容，处理完成后再将结果返回给wsgi web server，通过wsgi web server将请求传递给前端，如图所示(Django官方文档)：</p><p><img src="/2022/02/27/Django项目：订单管理系统/C.png" alt="WSGI"><br><strong><em>·</em></strong> <font color="orange">itemproj/asgi.py</font>，ASGI即异步网关协议接口(Asynchronous Server  Gateway Interface)，是一个介于网络协议服务和python应用之间的标准接口，用于处理通用类型的协议。参考自Django官方文档的资料，ASGI是为了支持异步网络服务器和应用而出现的新的python标准，可以将ASGI理解为WSGI协议的扩展</p><p><img src="/2022/02/27/Django项目：订单管理系统/D.png" alt="ASGI"></p><h3 id="2-Django生命周期"><a href="#2-Django生命周期" class="headerlink" title="2.Django生命周期"></a>2.Django生命周期</h3><p>了解了Django项目基本组成后，Django的生命周期也基本明朗：<font color="#008080">前端发起URL请求</font> ➞ <font color="#008080">WSGI</font> ➞ <font color="#008080">Django中间件</font> ➞ <font color="#008080">URL路由</font> ➞ <font color="#008080">View视图函数</font> ➞ <font color="#008080">Model数据库交互</font> ➞ <font color="#008080">Template模板进行html渲染</font> ➞ <font color="#008080">Django中间件</font> ➞ <font color="#008080">WSGI</font> ➞ <font color="#008080">前端页面</font></p><h3 id="3-Django项目启动"><a href="#3-Django项目启动" class="headerlink" title="3.Django项目启动"></a>3.Django项目启动</h3><p>通过在Pycharm终端中执行<font size="4" color="orange">python</font> <font size="4" color="#008080">manage.py runserver</font>来启动Django服务，系统默认在:8000端口上执行</p><p><img src="/2022/02/27/Django项目：订单管理系统/E.png" alt="Django启动"><br>可以在settings.py中增加ALLOWED_HOSTS的参数，来增加支持的hosts，这里新增一个localhost。也可以自定义端口号等<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">'localhost'</span>]</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="4-创建Django-APP"><a href="#4-创建Django-APP" class="headerlink" title="4.创建Django APP"></a>4.创建Django APP</h3><p>首先创建一个app专门负责处理订单管理系统中对订单销售的增删改查请求</p><p>在Pycharm终端中执行<font size="4" color="orange">python</font> <font size="4" color="#008080">manage.py startapp sales</font>，会创建一个名为sales的app目录，其中包含新的下列文件：</p><p><img src="/2022/02/27/Django项目：订单管理系统/F.png" alt="sales目录"><br>该文件目录其实就是一个python包</p><h3 id="5-编辑View视图函数和URL路由"><a href="#5-编辑View视图函数和URL路由" class="headerlink" title="5.编辑View视图函数和URL路由"></a>5.编辑View视图函数和URL路由</h3><p>打开<font color="orange">sales/views.py</font>文件，准备新增一条视图功能：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listorders</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"下面是系统中所有的订单信息......"</span>)</span><br></pre></td></tr></table></figure></p><p>这里将返回HttpResponse对象的字符串参数</p><p>接着打开<font color="orange">itemproj/urls.py</font>文件，导入视图函数<font color="orange">listordes</font>，在列表变量<font color="orange">urlpatterns</font>中新增指向View的路由信息。<font color="orange">urlpatterns</font>就是Django URL路由的主入口<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sales.views <span class="keyword">import</span> listorders</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'sales/orders/'</span>, listorders),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>启动Django</p><p><img src="/2022/02/27/Django项目：订单管理系统/G.png" alt="订单信息"><br>在实际工程项目中，系统的urls条目复杂多变，放在同一份目录下会显得臃肿且难以维护，查询起来非常困难，不符合后端项目的设计理念，这里就需要将系统的urls做成树形系统，按照urls对应的视图功能将其拆分进对应的URL路由子表当中</p><p>比如，这里将所有以sales开头的urls全部放在sales app目录下新创建的子路由<font color="orange">sales/urls.py</font>文件中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'orders/'</span>, views.listorders),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>再对主路由文件<font color="orange">itemproj/urls.py</font>进行修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">'sales/'</span>, include(<span class="string">'sales.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="6-创建数据库"><a href="#6-创建数据库" class="headerlink" title="6.创建数据库"></a>6.创建数据库</h3><p>数据库自然是Django后端开发中的重要内容，Django对其的设置保存在<font color="orange">itemproj/settings.py</font>文件中</p><p>进入<font color="orange">settings.py</font>，找到<font color="#008080">settings.py</font>DATABASES设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: BASE_DIR / <span class="string">'db.sqlite3'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到Django默认的数据库引擎为sqlite3，要添加MySql数据库，可以将其设置为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>:&#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>:<span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>:<span class="string">'testdemo1'</span>,                   <span class="comment">#所使用的数据库的名字</span></span><br><span class="line">        <span class="string">'USER'</span>:<span class="string">'root'</span>,                        <span class="comment">#数据库用户</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'123456'</span>,                  <span class="comment">#密码</span></span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'127.0.0.1'</span>,                   <span class="comment">#主机</span></span><br><span class="line">        <span class="string">'PORT'</span>:<span class="string">'3306'</span>,                        <span class="comment">#端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行创建本地数据库的指令<font size="4" color="orange">python</font> <font size="4" color="#008080">manage.py migrate</font></p><p>默认情况下就会在项目根目录下生成一个db.sqlite3，并在其中自动创建一些Django表</p><p><img src="/2022/02/27/Django项目：订单管理系统/H.png" alt="创建本地数据库"><br>可以在Navicat中将其打开</p><p><img src="/2022/02/27/Django项目：订单管理系统/I.png" alt="数据库表"></p><h3 id="7-创建表单"><a href="#7-创建表单" class="headerlink" title="7.创建表单"></a>7.创建表单</h3><p>新建一份common app应用目录，在其中存放一些公共信息</p><font size="4" color="orange">python</font> <font size="4" color="#008080">manage.py startapp common</font><p>进入app中<font color="orange">common/models.py</font>，添加内容：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 客户名称</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 联系电话</span></span><br><span class="line">    phonenumber = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 邮箱</span></span><br><span class="line">    address = models.CharField(max_length=<span class="number">200</span>)</span><br></pre></td></tr></table></figure></p><p>其中的客户<font color="orange">Customer</font>类继承自<font color="orange">django.db.models.Model</font>，用来定义数据库表格，添加的<font color="#008080">name</font>、<font color="#008080">phonenumber</font>和<font color="#008080">adress</font>分别是表中的3个varchar字段，参数<font color="orange">max_length</font>则限制了3个字段的最大长度</p><p>接着来到<font color="orange">itemproj/settings.py</font>中，添加common app<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'common.apps.CommonConfig'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>完成后，Django已经真正添加了app用，继续执行命令<font size="4" color="orange">python</font> <font size="4" color="#008080">manage.py makemigrations common</font>记录对数据库的操作</p><p>执行完成后，会在<font color="orange">common/migrations.py</font>目录下生成<font color="orange">0001_inital.py</font>文件，该脚本就是进行的数据库操作代码</p><p><img src="/2022/02/27/Django项目：订单管理系统/J.png" alt="记录数据库操作"><br><img src="/2022/02/27/Django项目：订单管理系统/K.png" alt="0001_inital.py"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations, models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line"></span><br><span class="line">    initial = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.CreateModel(</span><br><span class="line">            name=<span class="string">'Customer'</span>,</span><br><span class="line">            fields=[</span><br><span class="line">                (<span class="string">'id'</span>, models.BigAutoField(auto_created=<span class="literal">True</span>, primary_key=<span class="literal">True</span>, serialize=<span class="literal">False</span>, verbose_name=<span class="string">'ID'</span>)),</span><br><span class="line">                (<span class="string">'name'</span>, models.CharField(max_length=<span class="number">200</span>)),</span><br><span class="line">                (<span class="string">'phonenumber'</span>, models.CharField(max_length=<span class="number">200</span>)),</span><br><span class="line">                (<span class="string">'address'</span>, models.CharField(max_length=<span class="number">200</span>)),</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></p><p>接下来执行<font size="4" color="orange">python</font> <font size="4" color="#008080">manage.py migrate</font>去数据库中创建表</p><p><img src="/2022/02/27/Django项目：订单管理系统/L.png" alt="创建表1"><br><img src="/2022/02/27/Django项目：订单管理系统/M.png" alt="创建表1"></p><h3 id="8-创建Django管理员"><a href="#8-创建Django管理员" class="headerlink" title="8.创建Django管理员"></a>8.创建Django管理员</h3><p>Django提供了一个内置的管理员操作页面，可以直接进行对数据库的增删改查工作，将数据库操作变得简单。</p><p>首先创建超级管理员账号，执行命令<font size="4" color="orange">python</font> <font size="4" color="#008080">manage.py createsuperuser</font></p><p>因为是做测试学习使用，所以密码设置得相对简单，直接无视掉警告，同样的，还可以临时取消Django的CSRF(跨站请求伪造)校验，否则后续的HTTP请求都必须携带校验数据</p><p><img src="/2022/02/27/Django项目：订单管理系统/N.png" alt="创建superuser"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment">#'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>要牢记设置的密码，因为忘记密码后如果想要去数据库里查看，不经过密码学解密的情况下，密码在数据表中是以pbkdf2_sha256算法加密后的密文形式记录的，这在Django后台管理页面当中也会有提示</p><p><img src="/2022/02/27/Django项目：订单管理系统/CODE.png" alt="pbkdf2_sha256加密1"><br><img src="/2022/02/27/Django项目：订单管理系统/CODE2.png" alt="pbkdf2_sha256加密2"><br>如果担心忘记密码可以先将密码注释到<font color="orange">itemproj/settings.py中</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Username (leave blank to use 'elbadaernu9.9'): 9.9</span></span><br><span class="line"><span class="string">Email address: rtl1312@163.com</span></span><br><span class="line"><span class="string">Password: 00000000</span></span><br><span class="line"><span class="string">Superuser created successfully.</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></p><p>然后修改common应用中管理员配置文件common/admin.py，注册自定义的model类，提交给Django<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Customer</span><br><span class="line"></span><br><span class="line">admin.site.register(Customer)</span><br></pre></td></tr></table></figure></p><p>启动Django，访问<a href="http://localhost:8000/admin" target="_blank" rel="noopener">http://localhost:8000/admin</a>，出现管理员登陆界面</p><p><img src="/2022/02/27/Django项目：订单管理系统/O.png" alt="superuser登陆"><br>登陆后进入到管理员后台</p><p><img src="/2022/02/27/Django项目：订单管理系统/P.png" alt="管理员后台"><br>增加客户数据</p><p><img src="/2022/02/27/Django项目：订单管理系统/Q.png" alt="新增数据1"><br><img src="/2022/02/27/Django项目：订单管理系统/R.png" alt="新增数据2"><br>上述步骤完成以后，进入Navicat，刷新common_customer表，可以看到新增数据已经出现在数据库当中</p><p><img src="/2022/02/27/Django项目：订单管理系统/S.png" alt="新增数据3"><br>要将管理员界面设置为中文，可以到到<font color="orange">itemproj/settings.py</font>中对中间件加入如下设置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">    <span class="comment">#管理员后台界面设置为中文</span></span><br><span class="line">    <span class="string">'django.middleware.locale.LocaleMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="9-获取数据"><a href="#9-获取数据" class="headerlink" title="9.获取数据"></a>9.获取数据</h3><p>先来实现第一个功能，当浏览器访问/sales/customs/时，服务器会返回系统中的所有客户记录</p><p>来到<font color="orange">sales/views.py</font>中，定义listcustomers函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  common.models <span class="keyword">import</span>  Customer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listcustomers</span><span class="params">(request)</span>:</span></span><br><span class="line">    qs = Customer.objects.values()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义返回字符串</span></span><br><span class="line">    retStr = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> customer <span class="keyword">in</span>  qs:</span><br><span class="line">        <span class="keyword">for</span> name,value <span class="keyword">in</span> customer.items():</span><br><span class="line">            retStr += <span class="string">f'<span class="subst">&#123;name&#125;</span> : <span class="subst">&#123;value&#125;</span> | '</span></span><br><span class="line"></span><br><span class="line">        retStr += <span class="string">'&lt;br&gt;'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(retStr)</span><br></pre></td></tr></table></figure></p><p><font color="orange">Customer.objects.values()</font>会返回Django定义的QuerySet对象，将返回包含的全部Customer表记录，每条记录都是一个字典对象</p><p>接着添加对/sales/customs/访问url请求的路由<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'orders/'</span>, views.listorders),</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这里是新添加的路由信息</span></span><br><span class="line">    path(<span class="string">'customers/'</span>, views.listcustomers), </span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>启动Django，进入对应页面后出现：</p><p><img src="/2022/02/27/Django项目：订单管理系统/T.png" alt="customers"><br>因为在实际订单信息中，客户数量庞大，可以对代码新增过滤条件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listcustomers</span><span class="params">(request)</span>:</span></span><br><span class="line">    qs = Customer.objects.values()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查url中是否有参数phonenumber</span></span><br><span class="line">    ph =  request.GET.get(<span class="string">'phonenumber'</span>,<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ph:</span><br><span class="line">        qs = qs.filter(phonenumber=ph)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义返回字符串</span></span><br><span class="line">    retStr = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> customer <span class="keyword">in</span>  qs:</span><br><span class="line">        <span class="keyword">for</span> name,value <span class="keyword">in</span> customer.items():</span><br><span class="line">            retStr += <span class="string">f'<span class="subst">&#123;name&#125;</span> : <span class="subst">&#123;value&#125;</span> | '</span></span><br><span class="line">        retStr += <span class="string">'&lt;br&gt;'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(retStr)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/02/27/Django项目：订单管理系统/U.png" alt="过滤客户"></p><h3 id="10-使用Html展示数据"><a href="#10-使用Html展示数据" class="headerlink" title="10.使用Html展示数据"></a>10.使用Html展示数据</h3><p>使用Django内置的模板引擎，定义一段Html代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">html_template = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">table &#123;</span></span><br><span class="line"><span class="string">    border-collapse: collapse;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">th, td &#123;</span></span><br><span class="line"><span class="string">    padding: 8px;</span></span><br><span class="line"><span class="string">    text-align: left;</span></span><br><span class="line"><span class="string">    border-bottom: 1px solid #ddd;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;table&gt;</span></span><br><span class="line"><span class="string">        &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;id&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;姓名&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;电话号码&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;邮箱&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#123;% for customer in customers %&#125;</span></span><br><span class="line"><span class="string">            &lt;tr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &#123;% for name, value in customer.items %&#125;            </span></span><br><span class="line"><span class="string">                &lt;td&gt;&#123;&#123; value &#125;&#125;&lt;/td&gt;            </span></span><br><span class="line"><span class="string">            &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;/table&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> engines</span><br><span class="line"></span><br><span class="line">django_engine = engines[<span class="string">'django'</span>]</span><br><span class="line">template = django_engine.from_string(html_template)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listcustomers</span><span class="params">(request)</span>:</span></span><br><span class="line">    qs = Customer.objects.values()</span><br><span class="line"></span><br><span class="line">    ph = request.GET.get(<span class="string">'phonenumber'</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ph:</span><br><span class="line">        qs = qs.filter(phonenumber=ph)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入渲染模板需要的参数</span></span><br><span class="line">    rendered = template.render(&#123;<span class="string">'customers'</span>: qs&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(rendered)</span><br></pre></td></tr></table></figure></p><p><img src="/2022/02/27/Django项目：订单管理系统/V.png" alt="Html渲染数据"><br>在实际前后端分离的开发中，Html部分的工作通常交由前端开发人员，后端主要是准备好与前端页面的API接口工作</p><h3 id="11-对数据的增删改查"><a href="#11-对数据的增删改查" class="headerlink" title="11.对数据的增删改查"></a>11.对数据的增删改查</h3><h4 id="1-创建管理应用"><a href="#1-创建管理应用" class="headerlink" title="1.创建管理应用"></a>1.创建管理应用</h4><p>针对管理员用户的工作，继续创建新应用mgr来处理管相关请求</p><p><img src="/2022/02/27/Django项目：订单管理系统/emm.png" alt="创建mgr app"><br>为了避免面向mgr管理员的系统里<font color="orange">mgr/views.py</font>中的函数过于庞大，新创建一份<font color="orange">mgr/customer.py</font>来专门处理对customer数据的操作</p><h4 id="2-设置URL路由"><a href="#2-设置URL路由" class="headerlink" title="2.设置URL路由"></a>2.设置URL路由</h4><p>实际的增删改查操作都发生在同一份路由当中</p><p><strong>·</strong> <font color="orange">GET</font>：获取请求</p><p><strong>·</strong> <font color="orange">POST</font>：添加请求</p><p><strong>·</strong> <font color="orange">PUT</font>：修改请求</p><p><strong>·</strong> <font color="orange">DELETE</font>：删除请求</p><p>而Django不支持在路由当中添加HTTP请求方法，可以在<font color="orange">mgr/customer.py</font>文件中新增函数<font color="orange">dispatcher()</font>来管理请求<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatcher</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 将请求参数统一放入request的params属性中，方便后续处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># GET请求 参数在url中，通过request对象的GET属性获取</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        request.params = request.GET</span><br><span class="line"></span><br><span class="line">    <span class="comment"># POST/PUT/DELETE 请求 参数从request对象的body属性中获取</span></span><br><span class="line">    <span class="keyword">elif</span> request.method <span class="keyword">in</span> [<span class="string">'POST'</span>,<span class="string">'PUT'</span>,<span class="string">'DELETE'</span>]:</span><br><span class="line">        <span class="comment"># 接口中POST/PUT/DELETE请求的消息体都是json格式</span></span><br><span class="line">        request.params = json.loads(request.body)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据不同的action分派给不同的函数进行处理</span></span><br><span class="line">    action = request.params[<span class="string">'action'</span>]</span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">'list_customer'</span>:</span><br><span class="line">        <span class="keyword">return</span> listcustomers(request)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">'add_customer'</span>:</span><br><span class="line">        <span class="keyword">return</span> addcustomer(request)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">'modify_customer'</span>:</span><br><span class="line">        <span class="keyword">return</span> modifycustomer(request)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">'del_customer'</span>:</span><br><span class="line">        <span class="keyword">return</span> deletecustomer(request)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'ret'</span>: <span class="number">1</span>, <span class="string">'msg'</span>: <span class="string">'不支持该类型http请求'</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>进入主路由<font color="orange">itemproj/urls.py</font>新增<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'api/mgr/'</span>, include(<span class="string">'mgr.urls'</span>)),</span><br></pre></td></tr></table></figure></p><p>然后创建并进入子路由<font color="orange">mgr/urls.py</font>添加路径声明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> mgr <span class="keyword">import</span> customer</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">    path(<span class="string">'customers'</span>, customer.dispatcher),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这样，如果有来自API请求/api/mgr/customers当中内容，都将经过<font color="orange">dispatcher()</font>函数处理</p><p>继续完成增删改查功能对应的函数</p><h4 id="3-增加客户"><a href="#3-增加客户" class="headerlink" title="3.增加客户"></a>3.增加客户</h4><p>导入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> common.models <span class="keyword">import</span> Customer</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addcustomer</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">    info    = request.params[<span class="string">'data'</span>]</span><br><span class="line"></span><br><span class="line">    record = Customer.objects.create(name=info[<span class="string">'name'</span>] ,</span><br><span class="line">                            phonenumber=info[<span class="string">'phonenumber'</span>] ,</span><br><span class="line">                            address=info[<span class="string">'address'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'ret'</span>: <span class="number">0</span>, <span class="string">'id'</span>:record.id&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-删除客户"><a href="#4-删除客户" class="headerlink" title="4.删除客户"></a>4.删除客户</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deletecustomer</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">    customerid = request.params[<span class="string">'id'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        customer = Customer.objects.get(id=customerid)</span><br><span class="line">    <span class="keyword">except</span> Customer.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span>  &#123;</span><br><span class="line">                <span class="string">'ret'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'msg'</span>: <span class="string">f'id 为`<span class="subst">&#123;customerid&#125;</span>`的客户不存在'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    customer.delete()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'ret'</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-修改客户"><a href="#5-修改客户" class="headerlink" title="5.修改客户"></a>5.修改客户</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modifycustomer</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求消息中 获取修改客户的信息</span></span><br><span class="line">    <span class="comment"># 找到该客户，并且进行修改操作</span></span><br><span class="line">    </span><br><span class="line">    customerid = request.params[<span class="string">'id'</span>]</span><br><span class="line">    newdata    = request.params[<span class="string">'newdata'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        customer = Customer.objects.get(id=customerid)</span><br><span class="line">    <span class="keyword">except</span> Customer.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span>  &#123;</span><br><span class="line">                <span class="string">'ret'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'msg'</span>: <span class="string">f'id 为`<span class="subst">&#123;customerid&#125;</span>`的客户不存在'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'name'</span> <span class="keyword">in</span>  newdata:</span><br><span class="line">        customer.name = newdata[<span class="string">'name'</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'phonenumber'</span> <span class="keyword">in</span>  newdata:</span><br><span class="line">        customer.phonenumber = newdata[<span class="string">'phonenumber'</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'address'</span> <span class="keyword">in</span>  newdata:</span><br><span class="line">        customer.address = newdata[<span class="string">'address'</span>]</span><br><span class="line"></span><br><span class="line">    customer.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'ret'</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="6-查询客户"><a href="#6-查询客户" class="headerlink" title="6.查询客户"></a>6.查询客户</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listcustomers</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 返回一个QuerySet对象</span></span><br><span class="line">    qs = Customer.objects.values()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 QuerySet对象转化为list类型，JSON字符串</span></span><br><span class="line">    retlist = list(qs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'ret'</span>: <span class="number">0</span>, <span class="string">'retlist'</span>: retlist&#125;)</span><br></pre></td></tr></table></figure><h3 id="12-测试"><a href="#12-测试" class="headerlink" title="12.测试"></a>12.测试</h3><p>实际开发过程中可能不能及时收到前端的Html文件，此时就需要对项目功能进行一定测试</p><p>可以通过模拟前端的形式，发出HTTP请求，对后端接口进行测试</p><p>在项目根目录下新建test文件夹用于存放测试文件，并新建一份<font color="orange">test01.py</font>文件用于测试customer数据</p><p>导入python的<font color="orange">requests</font>库，做接口测试<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests,pprint</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://localhost:8000/api/mgr/customers?action=list_customer'</span>)</span><br><span class="line"></span><br><span class="line">pprint.pprint(response.json())</span><br></pre></td></tr></table></figure></p><p><img src="/2022/02/27/Django项目：订单管理系统/W.png" alt="查询测试"><br>继续创建<font color="orange">test_add.py</font>文件用于测试新增用户<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests,pprint</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">"action"</span>:<span class="string">"add_customer"</span>,</span><br><span class="line">    <span class="string">"data"</span>:&#123;</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">        <span class="string">"phonenumber"</span>:<span class="string">"12345678910"</span>,</span><br><span class="line">        <span class="string">"address"</span>:<span class="string">"xiaoming@163.com"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">'http://localhost:8000/api/mgr/customers'</span>,json=payload)</span><br><span class="line"></span><br><span class="line">pprint.pprint(response.json())</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://localhost:8000/api/mgr/customers?action=list_customer'</span>)</span><br><span class="line"></span><br><span class="line">pprint.pprint(response.json())</span><br></pre></td></tr></table></figure></p><p><img src="/2022/02/27/Django项目：订单管理系统/X.png" alt="新增测试"><br>此时数据库中也随之出现了“小明”的记录</p><p><img src="/2022/02/27/Django项目：订单管理系统/Y.png" alt="数据库新增数据"></p><h3 id="13-与前端集成"><a href="#13-与前端集成" class="headerlink" title="13.与前端集成"></a>13.与前端集成</h3><p>制作前端的Html文件，打包后命名为front_end作为静态文件放进项目的根目录，进入<font color="orange">itemproj/urls.py</font>文件中，添加静态文件声明，并在末尾增加代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">'sales/'</span>, include(<span class="string">'sales.urls'</span>)),</span><br><span class="line">    path(<span class="string">'api/mgr/'</span>, include(<span class="string">'mgr.urls'</span>)),</span><br><span class="line">] + static(<span class="string">"/"</span>, document_root=<span class="string">"./front_end"</span>)</span><br></pre></td></tr></table></figure></p><p>最后添加的就是查找前端静态文件的URL路由，一但HTTP请求不是以admin/ sales/ api/开头，Django会访问前端目录下的静态文件</p><p>假设与前端文件的集成无误，启动Django，访问<a href="http://localhost:8000/mgr/index.html" target="_blank" rel="noopener">http://localhost:8000/mgr/index.html</a>,进入管理员后台，会得到类似这样的成果</p><p><img src="/2022/02/27/Django项目：订单管理系统/Z.png" alt="后台页面"></p><h3 id="14-登陆功能"><a href="#14-登陆功能" class="headerlink" title="14.登陆功能"></a>14.登陆功能</h3><p>要实现订单管理员的登陆登出功能，继续在mgr文件夹中新建一份<font color="orange">sign_in_out.py</font>文件，管理登陆登出</p><p>Django内置的app <font color="orange">django.contrib.auth</font>已经实现了登陆验证功能，并且在数据库中定义过一张auth_user表，可以直接使用其方法</p><p><img src="/2022/02/27/Django项目：订单管理系统/AA.png" alt="auth_user"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login, logout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 从 HTTP POST请求中获取用户名、密码参数</span></span><br><span class="line">    userName = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">    passWord = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用Django auth库里的方法校验用户名、密码</span></span><br><span class="line">    user = authenticate(username=userName, password=passWord)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果能找到用户，并且密码正确</span></span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> user.is_active:</span><br><span class="line">            <span class="keyword">if</span> user.is_superuser:</span><br><span class="line">                login(request, user)</span><br><span class="line">                <span class="comment"># 在session中存入用户类型</span></span><br><span class="line">                request.session[<span class="string">'usertype'</span>] = <span class="string">'mgr'</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'ret'</span>: <span class="number">0</span>&#125;)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'ret'</span>: <span class="number">1</span>, <span class="string">'msg'</span>: <span class="string">'请使用管理员账户登录'</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'ret'</span>: <span class="number">0</span>, <span class="string">'msg'</span>: <span class="string">'用户已经被禁用'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 否则用户名、密码有误</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'ret'</span>: <span class="number">1</span>, <span class="string">'msg'</span>: <span class="string">'用户名或者密码错误'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登出处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signout</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 使用登出方法</span></span><br><span class="line">    logout(request)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'ret'</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>再到<font color="orange">mgr/urls.py</font>中添加url路由<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> mgr <span class="keyword">import</span> customer</span><br><span class="line"><span class="keyword">from</span> mgr <span class="keyword">import</span> sign_in_out</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">    path(<span class="string">'customers'</span>, customer.dispatcher),</span><br><span class="line">    path(<span class="string">'signin'</span>, sign_in_out.signin),</span><br><span class="line">    path(<span class="string">'signout'</span>, sign_in_out.signout),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>到这里登陆功能已经写好，对其进行测试，在test文件夹里新建测试文件<font color="orange">test_login.py</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests,pprint</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'9.9'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'00000000'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">'http://localhost:8000/api/mgr/signin'</span>,data=payload)</span><br><span class="line"></span><br><span class="line">pprint.pprint(response.json())</span><br></pre></td></tr></table></figure></p><p>如果返回{‘ret’: 0}，表示成功登陆</p><p><img src="/2022/02/27/Django项目：订单管理系统/AB.png" alt="测试登陆成功"><br>如果登陆失败，则返回{‘ret’: 1}，并指明失败原因</p><p><img src="/2022/02/27/Django项目：订单管理系统/AC.png" alt="测试登陆失败"><br>继续在Django管理员后台增加新的访客用户</p><p><img src="/2022/02/27/Django项目：订单管理系统/AD.png" alt="新增非管理员用户1"><br><img src="/2022/02/27/Django项目：订单管理系统/AE.png" alt="新增非管理员用户2"><br>到test文件夹里再新建测试文件<font color="orange">test_user.py</font>测试普通访客登录<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  requests,pprint</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">'username'</span>: <span class="string">'guest'</span>,</span><br><span class="line">    <span class="string">'password'</span>: <span class="string">'rtl1312693017'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">'http://localhost:8000/api/mgr/signin'</span>,data=payload)</span><br><span class="line"></span><br><span class="line">pprint.pprint(response.json())</span><br></pre></td></tr></table></figure></p><p>系统会提示没有权限访问</p><p><img src="/2022/02/27/Django项目：订单管理系统/AF.png" alt="测试非管理员用户登陆"><br>最后再通过与前端文件进行集成，得到优化后的登陆界面：</p><p><img src="/2022/02/27/Django项目：订单管理系统/AG.png" alt="系统登陆界面"><br>成功登陆后将跳转到之前的客户订单管理系统</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-Django简介&quot;&gt;&lt;a href=&quot;#1-Django简介&quot; class=&quot;headerlink&quot; title=&quot;1.Django简介&quot;&gt;&lt;/a&gt;1.Django简介&lt;/h2&gt;&lt;p&gt;Django是一款开源的python web应用框架，采用MTV(Model-Template-View)模式，其中Model负责对象与数据库的映射(ORM)，Template通过接口等方式将前端页面传递给用户，View视图函数对应业务逻辑，在合适的时候调用Model或Template&lt;/p&gt;
&lt;p&gt;除去MTV模型以外，Django还有一个URL控制器，分别将不同的URL请求传递给不同的View视图函数处理，再通过各自的View函数来调用对应的Model和Template&lt;/p&gt;
&lt;h2 id=&quot;2-Django项目：订单管理系统&quot;&gt;&lt;a href=&quot;#2-Django项目：订单管理系统&quot; class=&quot;headerlink&quot; title=&quot;2.Django项目：订单管理系统&quot;&gt;&lt;/a&gt;2.Django项目：订单管理系统&lt;/h2&gt;&lt;h3 id=&quot;1-Django项目的创建&quot;&gt;&lt;a href=&quot;#1-Django项目的创建&quot; class=&quot;headerlink&quot; title=&quot;1.Django项目的创建&quot;&gt;&lt;/a&gt;1.Django项目的创建&lt;/h3&gt;&lt;p&gt;在python 3中安装完成Django库后，可以在CMD或Pycharm终端里执行：&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;django-admin&lt;/font&gt; &lt;font size=&quot;4&quot; color=&quot;#008080&quot;&gt;startproject itemproj&lt;/font&gt;来创建Django项目&lt;/p&gt;
&lt;p&gt;也可以在Pycharm专业版本直接创建一个Django项目，这样会自动生成一个空的Template文件夹，以及在settings.py中生成Template对应的路径。还可以直接创建初始APP，这里没有做&lt;/p&gt;
&lt;p&gt;(本文使用的Django版本为3.2.4)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/02/27/Django项目：订单管理系统/A.png&quot; alt=&quot;Django项目创建&quot;&gt;&lt;br&gt;执行创建完成后，系统会为我们生成这样一个初始目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/02/27/Django项目：订单管理系统/B.png&quot; alt=&quot;Django目录&quot;&gt;&lt;br&gt;其中：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;·&lt;/em&gt;&lt;/strong&gt; &lt;font color=&quot;orange&quot;&gt;manage.py&lt;/font&gt;是Django项目管理的工具脚本，执行Django命令时通过这个文件进行管理操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;·&lt;/em&gt;&lt;/strong&gt; &lt;font color=&quot;orange&quot;&gt;itemproj/settings.py&lt;/font&gt;是Django项目的配置文件，包括了App配置、Django中间件、数据库等重要设置，在实际开发中要经常修改其中内容&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;·&lt;/em&gt;&lt;/strong&gt; &lt;font color=&quot;orange&quot;&gt;itemproj/urls.py&lt;/font&gt;是URL路由映射文件，其中声明了前端发送的各种http请求，再通过各级路由文件来寻找到对应的View视图函数来进行处理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;·&lt;/em&gt;&lt;/strong&gt; &lt;font color=&quot;orange&quot;&gt;itemproj/wsgi.py&lt;/font&gt;，WSGI是Python web服务网关接口规范(Web Server Gateway Interface)的简称，由wsgi web server和wsgi web application两部分组成，是运行在同一个python进程中的两个模块&lt;/p&gt;
&lt;p&gt;wsgi web sever接收了http请求以后调用wsgi web application接口，处理请求的具体内容，处理完成后再将结果返回给wsgi web server，通过wsgi web server将请求传递给前端，如图所示(Django官方文档)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/02/27/Django项目：订单管理系统/C.png&quot; alt=&quot;WSGI&quot;&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;·&lt;/em&gt;&lt;/strong&gt; &lt;font color=&quot;orange&quot;&gt;itemproj/asgi.py&lt;/font&gt;，ASGI即异步网关协议接口(Asynchronous Server  Gateway Interface)，是一个介于网络协议服务和python应用之间的标准接口，用于处理通用类型的协议。参考自Django官方文档的资料，ASGI是为了支持异步网络服务器和应用而出现的新的python标准，可以将ASGI理解为WSGI协议的扩展&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/02/27/Django项目：订单管理系统/D.png&quot; alt=&quot;ASGI&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-Django生命周期&quot;&gt;&lt;a href=&quot;#2-Django生命周期&quot; class=&quot;headerlink&quot; title=&quot;2.Django生命周期&quot;&gt;&lt;/a&gt;2.Django生命周期&lt;/h3&gt;&lt;p&gt;了解了Django项目基本组成后，Django的生命周期也基本明朗：&lt;font color=&quot;#008080&quot;&gt;前端发起URL请求&lt;/font&gt; ➞ &lt;font color=&quot;#008080&quot;&gt;WSGI&lt;/font&gt; ➞ &lt;font color=&quot;#008080&quot;&gt;Django中间件&lt;/font&gt; ➞ &lt;font color=&quot;#008080&quot;&gt;URL路由&lt;/font&gt; ➞ &lt;font color=&quot;#008080&quot;&gt;View视图函数&lt;/font&gt; ➞ &lt;font color=&quot;#008080&quot;&gt;Model数据库交互&lt;/font&gt; ➞ &lt;font color=&quot;#008080&quot;&gt;Template模板进行html渲染&lt;/font&gt; ➞ &lt;font color=&quot;#008080&quot;&gt;Django中间件&lt;/font&gt; ➞ &lt;font color=&quot;#008080&quot;&gt;WSGI&lt;/font&gt; ➞ &lt;font color=&quot;#008080&quot;&gt;前端页面&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-Django项目启动&quot;&gt;&lt;a href=&quot;#3-Django项目启动&quot; class=&quot;headerlink&quot; title=&quot;3.Django项目启动&quot;&gt;&lt;/a&gt;3.Django项目启动&lt;/h3&gt;&lt;p&gt;通过在Pycharm终端中执行&lt;font size=&quot;4&quot; color=&quot;orange&quot;&gt;python&lt;/font&gt; &lt;font size=&quot;4&quot; color=&quot;#008080&quot;&gt;manage.py runserver&lt;/font&gt;来启动Django服务，系统默认在:8000端口上执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/02/27/Django项目：订单管理系统/E.png&quot; alt=&quot;Django启动&quot;&gt;&lt;br&gt;可以在settings.py中增加ALLOWED_HOSTS的参数，来增加支持的hosts，这里新增一个localhost。也可以自定义端口号等&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ALLOWED_HOSTS = [&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
    <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>基于卷积神经网络的面部年龄识别</title>
    <link href="http://yoursite.com/2021/05/26/%E5%9F%BA%E4%BA%8E%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E9%9D%A2%E9%83%A8%E5%B9%B4%E9%BE%84%E8%AF%86%E5%88%AB/"/>
    <id>http://yoursite.com/2021/05/26/%E5%9F%BA%E4%BA%8E%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E9%9D%A2%E9%83%A8%E5%B9%B4%E9%BE%84%E8%AF%86%E5%88%AB/</id>
    <published>2021-05-26T15:13:00.000Z</published>
    <updated>2022-06-27T07:41:11.298Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="1-训练模型和框架"><a href="#1-训练模型和框架" class="headerlink" title="1.训练模型和框架"></a>1.训练模型和框架</h2><h3 id="1-1-Adience数据集"><a href="#1-1-Adience数据集" class="headerlink" title="1.1 Adience数据集"></a>1.1 Adience数据集</h3><p>Adience图片集包括Flickr等相册，通过从iPhone5（或更高版本）的智能手机等移动设备自动上传并进行组装，由其作者根据知识共享（CC）许可向公众发布。数据集提供了共计26580张面部照片的数据和基准，旨在尽可能真实地应对实际成像并做出判断。数据的标签有年龄组、性别、户外等，可用于监督学习的人脸识别对年龄的研究。Adience收录的数据信息包括主体外观、动作、噪点、光线等实际情况中进行图像采集时包含的动态变化，具有环境适应性强、应用范围广的特点。</p><h3 id="1-2-Caffe框架"><a href="#1-2-Caffe框架" class="headerlink" title="1.2 Caffe框架"></a>1.2 Caffe框架</h3><p>Caffe（Convolutional Architecture for Fast Feature Embedding）采用CUDA架构，可在CPU和GPU上进行高速运算，是一个兼具了效率、表达和思维模块化的卷积神经网络框架。</p><p>Caffe的数据结构以Blobs-Layers-Net的形式存在。</p><p>Blobs是Caffe的核心数据格式，提供了统一的内存接口，并且可以在CPU与GPU之间进行数据同步。主要通过四维张量（Number<em>Channel</em>weight*high）的形式，按照C-contiguous方式（数组的行存储连续且不间断）来存储和交流网络中的权重、激活值、正反向数据。</p><p>Layers是Caffe模型的关键内容，是组成神经网络和进行相关计算的基础。所有的Layer层都可以接收底层输入的Blobs，并向高层输出Blobs。Layers每一层都定义三种重要的计算：初始化（Setup）、向前传播（Forward）、向后传播（Backward）。</p><p>其包含的运算有：</p><p><strong>·</strong> 1.<font color="orange">load data</font>：数据载入</p><p><strong>·</strong> 2.<font color="orange">Convolve filters</font>：卷积层，进行卷积。</p><p><strong>·</strong> 3.<font color="orange">Pooling</font>：池化层，进行池化。</p><p><strong>·</strong> 4.<font color="orange">Nonlinearities</font>：非线性映射运算，即激活函数。</p><p><strong>·</strong> 5.<font color="orange">Inner Products</font>：内积运算。</p><p><strong>·</strong> 6.<font color="orange">Normalize</font>：归一化</p><p><strong>·</strong> 7.<font color="orange">Compute losses</font>：损失函数计算，如softmax、hinge。</p><p>Net是一个由一系列连接的Layer层组成的有向无环图（Directed Acyclic Graph，DAG）。caffe会在向前传播或向后传播时，对DAG中的所有层进行记录，确保其准确性。</p><h2 id="2-基于卷积神经网络的人脸识别"><a href="#2-基于卷积神经网络的人脸识别" class="headerlink" title="2.基于卷积神经网络的人脸识别"></a>2.基于卷积神经网络的人脸识别</h2><h3 id="2-1-卷积神经网络架构"><a href="#2-1-卷积神经网络架构" class="headerlink" title="2.1 卷积神经网络架构"></a>2.1 卷积神经网络架构</h3><p>使用的架构包括3个卷积层、2个全连接层和1个最终输出层。具体定义卷积层如下：</p><p>1.Conv1：将内核大小为3<em>3</em>7的共计96个像素节点的过滤应用于输入第一卷积层中，经过修正线性单元ReLU（激活函数）处理后，池化层采用保留最大值（max-pooling）的规则，选择一个两像素跨度的3*3区域中最大值，进行池化，再经过局部响应归一化层（Local Response Normalization，LRN）。</p><p>2.Conv2：上一层的输出（96×28×28）由第二个卷积层进行处理，包括对256个大小为96<em>5</em>5的像素过滤。同样的，经过一个修正线性单元ReLU，最大池化层，和一个与之前参数相同的局部响应归一化层。</p><p>3.Conv3：第三层卷积层通过对一组384个大小为256<em>3</em>3的像素过滤来对256×14×14的 Blob进行处理，接着经过修正线性单元ReLU和一个最大池化层。</p><p>再通过下列方式定义完全连接层：</p><p>1.第一个完全连接层包含了512个人工神经元，用于接收第三卷积层的输出结果。接着再通过修正线性单元ReLU和Dropout层（防止CNN过拟合）。</p><p>2.第二个完全连接层接收第一个完全连接层的512个人工神经元空间大小的输出（同样包含512个人工神经元），再通过修正线性单元ReLU和Dropout层。</p><p>3.第三层完全连接层映射最终的分类结果。</p><p>最终，最后一个完全连接层的输出会被反馈到为每个类别分配概率的Softmax层，预测其本身通过给定的测试图像的最大概率。</p><p><img src="/2021/05/26/基于卷积神经网络的面部年龄识别/A.png" alt></p><h3 id="2-2-年龄预测"><a href="#2-2-年龄预测" class="headerlink" title="2.2 年龄预测"></a>2.2 年龄预测</h3><p>人的面部特征无时不刻发生着微妙变化反映出其年龄的不断增长，在最理想的情况之下，人的面部特征随着人的成长应该表现出正相关的关系，那么年龄估计就是一个广义上的回归问题。然而实际上仅通过回归的方法来判断一个人的年龄是靠不住的，即便一个正常的自然人也很难推断出观察对象的准确实际年龄。</p><p>但是人眼可以对观察对象做出一个大致判断，较为准确的预测出对方的年龄所在区间。这样，就对对方的年龄有了初步估计。这样，就可以对年龄区间进行一个分类，以进一步研究人脸和年龄的关系。</p><p>Adience数据集将人的年龄划分为了八个类别，分别为：[0-2]、[4-6]、[8-13]、[15-20]、[25-32]、[38-43]、[48-53]、[60 -]。因此，深度神经网络在最终的Softmax层中有8个节点，分别对各年龄段进行分类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MODEL_MEAN_VALUES = (<span class="number">78.4263377603</span>, <span class="number">87.7689143744</span>, <span class="number">114.895847746</span>)</span><br><span class="line">ageList = [<span class="string">'(0-2)'</span>, <span class="string">'(4-6)'</span>, <span class="string">'(8-12)'</span>, <span class="string">'(15-20)'</span>, <span class="string">'(25-32)'</span>, <span class="string">'(38-43)'</span>, <span class="string">'(48-53)'</span>, <span class="string">'(60-100)'</span>]</span><br></pre></td></tr></table></figure></p><p>Blob输入网络进行年龄的检测，并且年龄检测程序向前传播。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ageNet.setInput(blobs)</span><br><span class="line">agepredction = ageNet.forward()</span><br><span class="line">age = ageList[agepredction[<span class="number">0</span>].argmax()]</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="3-计算机视觉技术与系统的运行测试"><a href="#3-计算机视觉技术与系统的运行测试" class="headerlink" title="3.计算机视觉技术与系统的运行测试"></a>3.计算机视觉技术与系统的运行测试</h2><h3 id="3-1-OpenCV"><a href="#3-1-OpenCV" class="headerlink" title="3.1 OpenCV"></a>3.1 OpenCV</h3><p>OpenCV是基于伯克利软件套件（Berkeley Software Distribution，BSD）许可发行的一个开源的跨平台计算机视觉库，其本身由C++语言和C函数编写，同时提供了Python、JAVA、MATLAB等语言的接口，能够运行计算机视觉的一系列算法，对图像进行处理。</p><p>要在python环境下使用OpenCV视觉库，可以通过pip执行命令“pip install opencv-python“来安装OpenCV模块。</p><p>安装完成以后，在Python中导入模块。</p><h3 id="3-2-图像侦测"><a href="#3-2-图像侦测" class="headerlink" title="3.2 图像侦测"></a>3.2 图像侦测</h3><p>使用OpenCV中的DNN人脸侦测模块对人脸的图像进行侦测和获取，OpenCV为该检测器提供了Caffe实施的16位浮点数版本。其优点有：</p><p><strong>·</strong> 1.在CPU上实时运行。</p><p><strong>·</strong> 2.即使在严重遮挡下也可以工作。</p><p><strong>·</strong> 3.能够检测各种比例的面部。</p><p><strong>·</strong> 4.适用不同的脸部朝向，如上、下、左、右和侧面等。</p><p>整个面部检测的功能使用函数“getFaceBox”完成，包含信号量参数“net“、图像参数“frame“和阈值参数“conf_threshold”。将图像转化为blob，其中“blobFromImage”函数用于减均值、图像缩放和进行通道交换（由于opencv中的图像存储都是基于BGR通道，所以需要将原本的RGB通道替换为BGR通道）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFaceBox</span><span class="params">(net, frame, threshold_conf=<span class="number">0.7</span>)</span>:</span></span><br><span class="line">    bounding_OpencvDnn = frame.copy()</span><br><span class="line">    bounding_Height = bounding_OpencvDnn.shape[<span class="number">0</span>]</span><br><span class="line">    bounding_Width = bounding_OpencvDnn.shape[<span class="number">1</span>]</span><br><span class="line">    blobs = cv2.dnn.blobFromImage(bounding_OpencvDnn, <span class="number">1.0</span>, (<span class="number">300</span>, <span class="number">300</span>), [<span class="number">104</span>, <span class="number">117</span>, <span class="number">123</span>], <span class="literal">True</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure></p><p>侦测人脸的网络向前传递。接着进行人脸识别框bounding box的绘制，设置bounding box的坐标分别为x1、y1，x2、y2。输出检测是一个4-D矩阵，其中i是面部的迭代器，第三维用于遍历检测到的面部数据，第四维包含了每个面的边界框和分数信息。由于识别框的输出坐标会在[0,1]间进行归一化，所以，为了获得正确的bounding box，需要将坐标再乘以原始图像的宽度和高度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">net.setInput(blobs)</span><br><span class="line">detections = net.forward()</span><br><span class="line">bounding_bboxes = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(detections.shape[<span class="number">2</span>]):</span><br><span class="line">    confidence = detections[<span class="number">0</span>, <span class="number">0</span>, i, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> confidence &gt; threshold_conf:</span><br><span class="line">        x1 = int(detections[<span class="number">0</span>, <span class="number">0</span>, i, <span class="number">3</span>] * bounding_Width)</span><br><span class="line">        y1 = int(detections[<span class="number">0</span>, <span class="number">0</span>, i, <span class="number">4</span>] * bounding_Height)</span><br><span class="line">        x2 = int(detections[<span class="number">0</span>, <span class="number">0</span>, i, <span class="number">5</span>] * bounding_Width)</span><br><span class="line">        y2 = int(detections[<span class="number">0</span>, <span class="number">0</span>, i, <span class="number">6</span>] * bounding_Height)</span><br><span class="line">        bounding_bboxes.append([x1, y1, x2, y2])</span><br><span class="line">        cv2.rectangle(bounding_OpencvDnn, (x1, y1), (x2, y2), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), int(round(bounding_Height/<span class="number">150</span>)), <span class="number">8</span>)</span><br><span class="line"><span class="keyword">return</span> bounding_OpencvDnn, bounding_bboxes</span><br></pre></td></tr></table></figure></p><h3 id="3-3-输入"><a href="#3-3-输入" class="headerlink" title="3.3 输入"></a>3.3 输入</h3><p>将识别的源图片位置存放在字符串str当中，调用OpenCV中的函数imread()来读取图片，完成图像的输入。并截取文件的路径只保留文件名，方便后续输出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"C:\\Users\\elbadaernU9.9\\Desktop\\test.png"</span></span><br><span class="line">frame = cv2.imread(str)</span><br><span class="line">name = str[<span class="number">31</span>:]</span><br></pre></td></tr></table></figure></p><p>使用OpenCV库，导入网络模型和预训练模型，在Caffe框架下对Adience数据集进行模型的训练。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">faceProto = <span class="string">"opencv_face_detector.pbtxt"</span></span><br><span class="line">faceModel = <span class="string">"opencv_face_detector_uint8.pb"</span></span><br><span class="line"></span><br><span class="line">ageProto = <span class="string">"age_deploy.prototxt"</span></span><br><span class="line">ageModel = <span class="string">"age_net.caffemodel"</span></span><br></pre></td></tr></table></figure></p><h3 id="5-4-测试输出"><a href="#5-4-测试输出" class="headerlink" title="5.4 测试输出"></a>5.4 测试输出</h3><p>最后使用imshow()函数在输入的图像上显示网络的输出，包括识别框bounding box、分类（预测）的最终结果。为了使图像正常显示，需要添加一行代码“cv2.waitKey(1)”，并设置显示的时间为5秒。通过imwrite()函数保存输出的结果。至此，主要的年龄识别系统编写完成。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">label = <span class="string">"&#123;&#125;,&#123;&#125;"</span>.format(gender, age)</span><br><span class="line">cv2.putText(frameFace, label, (bounding_bbox[<span class="number">0</span>], bounding_bbox[<span class="number">1</span>]<span class="number">-10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.8</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>, cv2.LINE_AA)</span><br><span class="line">cv2.imshow(<span class="string">"Age &amp; Gender Prediction Demo"</span>, frameFace)</span><br><span class="line">cv2.imwrite(<span class="string">"age-gender-out-&#123;&#125;"</span>.format(args.input),frameFace)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p><img src="/2021/05/26/基于卷积神经网络的面部年龄识别/B.png" alt></p><h3 id="5-5-拓展"><a href="#5-5-拓展" class="headerlink" title="5.5 拓展"></a>5.5 拓展</h3><p>系统初步的年龄估计功能实现以后，开始对系统进行进一步的优化和功能拓展。</p><p>由于原系统的图像输入是以保存的图片形式导入的，在实际应用当中没有事先保存源图像文件的情况下就会有诸多不便。所以尝试将图像的输入形式做一个动态的拓展，由静态的图片形式补充为摄像头动态捕捉人像。</p><p>通过调用OpenCV启动摄像头的函数，使系统自动捕获人脸，同时保留图片输入的功能（使用Dos命令实现）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cap = cv2.VideoCapture(args.input <span class="keyword">if</span> args.input <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">padding = <span class="number">20</span></span><br><span class="line"><span class="keyword">while</span> cv2.waitKey(<span class="number">1</span>) &lt; <span class="number">0</span>:</span><br><span class="line">    t = time.time()</span><br><span class="line">    hasFrame, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasFrame:</span><br><span class="line">        cv2.waitKey()</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>由于Adience数据集同样包含了性别的标签，可以在年龄估计的同时为系统添加性别预测功能的代码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">genderProto = <span class="string">"gender_deploy.prototxt"</span></span><br><span class="line">genderModel = <span class="string">"gender_net.caffemodel"</span></span><br><span class="line"></span><br><span class="line">genderList = [<span class="string">'Male'</span>, <span class="string">'Female'</span>]</span><br><span class="line">genderNet = cv2.dnn.readNet(genderModel, genderProto)</span><br><span class="line"></span><br><span class="line">genderNet.setInput(blobs)</span><br><span class="line">genderPredction = genderNet.forward()</span><br><span class="line"></span><br><span class="line">label = <span class="string">"&#123;&#125;,&#123;&#125;"</span>.format(gender, age)</span><br></pre></td></tr></table></figure></p><p>完成后在Pycharm中将项目封装为.exe可执行文件。</p><p><img src="/2021/05/26/基于卷积神经网络的面部年龄识别/D.png" alt><br><img src="/2021/05/26/基于卷积神经网络的面部年龄识别/E.png" alt><br>得到最终的运行结果如下：</p><p><img src="/2021/05/26/基于卷积神经网络的面部年龄识别/F.png" alt><br><img src="/2021/05/26/基于卷积神经网络的面部年龄识别/G.png" alt><br>完整的人脸识别程序代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFaceBox</span><span class="params">(net, frame, threshold_conf=<span class="number">0.7</span>)</span>:</span></span><br><span class="line">    bounding_OpencvDnn = frame.copy()</span><br><span class="line">    bounding_Height = bounding_OpencvDnn.shape[<span class="number">0</span>]</span><br><span class="line">    bounding_Width = bounding_OpencvDnn.shape[<span class="number">1</span>]</span><br><span class="line">    blobs = cv2.dnn.blobFromImage(bounding_OpencvDnn, <span class="number">1.0</span>, (<span class="number">300</span>, <span class="number">300</span>), [<span class="number">104</span>, <span class="number">117</span>, <span class="number">123</span>], <span class="literal">True</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    net.setInput(blobs)</span><br><span class="line">    detections = net.forward()</span><br><span class="line">    bounding_bboxes = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(detections.shape[<span class="number">2</span>]):</span><br><span class="line">        confidence = detections[<span class="number">0</span>, <span class="number">0</span>, i, <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> confidence &gt; threshold_conf:</span><br><span class="line">            x1 = int(detections[<span class="number">0</span>, <span class="number">0</span>, i, <span class="number">3</span>] * bounding_Width)</span><br><span class="line">            y1 = int(detections[<span class="number">0</span>, <span class="number">0</span>, i, <span class="number">4</span>] * bounding_Height)</span><br><span class="line">            x2 = int(detections[<span class="number">0</span>, <span class="number">0</span>, i, <span class="number">5</span>] * bounding_Width)</span><br><span class="line">            y2 = int(detections[<span class="number">0</span>, <span class="number">0</span>, i, <span class="number">6</span>] * bounding_Height)</span><br><span class="line">            bounding_bboxes.append([x1, y1, x2, y2])</span><br><span class="line">            cv2.rectangle(bounding_OpencvDnn, (x1, y1), (x2, y2), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), int(round(bounding_Height/<span class="number">150</span>)), <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> bounding_OpencvDnn, bounding_bboxes</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'Use this script to run age and gender recognition using OpenCV.'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--input'</span>, help=<span class="string">'Path to input image or video file. Skip this argument to capture frames from a camera.'</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">faceProto = <span class="string">"opencv_face_detector.pbtxt"</span></span><br><span class="line">faceModel = <span class="string">"opencv_face_detector_uint8.pb"</span></span><br><span class="line"></span><br><span class="line">ageProto = <span class="string">"age_deploy.prototxt"</span></span><br><span class="line">ageModel = <span class="string">"age_net.caffemodel"</span></span><br><span class="line"></span><br><span class="line">genderProto = <span class="string">"gender_deploy.prototxt"</span></span><br><span class="line">genderModel = <span class="string">"gender_net.caffemodel"</span></span><br><span class="line"></span><br><span class="line">MODEL_MEAN_VALUES = (<span class="number">78.4263377603</span>, <span class="number">87.7689143744</span>, <span class="number">114.895847746</span>)</span><br><span class="line">ageList = [<span class="string">'(0-2)'</span>, <span class="string">'(4-6)'</span>, <span class="string">'(8-12)'</span>, <span class="string">'(15-20)'</span>, <span class="string">'(25-32)'</span>, <span class="string">'(38-43)'</span>, <span class="string">'(48-53)'</span>, <span class="string">'(60-100)'</span>]</span><br><span class="line">genderList = [<span class="string">'Male'</span>, <span class="string">'Female'</span>]</span><br><span class="line"><span class="comment">#genderList.decode("utf-8")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load network</span></span><br><span class="line">ageNet = cv2.dnn.readNet(ageModel, ageProto)</span><br><span class="line">genderNet = cv2.dnn.readNet(genderModel, genderProto)</span><br><span class="line">faceNet = cv2.dnn.readNet(faceModel, faceProto)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a video file or an image file or a camera stream</span></span><br><span class="line">cap = cv2.VideoCapture(args.input <span class="keyword">if</span> args.input <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">padding = <span class="number">20</span></span><br><span class="line"><span class="keyword">while</span> cv2.waitKey(<span class="number">1</span>) &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># Read frame</span></span><br><span class="line">    t = time.time()</span><br><span class="line">    hasFrame, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasFrame:</span><br><span class="line">        cv2.waitKey()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    frameFace, bounding_bboxes = getFaceBox(faceNet, frame)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bounding_bboxes:</span><br><span class="line">        print(<span class="string">"No face Detected, Checking next frame"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> bounding_bbox <span class="keyword">in</span> bounding_bboxes:</span><br><span class="line">        print(<span class="string">"=====================================Face Found====================================="</span>)</span><br><span class="line">        <span class="comment"># print(bounding_bbox)</span></span><br><span class="line">        face = frame[max(<span class="number">0</span>,bounding_bbox[<span class="number">1</span>]-padding):min(bounding_bbox[<span class="number">3</span>]+padding,frame.shape[<span class="number">0</span>]<span class="number">-1</span>),max(<span class="number">0</span>,bounding_bbox[<span class="number">0</span>]-padding):min(bounding_bbox[<span class="number">2</span>]+padding, frame.shape[<span class="number">1</span>]<span class="number">-1</span>)]</span><br><span class="line"></span><br><span class="line">        blobs = cv2.dnn.blobFromImage(face, <span class="number">1.0</span>, (<span class="number">227</span>, <span class="number">227</span>), MODEL_MEAN_VALUES, swapRB=<span class="literal">False</span>)</span><br><span class="line">        genderNet.setInput(blobs)</span><br><span class="line">        genderPredction = genderNet.forward()</span><br><span class="line">        gender = genderList[genderPredction[<span class="number">0</span>].argmax()]</span><br><span class="line">        <span class="comment"># print("Gender Output : &#123;&#125;".format(genderPredction))</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Gender : &#123;&#125;, conf = &#123;:.3f&#125;"</span>.format(gender, genderPredction[<span class="number">0</span>].max()))</span><br><span class="line"></span><br><span class="line">        ageNet.setInput(blobs)</span><br><span class="line">        agepredction = ageNet.forward()</span><br><span class="line">        age = ageList[agepredction[<span class="number">0</span>].argmax()]</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Age Output : &#123;&#125;"</span>.format(agepredction))</span><br><span class="line">        print(<span class="string">"Age : &#123;&#125;, conf = &#123;:.3f&#125;"</span>.format(age, agepredction[<span class="number">0</span>].max()))</span><br><span class="line"></span><br><span class="line">        label = <span class="string">"&#123;&#125;,&#123;&#125;"</span>.format(gender, age)</span><br><span class="line">        cv2.putText(frameFace, label, (bounding_bbox[<span class="number">0</span>], bounding_bbox[<span class="number">1</span>]<span class="number">-10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.8</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>, cv2.LINE_AA)</span><br><span class="line">        cv2.imshow(<span class="string">"Age &amp; Gender Prediction Demo"</span>, frameFace)</span><br><span class="line">        <span class="comment"># cv2.imwrite("age-gender-out-&#123;&#125;".format(args.input),frameFace)</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"time : &#123;:.3f&#125;"</span>.format(time.time() - t))</span><br><span class="line">    print(<span class="string">"=====================================Round Over====================================="</span>)</span><br></pre></td></tr></table></figure></p><p>(本文节选自我的毕业论文，有删改)<br>相关代码和训练集已打包至github：<a href="https://github.com/elbadaernU404/AgeGenderPredictionDemo" target="_blank" rel="noopener">https://github.com/elbadaernU404/AgeGenderPredictionDemo</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-训练模型和框架&quot;&gt;&lt;a href=&quot;#1-训练模型和框架&quot; class=&quot;headerlink&quot; title=&quot;1.训练模型和框架&quot;&gt;&lt;/a&gt;1.训练模型和框架&lt;/h2&gt;&lt;h3 id=&quot;1-1-Adience数据集&quot;&gt;&lt;a href=&quot;#1-1-Adience数据集&quot; class=&quot;headerlink&quot; title=&quot;1.1 Adience数据集&quot;&gt;&lt;/a&gt;1.1 Adience数据集&lt;/h3&gt;&lt;p&gt;Adience图片集包括Flickr等相册，通过从iPhone5（或更高版本）的智能手机等移动设备自动上传并进行组装，由其作者根据知识共享（CC）许可向公众发布。数据集提供了共计26580张面部照片的数据和基准，旨在尽可能真实地应对实际成像并做出判断。数据的标签有年龄组、性别、户外等，可用于监督学习的人脸识别对年龄的研究。Adience收录的数据信息包括主体外观、动作、噪点、光线等实际情况中进行图像采集时包含的动态变化，具有环境适应性强、应用范围广的特点。&lt;/p&gt;
&lt;h3 id=&quot;1-2-Caffe框架&quot;&gt;&lt;a href=&quot;#1-2-Caffe框架&quot; class=&quot;headerlink&quot; title=&quot;1.2 Caffe框架&quot;&gt;&lt;/a&gt;1.2 Caffe框架&lt;/h3&gt;&lt;p&gt;Caffe（Convolutional Architecture for Fast Feature Embedding）采用CUDA架构，可在CPU和GPU上进行高速运算，是一个兼具了效率、表达和思维模块化的卷积神经网络框架。&lt;/p&gt;
&lt;p&gt;Caffe的数据结构以Blobs-Layers-Net的形式存在。&lt;/p&gt;
&lt;p&gt;Blobs是Caffe的核心数据格式，提供了统一的内存接口，并且可以在CPU与GPU之间进行数据同步。主要通过四维张量（Number&lt;em&gt;Channel&lt;/em&gt;weight*high）的形式，按照C-contiguous方式（数组的行存储连续且不间断）来存储和交流网络中的权重、激活值、正反向数据。&lt;/p&gt;
&lt;p&gt;Layers是Caffe模型的关键内容，是组成神经网络和进行相关计算的基础。所有的Layer层都可以接收底层输入的Blobs，并向高层输出Blobs。Layers每一层都定义三种重要的计算：初始化（Setup）、向前传播（Forward）、向后传播（Backward）。&lt;/p&gt;
&lt;p&gt;其包含的运算有：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 1.&lt;font color=&quot;orange&quot;&gt;load data&lt;/font&gt;：数据载入&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 2.&lt;font color=&quot;orange&quot;&gt;Convolve filters&lt;/font&gt;：卷积层，进行卷积。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 3.&lt;font color=&quot;orange&quot;&gt;Pooling&lt;/font&gt;：池化层，进行池化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 4.&lt;font color=&quot;orange&quot;&gt;Nonlinearities&lt;/font&gt;：非线性映射运算，即激活函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 5.&lt;font color=&quot;orange&quot;&gt;Inner Products&lt;/font&gt;：内积运算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 6.&lt;font color=&quot;orange&quot;&gt;Normalize&lt;/font&gt;：归一化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 7.&lt;font color=&quot;orange&quot;&gt;Compute losses&lt;/font&gt;：损失函数计算，如softmax、hinge。&lt;/p&gt;
&lt;p&gt;Net是一个由一系列连接的Layer层组成的有向无环图（Directed Acyclic Graph，DAG）。caffe会在向前传播或向后传播时，对DAG中的所有层进行记录，确保其准确性。&lt;/p&gt;
&lt;h2 id=&quot;2-基于卷积神经网络的人脸识别&quot;&gt;&lt;a href=&quot;#2-基于卷积神经网络的人脸识别&quot; class=&quot;headerlink&quot; title=&quot;2.基于卷积神经网络的人脸识别&quot;&gt;&lt;/a&gt;2.基于卷积神经网络的人脸识别&lt;/h2&gt;&lt;h3 id=&quot;2-1-卷积神经网络架构&quot;&gt;&lt;a href=&quot;#2-1-卷积神经网络架构&quot; class=&quot;headerlink&quot; title=&quot;2.1 卷积神经网络架构&quot;&gt;&lt;/a&gt;2.1 卷积神经网络架构&lt;/h3&gt;&lt;p&gt;使用的架构包括3个卷积层、2个全连接层和1个最终输出层。具体定义卷积层如下：&lt;/p&gt;
&lt;p&gt;1.Conv1：将内核大小为3&lt;em&gt;3&lt;/em&gt;7的共计96个像素节点的过滤应用于输入第一卷积层中，经过修正线性单元ReLU（激活函数）处理后，池化层采用保留最大值（max-pooling）的规则，选择一个两像素跨度的3*3区域中最大值，进行池化，再经过局部响应归一化层（Local Response Normalization，LRN）。&lt;/p&gt;
&lt;p&gt;2.Conv2：上一层的输出（96×28×28）由第二个卷积层进行处理，包括对256个大小为96&lt;em&gt;5&lt;/em&gt;5的像素过滤。同样的，经过一个修正线性单元ReLU，最大池化层，和一个与之前参数相同的局部响应归一化层。&lt;/p&gt;
&lt;p&gt;3.Conv3：第三层卷积层通过对一组384个大小为256&lt;em&gt;3&lt;/em&gt;3的像素过滤来对256×14×14的 Blob进行处理，接着经过修正线性单元ReLU和一个最大池化层。&lt;/p&gt;
&lt;p&gt;再通过下列方式定义完全连接层：&lt;/p&gt;
&lt;p&gt;1.第一个完全连接层包含了512个人工神经元，用于接收第三卷积层的输出结果。接着再通过修正线性单元ReLU和Dropout层（防止CNN过拟合）。&lt;/p&gt;
&lt;p&gt;2.第二个完全连接层接收第一个完全连接层的512个人工神经元空间大小的输出（同样包含512个人工神经元），再通过修正线性单元ReLU和Dropout层。&lt;/p&gt;
&lt;p&gt;3.第三层完全连接层映射最终的分类结果。&lt;/p&gt;
&lt;p&gt;最终，最后一个完全连接层的输出会被反馈到为每个类别分配概率的Softmax层，预测其本身通过给定的测试图像的最大概率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/26/基于卷积神经网络的面部年龄识别/A.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-2-年龄预测&quot;&gt;&lt;a href=&quot;#2-2-年龄预测&quot; class=&quot;headerlink&quot; title=&quot;2.2 年龄预测&quot;&gt;&lt;/a&gt;2.2 年龄预测&lt;/h3&gt;&lt;p&gt;人的面部特征无时不刻发生着微妙变化反映出其年龄的不断增长，在最理想的情况之下，人的面部特征随着人的成长应该表现出正相关的关系，那么年龄估计就是一个广义上的回归问题。然而实际上仅通过回归的方法来判断一个人的年龄是靠不住的，即便一个正常的自然人也很难推断出观察对象的准确实际年龄。&lt;/p&gt;
&lt;p&gt;但是人眼可以对观察对象做出一个大致判断，较为准确的预测出对方的年龄所在区间。这样，就对对方的年龄有了初步估计。这样，就可以对年龄区间进行一个分类，以进一步研究人脸和年龄的关系。&lt;/p&gt;
&lt;p&gt;Adience数据集将人的年龄划分为了八个类别，分别为：[0-2]、[4-6]、[8-13]、[15-20]、[25-32]、[38-43]、[48-53]、[60 -]。因此，深度神经网络在最终的Softmax层中有8个节点，分别对各年龄段进行分类。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MODEL_MEAN_VALUES = (&lt;span class=&quot;number&quot;&gt;78.4263377603&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;87.7689143744&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;114.895847746&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ageList = [&lt;span class=&quot;string&quot;&gt;&#39;(0-2)&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;(4-6)&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;(8-12)&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;(15-20)&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;(25-32)&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;(38-43)&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;(48-53)&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;(60-100)&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Blob输入网络进行年龄的检测，并且年龄检测程序向前传播。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ageNet.setInput(blobs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;agepredction = ageNet.forward()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;age = ageList[agepredction[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].argmax()]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://yoursite.com/categories/机器学习/"/>
    
    
    <category term="CNN" scheme="http://yoursite.com/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络算法</title>
    <link href="http://yoursite.com/2021/05/25/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2021/05/25/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%AE%97%E6%B3%95/</id>
    <published>2021-05-25T05:01:35.000Z</published>
    <updated>2022-06-27T07:41:21.970Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>神经网络(Neural Networks，NN)是人工智能研究领域的重要组成部分，是大数据与人工智能技术发展的重要动力。</p><h2 id="1-卷积神经网络"><a href="#1-卷积神经网络" class="headerlink" title="1.卷积神经网络"></a>1.卷积神经网络</h2><p>卷积神经网络属于机器学习领域当中的深度学习技术，是一类包含了卷积计算并且具有深度结构的前馈神经网络（Feedforward Neural Networks）。由纽约大学教授Yann LeCun在1998年提出，主要应用于语音识别、计算机视觉、自然语言处理等领域。</p><p>其本质上是一个采用了局部连接和权值共享方式的多层感知机，包括一般的卷积神经网络（CNN）和深度卷积神经网络（Deep Convolutional Neural Networks, DCNN），通常不做特意区分。一般的卷积神经网络存在浅层结构，但准确性和表现力相对不足，深度卷积神经网络可以自动从大规模的数据中进行特征学习，且具备将结果向同类型的未知数据泛化的能力，是目前最常用的神经网络技术。</p><h2 id="2-卷积神经网络原理"><a href="#2-卷积神经网络原理" class="headerlink" title="2.卷积神经网络原理"></a>2.卷积神经网络原理</h2><h3 id="2-1-卷积原理"><a href="#2-1-卷积原理" class="headerlink" title="2.1 卷积原理"></a>2.1 卷积原理</h3><p>从数学的角度出发，分析数学中定义一种运算，称(f*g)(n)为(f，g)的卷积（Convolution）。其连续的定义为：</p><p><img src="/2021/05/25/卷积神经网络算法/A.png" alt><br>其离散的定义为：</p><p><img src="/2021/05/25/卷积神经网络算法/B.png" alt></p><p>其连续和离散具有共同的特征：n=τ+(n-τ)，当令x=τ，y=n-τ时，有直线：x+y=n，其图像为如下图：</p><p><img src="/2021/05/25/卷积神经网络算法/C.png" alt><br>如果遍历这些直线，就类似于沿直线卷起毛巾的过程。</p><p>下面将卷积扩展到二维，有两个R2→R的二元函数f(x，y)和g(x，y)，那么令f和g的卷积就是一个新的R2→R的二元函数c(x，y)：</p><p><img src="/2021/05/25/卷积神经网络算法/D.png" alt><br>其含义为将f在(s，t)上的值乘以g在(x-s，y-t)上的值，再遍历从-∞到+∞全部s和t的值，进行f和g积分意义上的加和，最终得到c在(x，y)上的值（二重积分）。</p><p>可以看出这种加和是一种加权求和，即以f为权，(x，y)为中心，将f在(s，t)上的值乘以g距离中心(-s，-t)上的值再相加。</p><p>其离散的表示形式为：</p><p><img src="/2021/05/25/卷积神经网络算法/E.png" alt></p><h3 id="2-2-神经元"><a href="#2-2-神经元" class="headerlink" title="2.2 神经元"></a>2.2 神经元</h3><p>神经细胞有众多的树突和一个伸长的轴突，不同神经元之间通过树突连接轴突的方式，并通过神经脉冲的传导进行细胞间交流。具体过程为神经细胞A的轴突连接到神经细胞B的树突，传导神经脉冲，神经细胞A根据其树突传递来的信号决定是否通过轴突来向下一个神经细胞C传递信息。</p><p>1943年，美国心理学家W.McCulloch和数学家W.Pitts根据生物神经元、生物电和生物化学的运行机理提出了二值神经元的数学模型，即神经细胞机能的简单化的数理模型，被称作莫克罗-彼特氏神经模型（McCulloch－Pitts′Neuron Model），也叫人工神经元模型。</p><p><img src="/2021/05/25/卷积神经网络算法/F.png" alt><br>一个人工神经元模型就是对生物神经元的数学建模：</p><p><img src="/2021/05/25/卷积神经网络算法/G.png" alt><br>其中X1、X2、X3、…、Xn分别是从其他神经元传入的输入信号，Wi1、Wi2、Wi3、…、Win分别是对应X1、X2、X3、…、Xn的权重。θ表示一个阈值，或称为偏置（Bias），其设置目的是正确将样本分类。神经元当前的输入信号和偏置相加后产生当前神经元的最终处理信号Net，称为净激活或净激励（Net Activation），并作为激活函数或激励函数（Activation Function）f的输入，即f（net），最终得到对应的输出yi。形如：</p><p><img src="/2021/05/25/卷积神经网络算法/H.png" alt><br>激活函数<strong>f（net）</strong>的作用是通过加入非线性因素来解决线性模型的表达和分类能力不足的问题。常见的激活函数有：</p><h4 id="1-Linear"><a href="#1-Linear" class="headerlink" title="1.Linear"></a>1.Linear</h4><p>Linear是一个线性激活函数：<strong>f(x)=∑i xiwi+b</strong>。本质上就是对输入的加权求和再加上偏置，所以相对简单，功能较为单一。</p><p>由于多个矩阵进行连乘的结果仍是矩阵，类似的，如果一个神经网络中仅使用线性激活函数，那么就只能学习到线性函数。</p><p><img src="/2021/05/25/卷积神经网络算法/I.png" alt></p><h4 id="2-Sigmoid"><a href="#2-Sigmoid" class="headerlink" title="2.Sigmoid"></a>2.Sigmoid</h4><p>Sigmoid是在神经网络研究的初始阶段就被投入了广泛使用的一个经典的非线性激活函数，其表达式是一种逻辑斯蒂函数（Logistic Function）：</p><p><img src="/2021/05/25/卷积神经网络算法/J.png" alt><br>其中<strong>x=∑i xiwi+b</strong></p><p>这个函数在函数的区域内是完全可导的，输出为0到1范围内的正值（被证实不易于神经网络对收敛的学习），并且对于接近0和1的函数部分，导数无限趋近于0，存在明显的梯度衰减问题。所以现阶段对Sigmod函数的应用已经越来越少。</p><p><img src="/2021/05/25/卷积神经网络算法/K.png" alt></p><h4 id="3-Tanh"><a href="#3-Tanh" class="headerlink" title="3.Tanh"></a>3.Tanh</h4><p>通过其图像可以看出Tanh函数旨在克服Sigmoid函数只能取正值的缺陷，将其设计为关于原点对称的双曲正切（hyperbolic tangent）形式：</p><p><img src="/2021/05/25/卷积神经网络算法/L.png" alt><br>其中<strong>x=∑i xiwi+b</strong>。函数的导数取值范围在0到1之间，优于sigmoid的0至1/4，在一定程度上减轻了梯度的消失。但函数的两端仍然存在梯度饱和问题，且计算变得更为复杂。</p><p>Tanh的输入和输出能够保持非线性单调上升和下降的关系，符合BP算法网络的梯度求解，容错性好。</p><p><img src="/2021/05/25/卷积神经网络算法/M.png" alt></p><h4 id="4-ReLU-（The-Rectified-Linear-Unit）"><a href="#4-ReLU-（The-Rectified-Linear-Unit）" class="headerlink" title="4.ReLU （The Rectified Linear Unit）"></a>4.ReLU （The Rectified Linear Unit）</h4><p>其公式的表达形式为：</p><p><img src="/2021/05/25/卷积神经网络算法/N.png" alt><br>也可以表示为<strong>f(x)=max(0,x)</strong>。即当输入信号小于0时，函数的输出为0；当输入信号大于0时，函数的输出等于输入值。</p><p>ReLU拥有操作简便，耗时少的优点，又具有部分线性的特性，不会出现过饱和现象、减免了梯度消失的问题（函数得到的随机梯度下降法的收敛速度比Sigmoid和Tanh都快）。并且ReLU只需要一个阈值就可以得到激活值，不用和Sigmoid一样进行复杂的指数运算。但其神经元比价脆弱容易失去作用：当神经元接收到非常大的梯度数据流以后，该神经元可能就不再对输入数据进行反馈了，所以在进行训练时要设置一个较小的学习率参数。ReLU是目前用于神经网络领域最常见的激活函数之一。</p><p><img src="/2021/05/25/卷积神经网络算法/O.png" alt><br>这就是单个人工神经元的定义。但是早期的单个人工神经元模型甚至无法处理异或等运算，在多个人工神经元发展为神经网络之后逐渐克服了这些问题和种种困难，成为现代人工智能的重要模型。<br><a id="more"></a></p><h3 id="2-3-神经网络"><a href="#2-3-神经网络" class="headerlink" title="2.3 神经网络"></a>2.3 神经网络</h3><p>神经网络（NN），又叫人工神经网络（Artificial Neural Networks， ANN），是一个历史悠久的计算模型。</p><p>进行上述过程的推演，将一个人工神经元的输出作为另一个人工神经元的输入，一定数量的这样的人工神经元就连接成人工神经网络。人工神经网络具有多种拓扑结构，其中“多层全连接前向神经网络”结构相对简便：将输入连接到网络第一层的每个神经元上，前一层的每个神经元的输出再连接到下一层的每个神经元的输入上，这样最后一层神经元的输出就可以作为整个神经网络的输出来使用。</p><p>图例为一个3层的神经网络结构，第1层称为输入层，第2层称为隐藏层，第三层称为输出层。其包含了10个输入端（10元向量），第1、2层各有12个神经元，最后一层有6个神经元，那么该结构的神经网络最终输出的就是一个6元向量。</p><p><img src="/2021/05/25/卷积神经网络算法/P.png" alt><br>关于整个神经网络的计算可以通过矩阵式表出（单层神经网络的表达式）。假设神经网络拥有n个神经元的第i层收到m个输入，可以表示为下列形式：</p><p><img src="/2021/05/25/卷积神经网络算法/Q.png" alt><br>如果每层神经元的个数不同，那么，输入/输出的维度也不相同，但整体形式保持一致。O^i是n元的输出向量，由于神经网络的第i层共有n个神经元，那么第i层的输入（即第i-1层的输出）是一个m元向量。权值矩阵w是n x m的矩阵：n个神经元中每个神经元包含m个权值。w乘以第i - 1层输出的m向量，可以得到n向量，再加上n元偏置向量b，对结果的每一个元素施以激活函数f，最后就得到第i层的n元输出向量。</p><h3 id="3-卷积神经网络结构"><a href="#3-卷积神经网络结构" class="headerlink" title="3.卷积神经网络结构"></a>3.卷积神经网络结构</h3><h4 id="3-1-图像的输入和特征提取"><a href="#3-1-图像的输入和特征提取" class="headerlink" title="3.1 图像的输入和特征提取"></a>3.1 图像的输入和特征提取</h4><p>对于一幅图像，全连接神经网络（Fully Connected Neural Network）可以通过将其平整化为数组，并把像素值作为预测图像中数值的特征。</p><p>经典的神经网络模型，需要对整幅目标图像进行读取来将其作为神经网络的输入，即全连接模式。如果目标图像的尺寸非常大，那么在连接过程中的参数过多，会导致数据计算量非常大，使得网络理解图像信息变得更加困难。</p><p>类比人类对外部环境的感知过程，通常是一个从局部到全部的过程，图像中的空间关系也类似这样，局部范围内像素之间的联系较为紧密，而距离较远的像素之间相关性较弱。所以，各个神经元不需要对整幅图像进行感知，只需对图像的各部分进行感知，然后在更高层将局部信息拼接完整，这样综合起来同样能够获取全局信息。这样的感知模式就是卷积神经网络模型中降低参数数目的重要方法：局部感受野（Local Receptive Fields）。</p><p><img src="/2021/05/25/卷积神经网络算法/R.png" alt><br>假设输入图像为字母X和O的图片，通过局部感受野来提取图像的特征。对于CNN的对比模式，CNN是通过一小块一小块的对比在图像中大致相同的位置找到一些粗略的特征进行匹配。相比较传统的整图逐一对比方式，CNN的小块匹配模式能更好的比较出图像之间的相似性。</p><p><img src="/2021/05/25/卷积神经网络算法/S.png" alt><br>以字母x为例，用像素值“1”表示白色，用像素值“-1”表示灰色，可以提取出三个重要的特征：1个中心交叉线，两个斜边对角线：</p><p><img src="/2021/05/25/卷积神经网络算法/T.png" alt></p><h4 id="3-2-卷积层"><a href="#3-2-卷积层" class="headerlink" title="3.2 卷积层"></a>3.2 卷积层</h4><p>卷积神经网络中的第一层始终是卷积层（除去输入层）。当开始对一张图片进行识别时，CNN并不能立即对需要识别的部分进行准确匹配，而是首先对源文件的每个位置进行尝试性匹配，将匹配的目标特征作为一个过滤器，从而处理掉匹配度低的部分。这个操作就是卷积操作。</p><p>在这个字母识别案例当中，要计算一个特征和其在字母“X”的原图上对应的某一小块的结果，可以将两个小块内对应位置的像素值进行乘法运算，再将整个小块内乘法运算的结果累加起来，除以小块内像素点总个数。</p><p>这样，不论匹配的两个像素点的颜色均为白色或者灰色，它们的乘积结果1×1和(-1)×(1)都为1，说明每一对能够匹配成功的像素，其结果恒为1。类似的，不能完全匹配的结果乘积则为1×(-1)=-1。相关步骤如下：</p><p><img src="/2021/05/25/卷积神经网络算法/U.png" alt><br>通过卷积的计算，第一块特征完成匹配后结果为1。</p><p><img src="/2021/05/25/卷积神经网络算法/V.png" alt><br>类似的，将第一块特征与其他部分进行匹配，得到匹配后的结果。</p><p><img src="/2021/05/25/卷积神经网络算法/W.png" alt><br>以此类推，对三个特征不断重复上述步骤，通过对每个特征的卷积操作，最终得到一个称为feature map的新二维数组。其中值的含义是越接近1的值表示该对应位置和特征的匹配越完整，越接近-1的值表示该对应位置和特征的反向匹配越完整，而接近0的值表示对应位置没有明显匹配或不相关。</p><p><img src="/2021/05/25/卷积神经网络算法/X.png" alt><br>可以预见，当图像的尺寸增大时，每一个卷积层的大小和卷积层的数目呈线性增长的关系，其内部的加法、乘法和除法操作的次数也会随之增加，计算量也会越庞大。</p><h4 id="3-3-池化层（Pooling）"><a href="#3-3-池化层（Pooling）" class="headerlink" title="3.3 池化层（Pooling）"></a>3.3 池化层（Pooling）</h4><p>由于第一层卷积操作的匹配程序计算量较大，如果遇到数据量大的情况会严重影响卷积的效率。为了有效的减少这一步骤的计算，CNN会通过池化层的结构将输入的源图像文件进行必要的简化和缩放，尽可能的减少文件的像素信息，只保留必要的数据信息，减少内存消耗。</p><p>池化层通常采用2*2像素的池化区域，按照一定的算法规则保留池化区域中的最大值（max-pooling）、均值（mean-pooling）等，并将结果作为区域的像素。</p><p>下图显示了左上角2×2池化区域的max-pooling结果，取该区域的最大值max(0.77,-0.11,-0.11,1.00)，作为池化后的结果。</p><p><img src="/2021/05/25/卷积神经网络算法/Y.png" alt><br>类似的，池化区域向左移动，取第二块区域的取大值max(0.11,0.33,-0.11,0.33)，作为池化后的结果。</p><p><img src="/2021/05/25/卷积神经网络算法/Z.png" alt><br>以此类推，得到最终结果如下：</p><p><img src="/2021/05/25/卷积神经网络算法/0.png" alt><br>以同样的方式对所有feature map执行相同操作。</p><p><img src="/2021/05/25/卷积神经网络算法/1.png" alt><br>最大池化（max-pooling）保留了每一区域内的最大值，也就是相当于保留了这一块区域的最佳匹配结果（值越接近1表示匹配程度越高）。池化操作不会分析区域内具体完成匹配的部分，而是关注是否有某一部分能够匹配上。</p><p>通过池化操作，图像被简化，在很大程度上减少了计算量，降低计算机负载。</p><h4 id="3-4-激活函数"><a href="#3-4-激活函数" class="headerlink" title="3.4 激活函数"></a>3.4 激活函数</h4><p>激活函数通过加入非线性因素将卷积层的输出结果做非线性的映射。卷积层常用的激活函数有修正线性单元ReLU函数，其收敛速度较快，且梯度计算简单。ReLU函数的一般表达式近似于max(0，x)，即当x&lt;0时，输出结果恒为0，当x≥0时，输出结果为参数本身。</p><p>下图为通过ReLU对feature map的处理，首先取max(0,0.77)，结果为0.77。</p><p><img src="/2021/05/25/卷积神经网络算法/2.png" alt><br>类似的，第二个值取max(0,-0.11)，结果为0。</p><p><img src="/2021/05/25/卷积神经网络算法/3.png" alt><br>以此类推，最终得到结果如下：</p><p><img src="/2021/05/25/卷积神经网络算法/4.png" alt></p><h4 id="3-5-深度神经网络"><a href="#3-5-深度神经网络" class="headerlink" title="3.5 深度神经网络"></a>3.5 深度神经网络</h4><p>通过将卷积、激活函数、池化进行组合，得到一层简单的神经网络解构。</p><p><img src="/2021/05/25/卷积神经网络算法/5.png" alt><br>将卷积、池化、激活函数经过组合和拓展以后，层数增加，得到深度神经网络的结构。</p><p><img src="/2021/05/25/卷积神经网络算法/6.png" alt></p><h4 id="3-6-全连接层（Fully-connected-layers）"><a href="#3-6-全连接层（Fully-connected-layers）" class="headerlink" title="3.6 全连接层（Fully connected layers）"></a>3.6 全连接层（Fully connected layers）</h4><p>全连接层相当于整个神经网络当中的“分类器”，数据经过卷积、池化、激活函数等深度网络以后，再通过全连接层对结果进行分类，获取识别的结果。由于神经网络技术是对有标签数据的一种监督学习，在模型的训练过程中，得到全连接层的权重，这样再通过模型对目标进行识别时，根据卷积、池化、激活函数等深度网络操作的结果和得到的权重进行加权求和，获取对各分类结果的预测值，选择最优结果即完成预测分类的任务。全连接层可以有多个。</p><p>将经过卷积、激活函数、池化后的深度网络的结果串联起来，对字母进行识别判断。</p><p><img src="/2021/05/25/卷积神经网络算法/7.png" alt></p><h4 id="3-7-卷积神经网络"><a href="#3-7-卷积神经网络" class="headerlink" title="3.7 卷积神经网络"></a>3.7 卷积神经网络</h4><p>再完成了卷积层、池化层、激活函数、深度神经网络、全连接层一系列的操作后，就得到了一个完整的卷积神经网络的结构。整体可划分为两大步骤，步骤一是经过卷积、池化和激活函数的特征提取，步骤二是通过组成深度神经网络和全连接层的特征识别和预测分类。</p><p><img src="/2021/05/25/卷积神经网络算法/8.png" alt><br>卷积神经网络在本质上是一种对输入输出映射关系的学习，特点是不需要掌握输入输出之间的明确关系或具体的函数表达式，而是利用其特征提取的模式对卷积网络加以训练，最终网络会具备输入输出之间映射的能力。</p><p>（本文节选自我的毕业论文）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;神经网络(Neural Networks，NN)是人工智能研究领域的重要组成部分，是大数据与人工智能技术发展的重要动力。&lt;/p&gt;
&lt;h2 id=&quot;1-卷积神经网络&quot;&gt;&lt;a href=&quot;#1-卷积神经网络&quot; class=&quot;headerlink&quot; title=&quot;1.卷积神经网络&quot;&gt;&lt;/a&gt;1.卷积神经网络&lt;/h2&gt;&lt;p&gt;卷积神经网络属于机器学习领域当中的深度学习技术，是一类包含了卷积计算并且具有深度结构的前馈神经网络（Feedforward Neural Networks）。由纽约大学教授Yann LeCun在1998年提出，主要应用于语音识别、计算机视觉、自然语言处理等领域。&lt;/p&gt;
&lt;p&gt;其本质上是一个采用了局部连接和权值共享方式的多层感知机，包括一般的卷积神经网络（CNN）和深度卷积神经网络（Deep Convolutional Neural Networks, DCNN），通常不做特意区分。一般的卷积神经网络存在浅层结构，但准确性和表现力相对不足，深度卷积神经网络可以自动从大规模的数据中进行特征学习，且具备将结果向同类型的未知数据泛化的能力，是目前最常用的神经网络技术。&lt;/p&gt;
&lt;h2 id=&quot;2-卷积神经网络原理&quot;&gt;&lt;a href=&quot;#2-卷积神经网络原理&quot; class=&quot;headerlink&quot; title=&quot;2.卷积神经网络原理&quot;&gt;&lt;/a&gt;2.卷积神经网络原理&lt;/h2&gt;&lt;h3 id=&quot;2-1-卷积原理&quot;&gt;&lt;a href=&quot;#2-1-卷积原理&quot; class=&quot;headerlink&quot; title=&quot;2.1 卷积原理&quot;&gt;&lt;/a&gt;2.1 卷积原理&lt;/h3&gt;&lt;p&gt;从数学的角度出发，分析数学中定义一种运算，称(f*g)(n)为(f，g)的卷积（Convolution）。其连续的定义为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/A.png&quot; alt&gt;&lt;br&gt;其离散的定义为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/B.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;其连续和离散具有共同的特征：n=τ+(n-τ)，当令x=τ，y=n-τ时，有直线：x+y=n，其图像为如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/C.png&quot; alt&gt;&lt;br&gt;如果遍历这些直线，就类似于沿直线卷起毛巾的过程。&lt;/p&gt;
&lt;p&gt;下面将卷积扩展到二维，有两个R2→R的二元函数f(x，y)和g(x，y)，那么令f和g的卷积就是一个新的R2→R的二元函数c(x，y)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/D.png&quot; alt&gt;&lt;br&gt;其含义为将f在(s，t)上的值乘以g在(x-s，y-t)上的值，再遍历从-∞到+∞全部s和t的值，进行f和g积分意义上的加和，最终得到c在(x，y)上的值（二重积分）。&lt;/p&gt;
&lt;p&gt;可以看出这种加和是一种加权求和，即以f为权，(x，y)为中心，将f在(s，t)上的值乘以g距离中心(-s，-t)上的值再相加。&lt;/p&gt;
&lt;p&gt;其离散的表示形式为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/E.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-2-神经元&quot;&gt;&lt;a href=&quot;#2-2-神经元&quot; class=&quot;headerlink&quot; title=&quot;2.2 神经元&quot;&gt;&lt;/a&gt;2.2 神经元&lt;/h3&gt;&lt;p&gt;神经细胞有众多的树突和一个伸长的轴突，不同神经元之间通过树突连接轴突的方式，并通过神经脉冲的传导进行细胞间交流。具体过程为神经细胞A的轴突连接到神经细胞B的树突，传导神经脉冲，神经细胞A根据其树突传递来的信号决定是否通过轴突来向下一个神经细胞C传递信息。&lt;/p&gt;
&lt;p&gt;1943年，美国心理学家W.McCulloch和数学家W.Pitts根据生物神经元、生物电和生物化学的运行机理提出了二值神经元的数学模型，即神经细胞机能的简单化的数理模型，被称作莫克罗-彼特氏神经模型（McCulloch－Pitts′Neuron Model），也叫人工神经元模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/F.png&quot; alt&gt;&lt;br&gt;一个人工神经元模型就是对生物神经元的数学建模：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/G.png&quot; alt&gt;&lt;br&gt;其中X1、X2、X3、…、Xn分别是从其他神经元传入的输入信号，Wi1、Wi2、Wi3、…、Win分别是对应X1、X2、X3、…、Xn的权重。θ表示一个阈值，或称为偏置（Bias），其设置目的是正确将样本分类。神经元当前的输入信号和偏置相加后产生当前神经元的最终处理信号Net，称为净激活或净激励（Net Activation），并作为激活函数或激励函数（Activation Function）f的输入，即f（net），最终得到对应的输出yi。形如：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/H.png&quot; alt&gt;&lt;br&gt;激活函数&lt;strong&gt;f（net）&lt;/strong&gt;的作用是通过加入非线性因素来解决线性模型的表达和分类能力不足的问题。常见的激活函数有：&lt;/p&gt;
&lt;h4 id=&quot;1-Linear&quot;&gt;&lt;a href=&quot;#1-Linear&quot; class=&quot;headerlink&quot; title=&quot;1.Linear&quot;&gt;&lt;/a&gt;1.Linear&lt;/h4&gt;&lt;p&gt;Linear是一个线性激活函数：&lt;strong&gt;f(x)=∑i xiwi+b&lt;/strong&gt;。本质上就是对输入的加权求和再加上偏置，所以相对简单，功能较为单一。&lt;/p&gt;
&lt;p&gt;由于多个矩阵进行连乘的结果仍是矩阵，类似的，如果一个神经网络中仅使用线性激活函数，那么就只能学习到线性函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/I.png&quot; alt&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-Sigmoid&quot;&gt;&lt;a href=&quot;#2-Sigmoid&quot; class=&quot;headerlink&quot; title=&quot;2.Sigmoid&quot;&gt;&lt;/a&gt;2.Sigmoid&lt;/h4&gt;&lt;p&gt;Sigmoid是在神经网络研究的初始阶段就被投入了广泛使用的一个经典的非线性激活函数，其表达式是一种逻辑斯蒂函数（Logistic Function）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/J.png&quot; alt&gt;&lt;br&gt;其中&lt;strong&gt;x=∑i xiwi+b&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个函数在函数的区域内是完全可导的，输出为0到1范围内的正值（被证实不易于神经网络对收敛的学习），并且对于接近0和1的函数部分，导数无限趋近于0，存在明显的梯度衰减问题。所以现阶段对Sigmod函数的应用已经越来越少。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/K.png&quot; alt&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-Tanh&quot;&gt;&lt;a href=&quot;#3-Tanh&quot; class=&quot;headerlink&quot; title=&quot;3.Tanh&quot;&gt;&lt;/a&gt;3.Tanh&lt;/h4&gt;&lt;p&gt;通过其图像可以看出Tanh函数旨在克服Sigmoid函数只能取正值的缺陷，将其设计为关于原点对称的双曲正切（hyperbolic tangent）形式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/L.png&quot; alt&gt;&lt;br&gt;其中&lt;strong&gt;x=∑i xiwi+b&lt;/strong&gt;。函数的导数取值范围在0到1之间，优于sigmoid的0至1/4，在一定程度上减轻了梯度的消失。但函数的两端仍然存在梯度饱和问题，且计算变得更为复杂。&lt;/p&gt;
&lt;p&gt;Tanh的输入和输出能够保持非线性单调上升和下降的关系，符合BP算法网络的梯度求解，容错性好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/M.png&quot; alt&gt;&lt;/p&gt;
&lt;h4 id=&quot;4-ReLU-（The-Rectified-Linear-Unit）&quot;&gt;&lt;a href=&quot;#4-ReLU-（The-Rectified-Linear-Unit）&quot; class=&quot;headerlink&quot; title=&quot;4.ReLU （The Rectified Linear Unit）&quot;&gt;&lt;/a&gt;4.ReLU （The Rectified Linear Unit）&lt;/h4&gt;&lt;p&gt;其公式的表达形式为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/N.png&quot; alt&gt;&lt;br&gt;也可以表示为&lt;strong&gt;f(x)=max(0,x)&lt;/strong&gt;。即当输入信号小于0时，函数的输出为0；当输入信号大于0时，函数的输出等于输入值。&lt;/p&gt;
&lt;p&gt;ReLU拥有操作简便，耗时少的优点，又具有部分线性的特性，不会出现过饱和现象、减免了梯度消失的问题（函数得到的随机梯度下降法的收敛速度比Sigmoid和Tanh都快）。并且ReLU只需要一个阈值就可以得到激活值，不用和Sigmoid一样进行复杂的指数运算。但其神经元比价脆弱容易失去作用：当神经元接收到非常大的梯度数据流以后，该神经元可能就不再对输入数据进行反馈了，所以在进行训练时要设置一个较小的学习率参数。ReLU是目前用于神经网络领域最常见的激活函数之一。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/25/卷积神经网络算法/O.png&quot; alt&gt;&lt;br&gt;这就是单个人工神经元的定义。但是早期的单个人工神经元模型甚至无法处理异或等运算，在多个人工神经元发展为神经网络之后逐渐克服了这些问题和种种困难，成为现代人工智能的重要模型。&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://yoursite.com/categories/机器学习/"/>
    
    
    <category term="CNN" scheme="http://yoursite.com/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop集群组件配置</title>
    <link href="http://yoursite.com/2019/09/09/Hadoop%E9%9B%86%E7%BE%A4%E7%BB%84%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/09/09/Hadoop%E9%9B%86%E7%BE%A4%E7%BB%84%E4%BB%B6%E9%85%8D%E7%BD%AE/</id>
    <published>2019-09-08T18:35:33.000Z</published>
    <updated>2022-06-27T07:30:06.571Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="Spark集群搭建"><a href="#Spark集群搭建" class="headerlink" title="Spark集群搭建"></a>Spark集群搭建</h2><p>首先在scala官网（<a href="http://www.scala-lang.org/files/archive/scala-2.10.4.tgz" target="_blank" rel="noopener">http://www.scala-lang.org/files/archive/scala-2.10.4.tgz</a>）下载scala语言并解压缩，配置/etc/profile下scala的环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SCALA_HOME=/usr/local/scala</span><br><span class="line">export PATH=$PATH:$&#123;SCALA_HOME&#125;/bin</span><br></pre></td></tr></table></figure></p><p>环境变量成功生效后进行测试，输入15*15,返回225，成功</p><p><img src="/2019/09/09/Hadoop集群组件配置/A.png" alt><br>接下来到spark官网（<a href="http://archive.cloudera.com/cdh5/cdh/5/spark-1.5.0-cdh5.6.0.tar.gz" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/cdh/5/spark-1.5.0-cdh5.6.0.tar.gz</a>）下载Spark包，继续配置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_HOME=/usr/local/soft/spark-1.6.0-bin-hadoop2.6</span><br><span class="line">export PATH=$PATH:$&#123;SPARK_HOME&#125;/bin</span><br></pre></td></tr></table></figure></p><p>完成后继续配置<font color="orange">${SPARK_HOME}/conf/spark-env.sh</font></p><p><img src="/2019/09/09/Hadoop集群组件配置/B.png" alt><br>配置<font color="orange">{SPARK_HOME}/conf/ slaves</font>，在vi编辑器中添加node节点,在将程序分发给node节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r spark-1.6.0-bin-hadoop2.6. root@node1:/usr/local/soft/</span><br><span class="line">scp -r spark-1.6.0-bin-hadoop2.6. root@node2:/usr/local/soft/</span><br></pre></td></tr></table></figure></p><p><img src="/2019/09/09/Hadoop集群组件配置/C.png" alt><br>可以通过<font color="#008080">./start-all.sh</font>命令来启动spark集群</p><p><img src="/2019/09/09/Hadoop集群组件配置/D.png" alt><br>可也有通过节点来启动：</p><p><strong>·</strong> 通过<font color="#008080">sbin/start-master.sh</font>启动主节点<br><strong>·</strong> 通过<font color="#008080">sbin/start-slave.sh 192.168.218.141:8070</font>等启动node节点</p><p><img src="/2019/09/09/Hadoop集群组件配置/E.png" alt><br>可以执行<font color="#008080">/bin/run-example SparkPi 10 &gt; Sparkpilog.txt</font>运行spark示例程序</p><p><img src="/2019/09/09/Hadoop集群组件配置/F.png" alt><br>通过<font color="orange">jps</font>命令查看启动的java服务，进行验证</p><p><img src="/2019/09/09/Hadoop集群组件配置/G.png" alt><br><a id="more"></a><br>都通过后，可以在本地浏览器输入<a href="http://192.168.218.141:8090/，进入到spark服务界面" target="_blank" rel="noopener">http://192.168.218.141:8090/，进入到spark服务界面</a></p><p><img src="/2019/09/09/Hadoop集群组件配置/H.png" alt><br>如果要启动spark shell，可以执行：<font color="#008080">spark shell：bin/spark-shell</font></p><p><img src="/2019/09/09/Hadoop集群组件配置/I.png" alt><br><img src="/2019/09/09/Hadoop集群组件配置/J.png" alt><br>最后通过<font color="#008080">./stop-all.sh</font>来关闭spark集群</p><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><h2 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h2><h2 id="Kafuka"><a href="#Kafuka" class="headerlink" title="Kafuka"></a>Kafuka</h2><h2 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h2><h2 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h2><h2 id="Strom"><a href="#Strom" class="headerlink" title="Strom"></a>Strom</h2><p>（未完）</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Spark集群搭建&quot;&gt;&lt;a href=&quot;#Spark集群搭建&quot; class=&quot;headerlink&quot; title=&quot;Spark集群搭建&quot;&gt;&lt;/a&gt;Spark集群搭建&lt;/h2&gt;&lt;p&gt;首先在scala官网（&lt;a href=&quot;http://www.scala-lang.org/files/archive/scala-2.10.4.tgz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.scala-lang.org/files/archive/scala-2.10.4.tgz&lt;/a&gt;）下载scala语言并解压缩，配置/etc/profile下scala的环境变量&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export SCALA_HOME=/usr/local/scala&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$PATH:$&amp;#123;SCALA_HOME&amp;#125;/bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;环境变量成功生效后进行测试，输入15*15,返回225，成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/09/Hadoop集群组件配置/A.png&quot; alt&gt;&lt;br&gt;接下来到spark官网（&lt;a href=&quot;http://archive.cloudera.com/cdh5/cdh/5/spark-1.5.0-cdh5.6.0.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://archive.cloudera.com/cdh5/cdh/5/spark-1.5.0-cdh5.6.0.tar.gz&lt;/a&gt;）下载Spark包，继续配置环境变量&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export SPARK_HOME=/usr/local/soft/spark-1.6.0-bin-hadoop2.6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$PATH:$&amp;#123;SPARK_HOME&amp;#125;/bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完成后继续配置&lt;font color=&quot;orange&quot;&gt;${SPARK_HOME}/conf/spark-env.sh&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/09/Hadoop集群组件配置/B.png&quot; alt&gt;&lt;br&gt;配置&lt;font color=&quot;orange&quot;&gt;{SPARK_HOME}/conf/ slaves&lt;/font&gt;，在vi编辑器中添加node节点,在将程序分发给node节点&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scp -r spark-1.6.0-bin-hadoop2.6. root@node1:/usr/local/soft/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scp -r spark-1.6.0-bin-hadoop2.6. root@node2:/usr/local/soft/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/09/Hadoop集群组件配置/C.png&quot; alt&gt;&lt;br&gt;可以通过&lt;font color=&quot;#008080&quot;&gt;./start-all.sh&lt;/font&gt;命令来启动spark集群&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/09/Hadoop集群组件配置/D.png&quot; alt&gt;&lt;br&gt;可也有通过节点来启动：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 通过&lt;font color=&quot;#008080&quot;&gt;sbin/start-master.sh&lt;/font&gt;启动主节点&lt;br&gt;&lt;strong&gt;·&lt;/strong&gt; 通过&lt;font color=&quot;#008080&quot;&gt;sbin/start-slave.sh 192.168.218.141:8070&lt;/font&gt;等启动node节点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/09/Hadoop集群组件配置/E.png&quot; alt&gt;&lt;br&gt;可以执行&lt;font color=&quot;#008080&quot;&gt;/bin/run-example SparkPi 10 &amp;gt; Sparkpilog.txt&lt;/font&gt;运行spark示例程序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/09/Hadoop集群组件配置/F.png&quot; alt&gt;&lt;br&gt;通过&lt;font color=&quot;orange&quot;&gt;jps&lt;/font&gt;命令查看启动的java服务，进行验证&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/09/Hadoop集群组件配置/G.png&quot; alt&gt;&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop入门</title>
    <link href="http://yoursite.com/2019/09/07/Hadoop%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/09/07/Hadoop%E5%85%A5%E9%97%A8/</id>
    <published>2019-09-07T09:17:17.000Z</published>
    <updated>2022-06-27T07:29:58.866Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Hadoop是一个用Java编写的Apache开源框架，允许使用简单的编程模型跨计算机集群分布式处理大型数据集。Hadoop框架工作的应用程序在跨计算机集群提供分布式存储和计算的环境中工作。Hadoop旨在从单个服务器扩展到数千个机器，每个都提供本地计算和存储。</p><h2 id="Hadoop伪分布式搭建"><a href="#Hadoop伪分布式搭建" class="headerlink" title="Hadoop伪分布式搭建"></a>Hadoop伪分布式搭建</h2><p>首先创建一台master虚拟机，并克隆node1、node2两台节点机，我的虚拟机集群ip地址分别设置为：</p><p><strong>·</strong> 192.168.218.141 <font color="orange">master</font></p><p><strong>·</strong> 192.168.218.142 <font color="orange">node1</font></p><p><strong>·</strong> 192.168.218.143 <font color="orange">node2</font></p><p>到master中设置好ssh，做好主机名与ip地址的映射，修改/etc/hosts下的配置文件，并将完成的hosts文件复制进节点机中</p><p>此时可以打开xshell，也可以继续在虚拟机中进行操作</p><p>将hadoop的jar包上传到虚拟机中，配置环境变量，并对hadoop下的<font color="orange">core-site.xml</font>、<font color="orange">hdfs-site.xml</font>、<font color="orange">yarn-site.xml</font>和<font color="orange">mapred-site.xml</font>文件进行相关配置</p><p>完成以后再将hadoop的安装目录分别拷贝到子节点中，检查是否完成集群文件的配置和部署</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>回到主机中打开hadoop安装目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure><p>（老版本的”start-all.sh”会提示已过期）</p><p>完成hadoop的启动后，在主机和节点机输入jps查看当前运行的java进程</p><p><img src="/2019/09/07/Hadoop入门/1.png" alt><br><img src="/2019/09/07/Hadoop入门/2.png" alt><br><img src="/2019/09/07/Hadoop入门/2.5.png" alt><br>成功后打开浏览器，输入localhost:50700可以进入hadoop初始界面。</p><p><img src="/2019/09/07/Hadoop入门/3.png" alt><br><a id="more"></a><br>因为我之前已经完成了平台的搭建，dfs中已经存放有一些测试文件，可以进行查看(豆瓣电影数据)</p><p><img src="/2019/09/07/Hadoop入门/4.png" alt><br><img src="/2019/09/07/Hadoop入门/A.png" alt></p><h2 id="Mapreduce"><a href="#Mapreduce" class="headerlink" title="Mapreduce"></a>Mapreduce</h2><p>MapReduce是Hadoop中一套分布式的计算框架,分为Map和Reduce两个部分,Map用于数据的整理,Reduce负责数据的汇总，当hadoop平台搭建完成后，就可以使用内置的mapreduce程序”wordcount”进行测试，其作用是对输入文件的词频进行统计</p><p>进入hadoop目录新建一个测试文件夹testfiles，并创建几个txt文本文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd $HADOOP_HOME</span><br><span class="line">mkdir testfiles</span><br><span class="line">echo Hello World &gt;&gt; testfiles/test1.txt</span><br><span class="line">echo Hello Hadoop &gt;&gt; testfiles/test2.txt</span><br><span class="line">echo Hello spark &gt;&gt; testfiles/test3.txt</span><br></pre></td></tr></table></figure></p><p><img src="/2019/09/07/Hadoop入门/5.png" alt><br>执行后再到dfs中创建一个inputtestfiles文件夹,并将用于测试的文本文件发送进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir /inputfiletests</span><br><span class="line">hadoop fs -put testfiles/* /inputfiletests</span><br></pre></td></tr></table></figure></p><p>找到mapreduce所在的位置，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $HADOOP_HOME/share/hadoop/mapreduce</span><br><span class="line">hadoop jar hadoop-mapreduce-examples-2.6.0.jar wordcount /inputfiletests /outputfiletests</span><br></pre></td></tr></table></figure></p><p><img src="/2019/09/07/Hadoop入门/6.png" alt><br><img src="/2019/09/07/Hadoop入门/7.png" alt><br>执行完成后查看输出路径/outputfiletests，包含了运行成功文件和最终输出文件，打开输出的文件进行查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -ls /output</span><br><span class="line">hadoop fs -cat /outputfiletests/part-r-00000</span><br></pre></td></tr></table></figure></p><p><img src="/2019/09/07/Hadoop入门/9.png" alt><br>同时在hadoop后台里也会有wordcount的运行结果</p><p><img src="/2019/09/07/Hadoop入门/10.png" alt><br>最后，关闭hadoop集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop-dfs.sh</span><br><span class="line">stop-yarn.sh</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Hadoop是一个用Java编写的Apache开源框架，允许使用简单的编程模型跨计算机集群分布式处理大型数据集。Hadoop框架工作的应用程序在跨计算机集群提供分布式存储和计算的环境中工作。Hadoop旨在从单个服务器扩展到数千个机器，每个都提供本地计算和存储。&lt;/p&gt;
&lt;h2 id=&quot;Hadoop伪分布式搭建&quot;&gt;&lt;a href=&quot;#Hadoop伪分布式搭建&quot; class=&quot;headerlink&quot; title=&quot;Hadoop伪分布式搭建&quot;&gt;&lt;/a&gt;Hadoop伪分布式搭建&lt;/h2&gt;&lt;p&gt;首先创建一台master虚拟机，并克隆node1、node2两台节点机，我的虚拟机集群ip地址分别设置为：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 192.168.218.141 &lt;font color=&quot;orange&quot;&gt;master&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 192.168.218.142 &lt;font color=&quot;orange&quot;&gt;node1&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;·&lt;/strong&gt; 192.168.218.143 &lt;font color=&quot;orange&quot;&gt;node2&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;到master中设置好ssh，做好主机名与ip地址的映射，修改/etc/hosts下的配置文件，并将完成的hosts文件复制进节点机中&lt;/p&gt;
&lt;p&gt;此时可以打开xshell，也可以继续在虚拟机中进行操作&lt;/p&gt;
&lt;p&gt;将hadoop的jar包上传到虚拟机中，配置环境变量，并对hadoop下的&lt;font color=&quot;orange&quot;&gt;core-site.xml&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;hdfs-site.xml&lt;/font&gt;、&lt;font color=&quot;orange&quot;&gt;yarn-site.xml&lt;/font&gt;和&lt;font color=&quot;orange&quot;&gt;mapred-site.xml&lt;/font&gt;文件进行相关配置&lt;/p&gt;
&lt;p&gt;完成以后再将hadoop的安装目录分别拷贝到子节点中，检查是否完成集群文件的配置和部署&lt;/p&gt;
&lt;h2 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h2&gt;&lt;p&gt;回到主机中打开hadoop安装目录，执行&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;start-dfs.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start-yarn.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（老版本的”start-all.sh”会提示已过期）&lt;/p&gt;
&lt;p&gt;完成hadoop的启动后，在主机和节点机输入jps查看当前运行的java进程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/07/Hadoop入门/1.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/2019/09/07/Hadoop入门/2.png&quot; alt&gt;&lt;br&gt;&lt;img src=&quot;/2019/09/07/Hadoop入门/2.5.png&quot; alt&gt;&lt;br&gt;成功后打开浏览器，输入localhost:50700可以进入hadoop初始界面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/07/Hadoop入门/3.png&quot; alt&gt;&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="BigData" scheme="http://yoursite.com/categories/BigData/"/>
    
    
    <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
</feed>
